"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[49998],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>h});var r=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,h=u["".concat(c,".").concat(d)]||u[d]||g[d]||o;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},30783:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(58168),i=(n(96540),n(15680));const o={title:"init",sidebar_position:1},a="packit source-git init",s={unversionedId:"cli/source-git/init",id:"cli/source-git/init",title:"init",description:"Initialize a repository to serve as a source-git repo.",source:"@site/docs/cli/source-git/init.md",sourceDirName:"cli/source-git",slug:"/cli/source-git/init",permalink:"/docs/cli/source-git/init",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/cli/source-git/init.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"init",sidebar_position:1},sidebar:"autogenerated",previous:{title:"source-git",permalink:"/docs/category/source-git"},next:{title:"status",permalink:"/docs/cli/source-git/status"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Tutorial",id:"tutorial",level:2},{value:"Help",id:"help",level:2}],l={toc:p},u="wrapper";function g(e){let{components:t,...n}=e;return(0,i.yg)(u,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"packit-source-git-init"},(0,i.yg)("inlineCode",{parentName:"h1"},"packit source-git init")),(0,i.yg)("p",null,"Initialize a repository to serve as a ",(0,i.yg)("a",{parentName:"p",href:"/source-git"},"source-git repo"),"."),(0,i.yg)("p",null,"The biggest advantage of this command is the functionality to create source-git\nrepos. Here's a quick rundown what packit does:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Fetches specfile and additional sources from Fedora or CentOS dist-git."),(0,i.yg)("li",{parentName:"ul"},"Apply downstream patches as commits."),(0,i.yg)("li",{parentName:"ul"},"Add source-git configuration to control future syncing to dist-git.")),(0,i.yg)("p",null,"We have ",(0,i.yg)("a",{parentName:"p",href:"/source-git/work-with-source-git/create-source-git"},"a guide")," on how to create\nsource-git repos manually if you want to understand the steps performed."),(0,i.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"A clone of the upstream repo with checked out branch which matches the base ref."),(0,i.yg)("li",{parentName:"ul"},"The git ref of the upstream repo used as a base."),(0,i.yg)("li",{parentName:"ul"},"A clean dist-git repository.")),(0,i.yg)("h2",{id:"tutorial"},"Tutorial"),(0,i.yg)("p",null,"As an example, let's create a source-git repo out of\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/systemd/systemd-stable"},"systemd"),". The project uses a\ndedicated repository to provide backports for actively maintained stable\nreleases."),(0,i.yg)("p",null,"First step is to clone the respective dist-git repo (we'll use Fedora Rawhide\nin our case):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"$ cd $FEDORA_DIST_GIT_REPOS\n$ fedpkg clone systemd\n$ cd systemd\n")),(0,i.yg)("p",null,"We should now determine the version in the specfile"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},'$ rpmspec -q --qf "%{version}" ./systemd.spec\n249.4\n')),(0,i.yg)("p",null,"Since systemd-stable prefixes the backport releases with ",(0,i.yg)("inlineCode",{parentName:"p"},"v"),", we know that we want to base our source-git repo on the ",(0,i.yg)("inlineCode",{parentName:"p"},"v249.4")," tag:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"$ cd $FEDORA_SOURCE_GIT_REPOS\n$ git clone https://github.com/systemd/systemd-stable\n$ cd systemd-stable\n$ git checkout 'v249.4'\n")),(0,i.yg)("p",null,"All the prereqs should be met now! We have the upstream clone with the proper\ntag checked out and the respective dist-git repo. We can now run the ",(0,i.yg)("inlineCode",{parentName:"p"},"source-git init"),"\ncommand:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"$ packit source-git init v249.4 $FEDORA_SOURCE_GIT_REPOS/systemd-stable $FEDORA_DIST_GIT_REPOS/systemd\n")),(0,i.yg)("p",null,"Once the command finishes successfully, your source-git repo is available for\nyou at ",(0,i.yg)("inlineCode",{parentName:"p"},"$FEDORA_SOURCE_GIT_REPOS/systemd-stable"),".\nIf you're about to push the created repo to a forge in order to use\n",(0,i.yg)("a",{parentName:"p",href:"https://github.com/packit/hardly"},"our automation"),", don't forget to push\nthe existing upstream tags as well (",(0,i.yg)("inlineCode",{parentName:"p"},"git push --tags"),"), otherwise, the automation won't work."),(0,i.yg)("p",null,"Please head on to a section in this documentation which covers\n",(0,i.yg)("a",{parentName:"p",href:"/source-git/work-with-source-git"},"working with source-git repos"),"."),(0,i.yg)("p",null,"By default, using ",(0,i.yg)("inlineCode",{parentName:"p"},"%autosetup")," in the ",(0,i.yg)("inlineCode",{parentName:"p"},"%prep")," section of the specfile is required.\nYou can use ",(0,i.yg)("inlineCode",{parentName:"p"},"--ignore-missing-autosetup")," option to enforce running the command\nwithout using ",(0,i.yg)("inlineCode",{parentName:"p"},"%autosetup"),", but Packit then cannot guarantee that the patches will be properly applied.\nTherefore, please make sure that running ",(0,i.yg)("inlineCode",{parentName:"p"},"%prep")," produces a git repository with patches applied on top when using this option.\nIt will be the base of your source-git repository."),(0,i.yg)("h2",{id:"help"},"Help"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Usage: packit source-git init [OPTIONS] UPSTREAM_REF SOURCE_GIT DIST_GIT\n\n  Initialize SOURCE_GIT as a source-git repo by applying downstream patches\n  from DIST_GIT as Git commits on top of UPSTREAM_REF.\n\n  SOURCE_GIT needs to be an existing clone of the upstream repository.\n\n  UPSTREAM_REF is a tag, branch or commit from SOURCE_GIT.\n\n  SOURCE_GIT and DIST_GIT are paths to the source-git and dist-git repos.\n  Branch names can be specified, separated by colons.\n\n  If a branch name is specified for SOURCE_GIT, the branch is checked out and\n  reset to UPSTREAM_REF.\n\n  If a branch name is specified for DIST_GIT, the branch is checked out before\n  setting up the source-git repo. This branch is expected to exist.\n\n  Each Git commit created in SOURCE_GIT will have a 'From-dist-git-commit'\n  trailer to mark the hash of the dist-git commit from which it is created.\n\n  To learn more about source-git, please check\n\n      https://packit.dev/docs/source-git/\n\n  Examples:\n\n      $ packit source-git init v2.3.1 src/acl:rawhide rpms/acl:rawhide\n      $ packit source-git init --pkg-tool centpkg v2.3.1 src/acl rpms/acl\n\nOptions:\n  --upstream-url TEXT     Git URL of the upstream repository. It is saved in\n                          the source-git configuration if it is specified.\n  --upstream-remote TEXT  Name of the remote pointing to the upstream\n                          repository. If --upstream-url is not specified, the\n                          fetch URL of this remote is saved in the source-git\n                          configuration as the Git URL of the upstream\n                          project. Defaults to 'origin'.\n  --pkg-tool TEXT         Name or path of the packaging tool used to work with\n                          sources in the dist-git repo. A variant of 'rpkg'.\n                          Defaults to 'fedpkg' or the tool configured in the\n                          Packit configuration.\n  --pkg-name TEXT         The name of the package in the distro. Defaults to\n                          the directory name of DIST_GIT.\n  -h, --help              Show this message and exit.\n")))}g.isMDXComponent=!0}}]);