"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[66740],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>u});var a=t(96540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var g=a.createContext({}),p=function(e){var n=a.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(g.Provider,{value:n},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,g=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),y=p(t),c=l,u=y["".concat(g,".").concat(c)]||y[c]||d[c]||r;return t?a.createElement(u,i(i({ref:n},s),{},{components:t})):a.createElement(u,i({ref:n},s))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[y]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},95174:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(58168),l=(t(96540),t(15680));const r={sidebar_label:"changelog",title:"specfile.changelog"},i=void 0,o={unversionedId:"api/specfile/changelog",id:"api/specfile/changelog",title:"specfile.changelog",description:"ChangelogStyle",source:"@site/specfile/api/specfile/changelog.md",sourceDirName:"api/specfile",slug:"/api/specfile/changelog",permalink:"/specfile/api/specfile/changelog",draft:!1,editUrl:"https://github.com/packit/specfile/tree/main/docs/specfile/api/specfile/changelog.md",tags:[],version:"current",frontMatter:{sidebar_label:"changelog",title:"specfile.changelog"},sidebar:"autogenerated",previous:{title:"specfile",permalink:"/specfile/api/specfile/"},next:{title:"conditions",permalink:"/specfile/api/specfile/conditions"}},g={},p=[{value:"ChangelogStyle",id:"changelogstyle",level:2},{value:"standard",id:"standard",level:4},{value:"openSUSE",id:"opensuse",level:4},{value:"openSUSE/SUSE style detached changelog:",id:"opensusesuse-style-detached-changelog",level:2},{value:"ChangelogEntry",id:"changelogentry",level:2},{value:"__init__",id:"__init__",level:4},{value:"evr",id:"evr",level:4},{value:"extended_timestamp",id:"extended_timestamp",level:4},{value:"day_of_month_padding",id:"day_of_month_padding",level:4},{value:"style",id:"style",level:4},{value:"assemble",id:"assemble",level:4},{value:"Changelog",id:"changelog",level:2},{value:"__init__",id:"__init__-1",level:4},{value:"filter",id:"filter",level:4},{value:"parse",id:"parse",level:4},{value:"get_raw_section_data",id:"get_raw_section_data",level:4},{value:"guess_packager",id:"guess_packager",level:4}],s={toc:p},y="wrapper";function d(e){let{components:n,...t}=e;return(0,l.yg)(y,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"changelogstyle"},"ChangelogStyle"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@unique\nclass ChangelogStyle(Enum)\n")),(0,l.yg)("p",null,"Style of changelog entries"),(0,l.yg)("h4",{id:"standard"},"standard"),(0,l.yg)("p",null,"standard changelog entries parseable by RPM (used in Fedora, RHEL, etc.):"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"$DATE $AUTHOR ","<","$EMAIL",">"," - $EVR\n$ENTRY")),(0,l.yg)("h4",{id:"opensuse"},"openSUSE"),(0,l.yg)("h2",{id:"opensusesuse-style-detached-changelog"},"openSUSE/SUSE style detached changelog:"),(0,l.yg)("p",null,"$DATE - $AUTHOR ","<","$EMAIL",">","\n$ENTRY"),(0,l.yg)("h2",{id:"changelogentry"},"ChangelogEntry"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class ChangelogEntry()\n")),(0,l.yg)("p",null,"Class that represents a changelog entry. Changelog entry consists of\na header line starting with ",(0,l.yg)("em",{parentName:"p"},"*"),", followed by timestamp, author and optional\nextra text (usually EVR), and one or more content lines."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Attributes"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"header")," - Header of the entry."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"content")," - List of lines forming the content of the entry.")),(0,l.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def __init__(header: str,\n             content: List[str],\n             following_lines: Optional[List[str]] = None) -> None\n")),(0,l.yg)("p",null,"Initializes a changelog entry object."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"header")," - Header of the entry."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"content")," - List of lines forming the content of the entry."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"following_lines")," - Extra lines that follow the entry.")),(0,l.yg)("h4",{id:"evr"},"evr"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef evr() -> Optional[EVR]\n")),(0,l.yg)("p",null,"EVR (epoch, version, release) of the entry."),(0,l.yg)("h4",{id:"extended_timestamp"},"extended","_","timestamp"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef extended_timestamp() -> bool\n")),(0,l.yg)("p",null,"Whether the timestamp present in the entry header is extended (date and time)."),(0,l.yg)("h4",{id:"day_of_month_padding"},"day","_","of","_","month","_","padding"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef day_of_month_padding() -> str\n")),(0,l.yg)("p",null,"Padding of day of month in the entry header timestamp"),(0,l.yg)("h4",{id:"style"},"style"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef style() -> ChangelogStyle\n")),(0,l.yg)("p",null,"Style of this changelog entry (standard vs openSUSE)."),(0,l.yg)("h4",{id:"assemble"},"assemble"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'@classmethod\ndef assemble(\n        cls,\n        timestamp: Union[datetime.date, datetime.datetime],\n        author: str,\n        content: List[str],\n        evr: Optional[str] = None,\n        day_of_month_padding: str = "0",\n        append_newline: bool = True,\n        style: ChangelogStyle = ChangelogStyle.standard) -> "ChangelogEntry"\n')),(0,l.yg)("p",null,"Assembles a changelog entry."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"timestamp")," - Timestamp of the entry.\nSupply ",(0,l.yg)("inlineCode",{parentName:"li"},"datetime")," rather than ",(0,l.yg)("inlineCode",{parentName:"li"},"date")," for extended format.\nopenSUSE-style changelog entries mandate extended format, so if a ",(0,l.yg)("inlineCode",{parentName:"li"},"date"),"\nis supplied, the timestamp will be set to noon of that day."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"author")," - Author of the entry."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"content")," - List of lines forming the content of the entry."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"evr")," - EVR (epoch, version, release) of the entry.\nIgnored if ",(0,l.yg)("inlineCode",{parentName:"li"},"style")," is ",(0,l.yg)("inlineCode",{parentName:"li"},"ChangelogStyle.openSUSE"),"."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"day_of_month_padding")," - Padding to apply to day of month in the timestamp."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"datetime"),"0 - Whether the entry should be followed by an empty line."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"style")," - Which style of changelog should be created.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  New instance of ",(0,l.yg)("inlineCode",{parentName:"p"},"datetime"),"2 class."),(0,l.yg)("h2",{id:"changelog"},"Changelog"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"class Changelog(UserList[ChangelogEntry])\n")),(0,l.yg)("p",null,"Class that represents a changelog. It behaves like a list of changelog entries,\nordered from bottom to top - the top (newest) entry has index ",(0,l.yg)("em",{parentName:"p"},"-1"),", the bottom\n(oldest) one has index ",(0,l.yg)("em",{parentName:"p"},"0"),"."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Attributes"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"data")," - List of individual entries.")),(0,l.yg)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def __init__(data: Optional[List[ChangelogEntry]] = None,\n             predecessor: Optional[List[str]] = None) -> None\n")),(0,l.yg)("p",null,"Initializes a changelog object."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"data")," - List of individual changelog entries."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"predecessor")," - List of lines at the beginning of a section\nthat can","'","t be parsed into changelog entries.")),(0,l.yg)("h4",{id:"filter"},"filter"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'def filter(since: Optional[Union[str, EVR]] = None,\n           until: Optional[Union[str, EVR]] = None) -> "Changelog"\n')),(0,l.yg)("p",null,"Filters changelog entries with EVR between since and until."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"since")," - Optional lower bound. If specified, entries with EVR higher\nthan or equal to this will be included."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"until")," - Optional upper bound. If specified, entries with EVR lower\nthan or equal to this will be included.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  Filtered changelog."),(0,l.yg)("h4",{id:"parse"},"parse"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},'@classmethod\ndef parse(cls, section: Section) -> "Changelog"\n')),(0,l.yg)("p",null,"Parses a ",(0,l.yg)("inlineCode",{parentName:"p"},"%changelog")," section."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"section")," - Section to parse.")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  New instance of ",(0,l.yg)("inlineCode",{parentName:"p"},"Changelog")," class."),(0,l.yg)("h4",{id:"get_raw_section_data"},"get","_","raw","_","section","_","data"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def get_raw_section_data() -> List[str]\n")),(0,l.yg)("p",null,"Reconstructs section data from changelog."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  List of lines forming the reconstructed section data."),(0,l.yg)("h4",{id:"guess_packager"},"guess","_","packager"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-python"},"def guess_packager() -> str\n")),(0,l.yg)("p",null,"Guesses the name and e-mail of a packager to use for changelog entries.\nThis function uses logic similar to ",(0,l.yg)("inlineCode",{parentName:"p"},"rpmdev-packager")," utility."),(0,l.yg)("p",null,"The following places are searched for this value (in this order):"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"$RPM_PACKAGER")," environment variable"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"%packager")," macro"),(0,l.yg)("li",{parentName:"ul"},"git config"),(0,l.yg)("li",{parentName:"ul"},"Unix username")),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"Returns"),":"),(0,l.yg)("p",null,"  A string to use for the changelog entry author.\nIf nothing was detected, an empty string is returned."))}d.isMDXComponent=!0}}]);