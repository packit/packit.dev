"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[55701],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,g=u["".concat(o,".").concat(d)]||u[d]||b[d]||s;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},31887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>b,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(58168),r=(n(96540),n(15680));const s={title:"Analysis of production DB",authors:"ttomecek"},l=void 0,i={unversionedId:"database/whats-in-production-database",id:"database/whats-in-production-database",title:"Analysis of production DB",description:"How-to?",source:"@site/research/database/whats-in-production-database.md",sourceDirName:"database",slug:"/database/whats-in-production-database",permalink:"/research/database/whats-in-production-database",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/database/whats-in-production-database.md",tags:[],version:"current",frontMatter:{title:"Analysis of production DB",authors:"ttomecek"},sidebar:"autogenerated",previous:{title:"Database refresh",permalink:"/research/database/refresh"},next:{title:"Deployment",permalink:"/research/category/deployment"}},o={},p=[{value:"How-to?",id:"how-to",level:2},{value:"Review tables",id:"review-tables",level:2},{value:"Useless entries",id:"useless-entries",level:3},{value:"Checking validaty of links",id:"checking-validaty-of-links",level:3},{value:"Future work",id:"future-work",level:2}],c={toc:p},u="wrapper";function b(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"how-to"},"How-to?"),(0,r.yg)("p",null,"Here is how you can get a production database shell, please use it wisely!"),(0,r.yg)("p",null,"Find the name of the postgres pod on the production OpenShift namespace:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"$ oc get pods | grep postgres\npostgres-12-1-t4l5k                 1/1       Running     0          80d\n")),(0,r.yg)("p",null,"Open a database console:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'$ oc rsh postgres-12-1-t4l5k psql\npsql (12.5)\nType "help" for help.\n')),(0,r.yg)("p",null,"Connect to the packit database:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},'postgres=# \\c packit\nYou are now connected to database "packit" as user "postgres".\n')),(0,r.yg)("p",null,"List tables in the database:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# \\dt\n                      List of relations\n Schema |             Name             | Type  |    Owner\n--------+------------------------------+-------+-------------\n public | alembic_version              | table | packit-boss\n public | allowlist                    | table | packit-boss\n public | bugzillas                    | table | packit-boss\n public | build_triggers               | table | packit-boss\n public | celery_taskmeta              | table | packit-boss\n public | celery_tasksetmeta           | table | packit-boss\n public | copr_builds                  | table | packit-boss\n public | git_branches                 | table | packit-boss\n public | git_projects                 | table | packit-boss\n public | github_installations         | table | packit-boss\n public | koji_builds                  | table | packit-boss\n public | project_authentication_issue | table | packit-boss\n public | project_issues               | table | packit-boss\n public | project_releases             | table | packit-boss\n public | pull_requests                | table | packit-boss\n public | runs                         | table | packit-boss\n public | srpm_builds                  | table | packit-boss\n public | tft_test_runs                | table | packit-boss\n(18 rows)\n")),(0,r.yg)("h2",{id:"review-tables"},"Review tables"),(0,r.yg)("p",null,"So let's start reviewing how many entries there are in the tables:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# SELECT schemaname,relname,n_live_tup\n  FROM pg_stat_user_tables\n  ORDER BY n_live_tup DESC;\n schemaname |           relname            | n_live_tup\n------------+------------------------------+------------\n public     | celery_taskmeta              |     135670\n public     | runs                         |     111345\n public     | copr_builds                  |     108398\n public     | srpm_builds                  |      32558\n public     | tft_test_runs                |      29114\n public     | pull_requests                |      22377\n public     | git_branches                 |      16780\n public     | build_triggers               |      10411\n public     | project_issues               |       5363\n public     | git_projects                 |       4960\n public     | project_releases             |        585\n public     | koji_builds                  |        254\n public     | allowlist                    |        186\n public     | github_installations         |        154\n public     | project_authentication_issue |          2\n public     | alembic_version              |          1\n public     | bugzillas                    |          0\n public     | celery_tasksetmeta           |          0\n(18 rows)\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"celery_taskmeta")," has 135k entries, what's in there?"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# select * from celery_taskmeta limit 1;\n   id    |               task_id                | status  |    result    |         date_done          | traceback | name | args | kwargs | worker | retries | queue\n---------+--------------------------------------+---------+--------------+----------------------------+-----------+------+------+--------+--------+---------+-------\n 1249908 | d56ac427-0fbc-4d84-bae8-9a6cc045a11d | SUCCESS | \\x80055d942e | 2021-08-07 04:01:27.184676 |           |      |      |        |        |         |\n(1 row)\n")),(0,r.yg)("p",null,"Celery results! And some seems to be pretty beefy:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# SELECT pg_size_pretty( pg_total_relation_size('celery_taskmeta') );\n pg_size_pretty\n----------------\n 155 MB\n(1 row)\n")),(0,r.yg)("p",null,"The other two tables are smaller:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# SELECT pg_size_pretty( pg_total_relation_size('runs') );\n pg_size_pretty\n----------------\n 9264 kB\n(1 row)\n\n\npackit=# SELECT pg_size_pretty( pg_total_relation_size('copr_builds') );\n pg_size_pretty\n----------------\n 45 MB\n(1 row)\n")),(0,r.yg)("p",null,"Though srpm build logs take up a lot of space:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# SELECT pg_size_pretty( pg_total_relation_size('srpm_builds') );\n pg_size_pretty\n----------------\n 239 MB\n(1 row)\n")),(0,r.yg)("h3",{id:"useless-entries"},"Useless entries"),(0,r.yg)("p",null,'Let\'s see if we have some "useless" entries in the database.'),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"packit=# select count(*) from runs where test_run_id is null and koji_build_id is null and copr_build_id is null and srpm_build_id is null;\n count\n-------\n     0\n(1 row)\n\n\npackit=# select count(*) from copr_builds where build_id is null;\n count\n-------\n     0\n(1 row)\n")),(0,r.yg)("h3",{id:"checking-validaty-of-links"},"Checking validaty of links"),(0,r.yg)("p",null,"This section involves Copr only since that's where all our database links\npoint. Copr has a fairly ",(0,r.yg)("a",{parentName:"p",href:"https://docs.pagure.org/copr.copr/user_documentation.html#how-long-do-you-keep-the-builds"},"aggressive garbage collection\npolicy"),"."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Removed after"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"SRPM files"),(0,r.yg)("td",{parentName:"tr",align:null},"2 weeks")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Failed builds"),(0,r.yg)("td",{parentName:"tr",align:null},"2 weeks")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Old packages","[1]"),(0,r.yg)("td",{parentName:"tr",align:null},"2 weeks")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Fresh builds","[2]"),(0,r.yg)("td",{parentName:"tr",align:null},"Never")))),(0,r.yg)("p",null,"[1]"," - These builds are superseded by newer submissions."),(0,r.yg)("p",null,"[2]"," - Our Copr projects for pull-request builds are set to be removed after 60 days."),(0,r.yg)("h2",{id:"future-work"},"Future work"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Do not store task results in the database. We are not using them for\nanything. Even ",(0,r.yg)("a",{parentName:"p",href:"https://docs.celeryproject.org/en/stable/getting-started/first-steps-with-celery.html#keeping-results"},"celery's\ndocumentation"),"\nsays it's an optional thing to do:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"  If you want to keep track of the tasks\u2019 states, Celery needs to store or\n  send the states somewhere. There are several built-in result backends to\n  choose from: SQLAlchemy/Django ORM, MongoDB, Memcached, Redis, RPC\n  (RabbitMQ/AMQP), and \u2013 or you can define your own.\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"We should implement a DB cleanup mechanism based on the findings above. One\nthing to keep in mind is that with dashboard and metrics, it make sense to keep\nold data for statistical purpose, except for the SRPM builds logs which take up\na lot of space.")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"We are not doing\n",(0,r.yg)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-vacuum.html"},"vacuum"),"\nperiodically which is a best practice to conserve space."))))}b.isMDXComponent=!0}}]);