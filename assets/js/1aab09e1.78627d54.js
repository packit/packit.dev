"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[50675],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,m=c["".concat(s,".").concat(d)]||c[d]||g[d]||l;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71271:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=t(58168),r=(t(96540),t(15680));const l={sidebar_label:"value_parser",title:"specfile.value_parser"},i=void 0,o={unversionedId:"api/specfile/value_parser",id:"api/specfile/value_parser",title:"specfile.value_parser",description:"Node",source:"@site/specfile/api/specfile/value_parser.md",sourceDirName:"api/specfile",slug:"/api/specfile/value_parser",permalink:"/specfile/api/specfile/value_parser",draft:!1,editUrl:"https://github.com/packit/specfile/tree/main/docs/specfile/api/specfile/value_parser.md",tags:[],version:"current",frontMatter:{sidebar_label:"value_parser",title:"specfile.value_parser"},sidebar:"autogenerated",previous:{title:"utils",permalink:"/specfile/api/specfile/utils"},next:{title:"specfile",permalink:"/specfile/"}},s={},p=[{value:"Node",id:"node",level:2},{value:"StringLiteral",id:"stringliteral",level:2},{value:"ShellExpansion",id:"shellexpansion",level:2},{value:"ExpressionExpansion",id:"expressionexpansion",level:2},{value:"MacroSubstitution",id:"macrosubstitution",level:2},{value:"EnclosedMacroSubstitution",id:"enclosedmacrosubstitution",level:2},{value:"ConditionalMacroExpansion",id:"conditionalmacroexpansion",level:2},{value:"BuiltinMacro",id:"builtinmacro",level:2},{value:"ValueParser",id:"valueparser",level:2},{value:"flatten",id:"flatten",level:4},{value:"parse",id:"parse",level:4},{value:"construct_regex",id:"construct_regex",level:4}],u={toc:p},c="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"node"},"Node"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class Node(ABC)\n")),(0,r.yg)("p",null,"Base class for all nodes."),(0,r.yg)("h2",{id:"stringliteral"},"StringLiteral"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class StringLiteral(Node)\n")),(0,r.yg)("p",null,"Node representing string literal."),(0,r.yg)("h2",{id:"shellexpansion"},"ShellExpansion"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class ShellExpansion(Node)\n")),(0,r.yg)("p",null,"Node representing shell expansion, e.g. ",(0,r.yg)("em",{parentName:"p"},"%(whoami)"),"."),(0,r.yg)("h2",{id:"expressionexpansion"},"ExpressionExpansion"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class ExpressionExpansion(ShellExpansion)\n")),(0,r.yg)("p",null,"Node representing expression expansion, e.g. ",(0,r.yg)("em",{parentName:"p"},"%","[1+1]"),"."),(0,r.yg)("h2",{id:"macrosubstitution"},"MacroSubstitution"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class MacroSubstitution(Node)\n")),(0,r.yg)("p",null,"Node representing macro substitution, e.g. ",(0,r.yg)("em",{parentName:"p"},"%version"),"."),(0,r.yg)("h2",{id:"enclosedmacrosubstitution"},"EnclosedMacroSubstitution"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class EnclosedMacroSubstitution(Node)\n")),(0,r.yg)("p",null,"Node representing macro substitution enclosed in brackets, e.g. ",(0,r.yg)("em",{parentName:"p"},"%","{","?dist","}"),"."),(0,r.yg)("h2",{id:"conditionalmacroexpansion"},"ConditionalMacroExpansion"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class ConditionalMacroExpansion(Node)\n")),(0,r.yg)("p",null,"Node representing conditional macro expansion, e.g. ",(0,r.yg)("em",{parentName:"p"},"%","{","?prerel:0.","}"),"."),(0,r.yg)("h2",{id:"builtinmacro"},"BuiltinMacro"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class BuiltinMacro(Node)\n")),(0,r.yg)("p",null,"Node representing built-in macro, e.g. ",(0,r.yg)("em",{parentName:"p"},"%","{","quote:Ancient Greek","}"),"."),(0,r.yg)("h2",{id:"valueparser"},"ValueParser"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"class ValueParser()\n")),(0,r.yg)("h4",{id:"flatten"},"flatten"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef flatten(cls, nodes: List[Node]) -> Generator[Node, None, None]\n")),(0,r.yg)("p",null,"Generator that yields flattened nodes. Conditional macro expansions are treated\nas if their conditions were true and their bodies are flattened."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"nodes")," - List of nodes to be flattened.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Yields"),":"),(0,r.yg)("p",null,"  Individual nodes."),(0,r.yg)("h4",{id:"parse"},"parse"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},"@classmethod\ndef parse(cls, value: str) -> List[Node]\n")),(0,r.yg)("p",null,"Parses a value into a list of nodes."),(0,r.yg)("p",null,"Follows the parsing logic of ",(0,r.yg)("inlineCode",{parentName:"p"},"expandMacro()")," from ",(0,r.yg)("em",{parentName:"p"},"rpm/rpmio/macro.c")," in RPM source."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"value")," - Value string to parse.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Returns"),":"),(0,r.yg)("p",null,"  Parsed value as a list of nodes."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Raises"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"UnterminatedMacroException")," - If there is a macro that doesn","'","t end.")),(0,r.yg)("h4",{id:"construct_regex"},"construct","_","regex"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-python"},'@classmethod\ndef construct_regex(\n    cls,\n    value: str,\n    modifiable_entities: Set[str],\n    flippable_entities: Set[str],\n    context: Optional["Specfile"] = None\n) -> Tuple[Pattern, Template, Set[str]]\n')),(0,r.yg)("p",null,"Parses the given value and constructs a regex that allows matching\nsubstrings of a different, but similar value to macro substitutions\nrepresenting modifiable entities, and to modifiable substrings\nof the original value.\nAlso constructs a corresponding template that allows updating\nthe original value."),(0,r.yg)("p",null,"For example, for nodes representing the string ",'"',"1.%","{","version_minor","}",'"',", assuming\n",'"',"version_minor",'"'," is a local macro definition (thus a modifiable entity),\nthe resulting regex would be ",'"',"^(?P","<","sub_0",">",")",".","(?P","<","version_minor",">",".+?)$",'"',",\nand the corresponding template would be ",'"',"$","{","sub_0","}",".%","{","version_minor","}",'"',".\nIf a requested new value would be a match to this regex, the ",'"',"version_minor",'"',"\nmacro definition could be modified with the matching substring and the final\nvalue could be determined by performing a substitution on the template\nwith groupdict of the match."),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"value")," - Value string to parse."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"modifiable_entities")," - Names of modifiable entities, i.e. local macro definitions\nand tags."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"flippable_entities")," - Names of entities that can be enabled/disabled,\ni.e. macro definitions. Must be a subset of modifiable_entities."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"context")," - ",(0,r.yg)("inlineCode",{parentName:"li"},"Specfile")," instance that defines the context for macro expansions.")),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Returns"),":"),(0,r.yg)("p",null,"  Tuple in the form of (constructed regex, corresponding template, entities to flip)."))}g.isMDXComponent=!0}}]);