"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[97149],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>m});var s=r(96540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function n(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,s,a=function(e,t){if(null==e)return{};var r,s,a={},o=Object.keys(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)r=o[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=s.createContext({}),l=function(e){var t=s.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):n(n({},t),e)),r},c=function(e){var t=l(e.components);return s.createElement(u.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,m=p["".concat(u,".").concat(d)]||p[d]||h[d]||o;return r?s.createElement(m,n(n({ref:t},c),{},{components:r})):s.createElement(m,n({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,n=new Array(o);n[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:a,n[1]=i;for(var l=2;l<o;l++)n[l]=r[l];return s.createElement.apply(null,n)}return s.createElement.apply(null,r)}d.displayName="MDXCreateElement"},72256:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>n,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var s=r(58168),a=(r(96540),r(15680));const o={title:"Definitions of SLOs and SLIs for Packit",authors:["jpopelka","ttomecek","lbarczio"]},n=void 0,i={unversionedId:"monitoring/error-budgets/SLOs-SLIs",id:"monitoring/error-budgets/SLOs-SLIs",title:"Definitions of SLOs and SLIs for Packit",description:"If you are not familiar with SLOs and SLIs, please check the parent first.",source:"@site/research/monitoring/error-budgets/SLOs-SLIs.md",sourceDirName:"monitoring/error-budgets",slug:"/monitoring/error-budgets/SLOs-SLIs",permalink:"/research/monitoring/error-budgets/SLOs-SLIs",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/monitoring/error-budgets/SLOs-SLIs.md",tags:[],version:"current",frontMatter:{title:"Definitions of SLOs and SLIs for Packit",authors:["jpopelka","ttomecek","lbarczio"]},sidebar:"autogenerated",previous:{title:"Error Budgets",permalink:"/research/monitoring/error-budgets/"},next:{title:"Error Budgets",permalink:"/research/monitoring/error-budgets/users-expectations"}},u={},l=[{value:"How do others do it?",id:"how-do-others-do-it",level:2},{value:"Packit SLOs",id:"packit-slos",level:2},{value:"SLO1: Changes to GitHub PRs receive a status update within 15 seconds in 99% of cases",id:"slo1-changes-to-github-prs-receive-a-status-update-within-15-seconds-in-99-of-cases",level:3},{value:"SLO2: 98% of builds have status set to success or failure within 12 hours",id:"slo2-98-of-builds-have-status-set-to-success-or-failure-within-12-hours",level:3},{value:"SLO3: 95% of test runs have status set to success or failure within 12 hours",id:"slo3-95-of-test-runs-have-status-set-to-success-or-failure-within-12-hours",level:3},{value:"Packit SLIs",id:"packit-slis",level:2},{value:"Note on the implementation",id:"note-on-the-implementation",level:3},{value:"Ideas",id:"ideas",level:2}],c={toc:l},p="wrapper";function h(e){let{components:t,...r}=e;return(0,a.yg)(p,(0,s.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"If you are not familiar with SLOs and SLIs, please check ",(0,a.yg)("a",{parentName:"p",href:"../error-budgets"},"the parent")," first."),(0,a.yg)("h2",{id:"how-do-others-do-it"},"How do others do it?"),(0,a.yg)("p",null,"The CKI team has a pretty comprehensive set of\n",(0,a.yg)("a",{parentName:"p",href:"https://cki-project.org/docs/hacking/rfcs/cki-004-slo/#created-slos-based-on-the-feedback"},"SLOs"),".\nInstead of taking the same route, let's start small and slowly add more and\nmore objectives and indicators over time."),(0,a.yg)("p",null,"Testing Farm team has ",(0,a.yg)("a",{parentName:"p",href:"https://docs.google.com/document/d/1iHK3v_tCK4w-F82ZvUEO3xHcNv78tkR31w3oF-zpi1Q/edit#heading=h.26gd46u8e15q"},"Service level\nexpectations"),"\nand a pretty slick\n",(0,a.yg)("a",{parentName:"p",href:"http://grafana-latest-osci-infra.cloud.privileged.psi.redhat.com/d/VXwH27XMk/rhel-infrastructure-and-service-health?orgId=1"},"dashboard"),"."),(0,a.yg)("h2",{id:"packit-slos"},"Packit SLOs"),(0,a.yg)("p",null,"SLOs are based on ",(0,a.yg)("a",{parentName:"p",href:"/research/monitoring/error-budgets/users-expectations"},"discussions with our stakeholders"),"."),(0,a.yg)("p",null,"Let's define job statuses first to get a clear understanding of these objectives:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"successful run: a job finished and everything is awesome"),(0,a.yg)("li",{parentName:"ul"},"failure: the job finished and wasn't successful: the PR needs to be fixed"),(0,a.yg)("li",{parentName:"ul"},"error: infrastructure problems prevented the job to complete")),(0,a.yg)("h3",{id:"slo1-changes-to-github-prs-receive-a-status-update-within-15-seconds-in-99-of-cases"},"SLO1: Changes to GitHub PRs receive a status update within 15 seconds in 99% of cases"),(0,a.yg)("p",null,"It can be frustrating (for us and our users) when we push changes to our PRs\nwhile no statuses are being set. Let's make a deadline for packit to set these."),(0,a.yg)("h3",{id:"slo2-98-of-builds-have-status-set-to-success-or-failure-within-12-hours"},"SLO2: 98% of builds have status set to success or failure within 12 hours"),(0,a.yg)("p",null,"The most core functionality is to run COPR builds for PRs. We want to be sure\nthose builds either pass or fail and no error interrupts the build process."),(0,a.yg)("p",null,"The problem is that some builds take minutes and some hours so it's hard to\ndesign this objective in a generic way for everyone."),(0,a.yg)("h3",{id:"slo3-95-of-test-runs-have-status-set-to-success-or-failure-within-12-hours"},"SLO3: 95% of test runs have status set to success or failure within 12 hours"),(0,a.yg)("p",null,"Similar as builds but since Testing Farm is outside of our control, let's lower\nthe percentage."),(0,a.yg)("h2",{id:"packit-slis"},"Packit SLIs"),(0,a.yg)("p",null,"If we want to track our SLOs, we need to start measuring different aspects of our workflow."),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of builds queued")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of tests queued")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of builds started")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of test runs started")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of builds finished")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of test runs finished")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Time it took to go for a build from queued to finish")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Time it took to go for a test from queued to finish")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of unfinished builds that are in progress for more than 12 hours")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of unfinished test runs that are in progress for more than 12 hours")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Number of PRs handled by packit with no commit status from packit for more than 15s")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("p",{parentName:"li"},"Time it takes packit to set the initial status"))),(0,a.yg)("h3",{id:"note-on-the-implementation"},"Note on the implementation"),(0,a.yg)("p",null,"All the other teams use prometheus + grafana combo so this will be our choice\nas well."),(0,a.yg)("p",null,(0,a.yg)("a",{parentName:"p",href:"https://prometheus.io/docs/concepts/metric_types/#histogram"},"Histograms and\nsummaries")," are\nused in prometheus to measure durations. One can then use these values for\n",(0,a.yg)("a",{parentName:"p",href:"https://prometheus.io/docs/practices/histograms/"},"aggregation operations")," such\nas averages, sums, max, min, above or below a certain value."),(0,a.yg)("h2",{id:"ideas"},"Ideas"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"It would be awesome to know if our GitHub app correctly accepts all webhook\nevents but ",(0,a.yg)("a",{parentName:"li",href:"https://docs.github.com/en/rest/reference/apps#webhooks"},"sadly there is no API to get the\nlist"),", though\n",(0,a.yg)("a",{parentName:"li",href:"https://github.com/github/roadmap/issues/125"},"GitHub has plans for this\nfunctionality"),".")))}h.isMDXComponent=!0}}]);