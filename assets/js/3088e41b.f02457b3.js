"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[85349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),p=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(c.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(n),u=a,g=l["".concat(c,".").concat(u)]||l[u]||h[u]||r;return n?i.createElement(g,o(o({ref:t},d),{},{components:n})):i.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},41730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={title:"Create a source-git repo",date:new Date("2020-02-20T00:00:00.000Z"),sidebar_position:5},o="How to create a source-git repository?",s={unversionedId:"work-with-source-git/create-source-git",id:"work-with-source-git/create-source-git",title:"Create a source-git repo",description:"This guide walks through the steps to create a source-git repository from an",source:"@site/source-git/work-with-source-git/create-source-git.md",sourceDirName:"work-with-source-git",slug:"/work-with-source-git/create-source-git",permalink:"/source-git/work-with-source-git/create-source-git",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/source-git/work-with-source-git/create-source-git.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Create a source-git repo",date:"2020-02-20T00:00:00.000Z",sidebar_position:5},sidebar:"autogenerated",previous:{title:"Working with source-git",permalink:"/source-git/work-with-source-git/"},next:{title:"Update a spec file",permalink:"/source-git/work-with-source-git/update-spec"}},c={},p=[{value:"Identify the upstream Git repository and version",id:"identify-the-upstream-git-repository-and-version",level:2},{value:"Create and populate the <code>.distro</code> subdirectory",id:"create-and-populate-the-distro-subdirectory",level:2},{value:"Configure syncing to dist-git",id:"configure-syncing-to-dist-git",level:2},{value:"Update the spec-file and apply the downstream patches",id:"update-the-spec-file-and-apply-the-downstream-patches",level:2},{value:"Test the source-git repository",id:"test-the-source-git-repository",level:2}],d={toc:p},l="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-create-a-source-git-repository"},"How to create a source-git repository?"),(0,a.kt)("p",null,"This guide walks through the steps to create a source-git repository from an\nupstream project."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"We have a dedicated command which automates most of the steps described\nbelow: ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli/source-git/init"},(0,a.kt)("inlineCode",{parentName:"a"},"packit source-git init")))),(0,a.kt)("p",null,"Consider joining the ",(0,a.kt)("a",{parentName:"p",href:"https://fedoraproject.org/wiki/SIGs/Source-git"},"Fedora Source-git SIG")," if you are interested in the\ndevelopment of the source-git workflow."),(0,a.kt)("p",null,"The process to construct a source-git repository and a branch to track\ndownstream (distribution) work, which then can be synced to dist-git has the\nfollowing steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Identify the upstream Git repository and Git commit corresponding to the\ncurrent version of the software, as available in the distribution."),(0,a.kt)("li",{parentName:"ol"},"Create and populate a ",(0,a.kt)("inlineCode",{parentName:"li"},".distro")," subdirectory in the upstream working tree\nto hold the files needed to package and test the software in the\ndistribution."),(0,a.kt)("li",{parentName:"ol"},"Configure syncing to dist-git in ",(0,a.kt)("inlineCode",{parentName:"li"},".distro/source-git.yaml"),"."),(0,a.kt)("li",{parentName:"ol"},"Remove the references to the downstream (distribution) patches from the\nspec-file and apply these patches as Git-commits."),(0,a.kt)("li",{parentName:"ol"},"Test the source-git repository by trying to sync the content to the\ncorresponding dist-git repository.")),(0,a.kt)("p",null,"As an example, let's see the steps one would need to take to create a\nsource-git repository for ",(0,a.kt)("a",{parentName:"p",href:"https://savannah.nongnu.org/projects/acl"},"acl")," and a branch to track distribution work in\nFedora Rawhide."),(0,a.kt)("h2",{id:"identify-the-upstream-git-repository-and-version"},"Identify the upstream Git repository and version"),(0,a.kt)("p",null,"Let's search for an official project URL for ",(0,a.kt)("em",{parentName:"p"},"acl")," ",(0,a.kt)("a",{parentName:"p",href:"https://src.fedoraproject.org/rpms/acl/blob/rawhide/f/acl.spec"},"in the spec-file for\nFedora Rawhide"),". This could be done by using the web interface for\n",(0,a.kt)("a",{parentName:"p",href:"https://src.fedoraproject.org/"},"src.fedoraproject.org"),", too, but as the dist-git repository is needed later\non, it makes sense to clone it using ",(0,a.kt)("inlineCode",{parentName:"p"},"fedpkg"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ mkdir rpms\n$ fedpkg clone -a acl rpms/acl\nCloning into 'rpms/acl'...\nremote: Enumerating objects: 699, done.\nremote: Counting objects: 100% (699/699), done.\nremote: Compressing objects: 100% (473/473), done.\nremote: Total 699 (delta 359), reused 442 (delta 207), pack-reused 0\nReceiving objects: 100% (699/699), 129.66 KiB | 316.00 KiB/s, done.\nResolving deltas: 100% (359/359), done.\n$ git -C rpms/acl status\nOn branch rawhide\nYour branch is up to date with 'origin/rawhide'.\n\nnothing to commit, working tree clean\n")),(0,a.kt)("p",null,"The dist-git repo is cloned in an ",(0,a.kt)("inlineCode",{parentName:"p"},"rpms")," directory, and the corresponding\nsource-git repository will be created in a ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," directory later on. This\ndirectory structure helps to keep multiple dist-git and source-git\nrepositories separate and nicely organized."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"URL")," tag in the spec-file tells, that ",(0,a.kt)("a",{parentName:"p",href:"https://savannah.nongnu.org/projects/acl"},"acl")," is hosted at\n",(0,a.kt)("a",{parentName:"p",href:"https://savannah.nongnu.org/projects/acl"},"https://savannah.nongnu.org/projects/acl"),". Following the links from that page\nwe can look up the URL of the project's Git repository, and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"https"),"\none to clone it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ mkdir src\n$ git clone https://git.savannah.gnu.org/git/acl.git src/acl\nCloning into 'src/acl'...\nremote: Counting objects: 3687, done.\nremote: Compressing objects: 100% (962/962), done.\nremote: Total 3687 (delta 2705), reused 3687 (delta 2705)\nReceiving objects: 100% (3687/3687), 707.18 KiB | 1.22 MiB/s, done.\nResolving deltas: 100% (2705/2705), done.\n$ git -C src/acl status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nnothing to commit, working tree clean\n")),(0,a.kt)("p",null,"From the version field of the spec-file we can tell that Fedora Rawhide has\n",(0,a.kt)("em",{parentName:"p"},"acl")," version 2.3.1. We search the upstream Git repository for the tag which\npoints to the commit corresponding to this version. This commit is going to be\nthe starting point of the ",(0,a.kt)("inlineCode",{parentName:"p"},"rawhide")," branch on which the distribution work in\nFedora Rawhide is going to be tracked."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cd src/acl\n$ git tag --list | grep 2.3.1\nv2.3.1\n$ git checkout -B rawhide v2.3.1\nSwitched to a new branch 'rawhide'\n")),(0,a.kt)("h2",{id:"create-and-populate-the-distro-subdirectory"},"Create and populate the ",(0,a.kt)("inlineCode",{parentName:"h2"},".distro")," subdirectory"),(0,a.kt)("p",null,"In source-git, files required to package and test the software in a\ndistribution are stored in a ",(0,a.kt)("inlineCode",{parentName:"p"},".distro")," subdirectory. This allows keeping these\nfiles separate from the source code. The distribution agnostic name was chosen\nin order to enable the easy sharing of the packaging work between different\ndistributions."),(0,a.kt)("p",null,"Let's create and populate this directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ mkdir .distro\n$ rsync --archive --delete \\\n        --filter 'exclude *.patch' \\\n        --filter 'exclude sources' \\\n        --filter 'exclude .git*' \\\n        ../../rpms/acl/ .distro/\n$ tree -a .distro/\n.distro/\n\u251c\u2500\u2500 acl-2.3.1.tar.gz.sig\n\u251c\u2500\u2500 acl.spec\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 cmd-line-options\n    \u2502\xa0\xa0 \u251c\u2500\u2500 Makefile\n    \u2502\xa0\xa0 \u251c\u2500\u2500 PURPOSE\n    \u2502\xa0\xa0 \u251c\u2500\u2500 runtest.sh\n    \u2502\xa0\xa0 \u2514\u2500\u2500 test-core.sh\n    \u2514\u2500\u2500 tests.yml\n\n2 directories, 7 files\n")),(0,a.kt)("p",null,"A quick explanation of the filters used in the rsync-command above:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Patch-files are not copied from dist-git. They will become part of the\nsource-git repository as Git commits at a later step."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"sources")," file, used in dist-git to reference the source-archives in the\nlookaside-cache is excluded. Upstream sources are part of the working tree\nin source-git."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},".git")," directory of the dist-git repo, and other ",(0,a.kt)("inlineCode",{parentName:"li"},".git*")," files are\nexcluded. These are specific to the dist-git repository. They are re-created\nlater on, as needed, using a content specific to source-git.")),(0,a.kt)("p",null,"As gitignore rules in the upstream repo and dist-git might be different, we\nneed to reset these for the ",(0,a.kt)("inlineCode",{parentName:"p"},".distro")," directory. In the case of ",(0,a.kt)("em",{parentName:"p"},"acl")," for\nexample the top-level ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," has a rule to exclude ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile"),"s, but the\ntests in dist-git have a ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile"),", which need to become part of the\nsource-git repo."),(0,a.kt)("p",null,"Because the ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," file in dist-git has no other ignore rules than the\none for the source-code archives, there are no other rules to be added to\n",(0,a.kt)("inlineCode",{parentName:"p"},".distro/.gitignore"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cat > .distro/.gitignore\n# Reset gitignore rules\n!*\n")),(0,a.kt)("h2",{id:"configure-syncing-to-dist-git"},"Configure syncing to dist-git"),(0,a.kt)("p",null,"Now, let's create the configuration which is going to be used when syncing\ncontent to dist-git. This is used to control certain aspects of syncing\ncontent to dist-git when using ",(0,a.kt)("inlineCode",{parentName:"p"},"packit source-git update-dist-git"),"."),(0,a.kt)("p",null,"Create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},".distro/source-git.yaml")," with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'---\nupstream_project_url: https://git.savannah.nongnu.org/git/acl.git\nupstream_ref: v2.3.1\ndownstream_package_name: acl\nspecfile_path: .distro/acl.spec\npatch_generation_ignore_paths:\n  - .distro/\npatch_generation_patch_id_digits: 1\nsync_changelog: true\nfiles_to_sync:\n  - src: .distro/\n    dest: .\n    delete: true\n    filters:\n      - "protect .git*"\n      - "protect sources"\n      - "exclude source-git.yaml"\n      - "exclude .gitignore"\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"upstream_project_url")," is the URL of the upstream repository. This is saved to\nbe used by future operations."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"upstream_ref")," is the Git ref to be used to tell where upstream history ends\nand downstream history starts. Packit uses this value to tell which version of\nthe source-archive to download from the URL specified in ",(0,a.kt)("inlineCode",{parentName:"p"},"Source"),", in order to\nbe uploaded to dist-git's lookaside-cache."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"downstream_package_name")," tells ",(0,a.kt)("inlineCode",{parentName:"p"},"packit")," the name of the package."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"specfile_path")," specifies where the specfile is to be found."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"patch_generation_ignore_paths")," lists the paths which should be ignored when\ngenerating downstream patches, to be added in dist-git. As ",(0,a.kt)("inlineCode",{parentName:"p"},".distro")," is the\nplace where the files related to packaging are stored, set the configuration\nto ignore this path, so that there are no patch files generated for it."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"patch_generation_patch_id_digits")," tells Packit how many digits are used, at\nminimum, when adding ",(0,a.kt)("inlineCode",{parentName:"p"},"PatchN")," tags to the spec-file. The patch in ",(0,a.kt)("inlineCode",{parentName:"p"},"acl")," is in\nthe form of ",(0,a.kt)("inlineCode",{parentName:"p"},"Patch1"),", doesn't have a minimum width, so set this value to 0."),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},"sync_changelog")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," tells Packit to sync the changelog in the\nspec-file as is. This disables Packit's functionality to automatically update\nthe changelog when syncing to dist-git."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"files_to_sync")," controls the way files are synced when updating dist-git. In\nthe context of the current source-git structure this means to syncing the\ncontent of ",(0,a.kt)("inlineCode",{parentName:"p"},".distro")," with the root of the dist-git repo. This is what the\n",(0,a.kt)("inlineCode",{parentName:"p"},"src")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dest")," fields configure."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"delete: true")," causes files not in ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," to be deleted from ",(0,a.kt)("inlineCode",{parentName:"p"},"dest"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"filters")," is a list of ",(0,a.kt)("inlineCode",{parentName:"p"},"rsync")," filters to be used to protect paths in ",(0,a.kt)("inlineCode",{parentName:"p"},"dest"),"\nand exclude paths in ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," from the sync operation."),(0,a.kt)("p",null,"You can think about the ",(0,a.kt)("inlineCode",{parentName:"p"},"files_to_sync")," section as describing the reverse of\nthe rsync-command used to copy content from dist-git to ",(0,a.kt)("inlineCode",{parentName:"p"},".distro"),"."),(0,a.kt)("p",null,"We plan to make most of this configuration implicit, so most of it might not\nbe required in the future."),(0,a.kt)("h2",{id:"update-the-spec-file-and-apply-the-downstream-patches"},"Update the spec-file and apply the downstream patches"),(0,a.kt)("p",null,"In dist-git downstream changes are stored as patch-files, which then are\nreferenced in the spec-file and applied during ",(0,a.kt)("inlineCode",{parentName:"p"},"%prep")," when building the\npackage. In source-git we want the same changes to become Git commits in the\nrepository. This also means, that it would be semantically weird to reference\nthe patch-files in the spec-file. As there are no patch-files in the\nsource-git repo."),(0,a.kt)("p",null,"So let's remove the following lines from ",(0,a.kt)("inlineCode",{parentName:"p"},".distro/acl.spec"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# avoid permission denied problem with LD_PRELOAD in the test-suite\nPatch1: 0001-acl-2.2.53-test-runwrapper.patch\n\n")),(0,a.kt)("p",null,"Pay attention not to modify any other part of the spec-file, except deleting\nthese lines. Saving ",(0,a.kt)("inlineCode",{parentName:"p"},".distro/acl.spec")," with an editor which is configured to\nstrip white-space from the end of lines will result in unnecessary diff-chunks\nwhen syncing content back to dist-git."),(0,a.kt)("p",null,"Note, that ",(0,a.kt)("em",{parentName:"p"},"acl")," is using ",(0,a.kt)("inlineCode",{parentName:"p"},"%autosetup")," to apply the patches in ",(0,a.kt)("inlineCode",{parentName:"p"},"%prep"),", this\nis why the ",(0,a.kt)("inlineCode",{parentName:"p"},"%prep")," section doesn't need an update. Because ",(0,a.kt)("inlineCode",{parentName:"p"},"packit source-git\nupdate-dist-git")," doesn't support adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"%patch")," macros when adding\npatches to the spec-file during syncing, currently only packages using\n",(0,a.kt)("inlineCode",{parentName:"p"},"%autosetup")," are supported. At the time of writing, adding support for\n",(0,a.kt)("inlineCode",{parentName:"p"},"%setup")," is still not decided."),(0,a.kt)("p",null,"At this point, the ",(0,a.kt)("inlineCode",{parentName:"p"},".distro")," directory is ready, and can be commited as the\nfirst commit on the ",(0,a.kt)("inlineCode",{parentName:"p"},"rawhide")," branch."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git add .distro/\n$ git commit -m'Initialize as a source-git repository'\n[rawhide c333206] Initialize as a source-git repository\n 9 files changed, 736 insertions(+)\n create mode 100644 .distro/.gitignore\n create mode 100644 .distro/acl-2.3.1.tar.gz.sig\n create mode 100644 .distro/acl.spec\n create mode 100644 .distro/source-git.yaml\n create mode 100644 .distro/tests/cmd-line-options/Makefile\n create mode 100644 .distro/tests/cmd-line-options/PURPOSE\n create mode 100755 .distro/tests/cmd-line-options/runtest.sh\n create mode 100755 .distro/tests/cmd-line-options/test-core.sh\n create mode 100644 .distro/tests/tests.yml\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rawhide")," branch in the source-git repo has its first downstream commit\nnow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git log --oneline v2.3.1..\nc333206 (HEAD -> rawhide) Initialize as a source-git repository\n")),(0,a.kt)("p",null,"Now, apply the only downstream patch from dist-git. We're using ",(0,a.kt)("inlineCode",{parentName:"p"},"git am")," in\nthis case, but depending on the type of the patch-files in dist-git, you might\nneed to use ",(0,a.kt)("inlineCode",{parentName:"p"},"git apply"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git am ../../rpms/acl/0001-acl-2.2.53-test-runwrapper.patch\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rawhide")," branch now also has the downstream change in the source-code as\na commit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git log --oneline v2.3.1..\n7054794 (HEAD -> rawhide) test/runwrapper: copy the preloaded library\nc333206 Initialize as a source-git repository\n")),(0,a.kt)("p",null,"The only thing left to do is to make sure that the patch-file generated from\nthis commit is going to keep its name (and not use the default name generated\nby ",(0,a.kt)("inlineCode",{parentName:"p"},"git format-patch"),"), and that the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.fedoraproject.org/en-US/packaging-guidelines/PatchUpstreamStatus/"},"patch status")," line is going to be\nincluded above the patch when it's added back to the spec-file while syncing\nto dist-git."),(0,a.kt)("p",null,"Packit understands ",(0,a.kt)("a",{parentName:"p",href:"control-patch-generation"},"Git-trailers")," which can be included in the commit message,\nand used to tweak how patch-files are generated and included in the spec-file.\nYou can include the patch status with the help of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Patch-status")," field,\nand specify the patch-file name with ",(0,a.kt)("inlineCode",{parentName:"p"},"Patch-name"),"."),(0,a.kt)("p",null,"One more Git-trailer that should be added in this step is\n",(0,a.kt)("inlineCode",{parentName:"p"},"From-dist-git-commit"),", which can be used later on to tell which dist-git\ncommit was used to create this source-git repository."),(0,a.kt)("p",null,"Amend the last commit..."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git commit --amend\n")),(0,a.kt)("p",null,"...and edit the commit message to include this field at the end of it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"test/runwrapper: copy the preloaded library\n\n... to a temporary directory because the original location might\nnot be accessible by other users.\n\nPatch-name: 0001-acl-2.2.53-test-runwrapper.patch\nPatch-status: |-\n    avoid permission denied problem with LD_PRELOAD in the test-suite\nFrom-dist-git-commit: 08c7e74d0a58c9483d2f4f55a3fba2baffb09c3a\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n#\n# Author:    Kamil Dudka <kdudka@redhat.com>\n# Date:      Tue Jul 3 10:46:58 2018 +0200\n#\n# On branch rawhide\n# Changes to be committed:\n#   modified:   test/runwrapper\n#\n")),(0,a.kt)("p",null,"Save and exit."),(0,a.kt)("h2",{id:"test-the-source-git-repository"},"Test the source-git repository"),(0,a.kt)("p",null,"Try creating an update in the dist-git repository from the source-git\nrepository you've just created. All the changes below are local."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cd ../../\n$ packit --config src/acl/.distro/source-git.yaml source-git update-dist-git --pkg-tool fedpkg src/acl rpms/acl\n2021-05-21 17:19:49.158 api.py            INFO   Won't be doing kinit, no credentials provided.\n2021-05-21 15:19:50.103 distgit.py        INFO   Archive 'acl-2.3.1.tar.gz' found in lookaside cache (skipping upload).\n")),(0,a.kt)("p",null,"Now check the dist-git repo to see if there are any changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git -C rpms/acl status\nOn branch rawhide\nYour branch is up to date with 'origin/rawhide'.\n\nnothing to commit, working tree clean\n")),(0,a.kt)("p",null,"A clean working tree in this case means, that the transformation of source-git\nto dist-git resulted in the same content. Which is good."),(0,a.kt)("p",null,"Try adding a new, dummy, change in source-git and update dist-git again, to\nsee a new patch being added:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ cd src/acl\n$ echo 'A dummy change' >> README\n$ git diff\ndiff --git a/README b/README\nindex abcfdc6..05c4af6 100644\n--- a/README\n+++ b/README\n@@ -11,3 +11,4 @@ information and references to other related manual\npages.\n\n For more information on the build process, please refer to\n  doc/PORTING.\n  +A dummy change\n$ git commit -aF-\n(reading log message from standard input)\nAdd a dummy change\n\ndescription: a patch to try things out\n[rawhide fb34af6] Add a dummy change\n 1 file changed, 1 insertion(+)\n\n$ cd ../../\n$ packit --config src/acl/.distro/source-git.yaml source-git update-dist-git --pkg-tool fedpkg src/acl rpms/acl\n2021-05-27 16:46:38.574 api.py            INFO   Won't be doing kinit, no credentials provided.\n2021-05-27 14:46:39.747 distgit.py        INFO   Archive 'acl-2.3.1.tar.gz' found in lookaside cache (skipping upload).\n")),(0,a.kt)("p",null,"Check the diff in dist-git and the new patch generated from source-git:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ git -C rpms/acl diff\ndiff --git a/acl.spec b/acl.spec\nindex 2bf7182..ac7bc75 100644\n--- a/acl.spec\n+++ b/acl.spec\n@@ -15,6 +15,9 @@ Source: https://download-mirror.savannah.gnu.org/releases/acl/acl-%{version}.tar\n # avoid permission denied problem with LD_PRELOAD in the test-suite\n Patch1: 0001-acl-2.2.53-test-runwrapper.patch\n\n+# a patch to try things out\n+Patch2: 0002-Add-a-dummy-change.patch\n+\n License: GPLv2+\n URL: https://savannah.nongnu.org/projects/acl\n\n$ cat rpms/acl/0002-Add-a-dummy-change.patch\nFrom fb34af687e2b650920775647a7c8d149c60403eb Mon Sep 17 00:00:00 2001\nFrom: =?UTF-8?q?Hunor=20Csomort=C3=A1ni?= <csomh@redhat.com>\nDate: Thu, 27 May 2021 16:42:19 +0200\nSubject: [PATCH 2/2] Add a dummy change\n\ndescription: a patch to try things out\n---\n README | 1 +\n 1 file changed, 1 insertion(+)\n\ndiff --git a/README b/README\nindex abcfdc6..05c4af6 100644\n--- a/README\n+++ b/README\n@@ -11,3 +11,4 @@ information and references to other related manual pages.\n\n For more information on the build process, please refer to\n doc/PORTING.\n+A dummy change\n--\n2.31.1\n")))}h.isMDXComponent=!0}}]);