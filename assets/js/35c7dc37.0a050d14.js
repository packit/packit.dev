"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[92966],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(a),u=i,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:i,o[1]=p;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},63993:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={title:"Source-git patch metadata",sidebar_position:3},o="Source-git patch metadata",p={unversionedId:"patch-metadata",id:"patch-metadata",title:"Source-git patch metadata",description:"Patch metadata have been superseded by",source:"@site/development/patch-metadata.md",sourceDirName:".",slug:"/patch-metadata",permalink:"/development/patch-metadata",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/development/patch-metadata.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Source-git patch metadata",sidebar_position:3},sidebar:"autogenerated",previous:{title:"Creating CentOS Stream 9 source-git repositories",permalink:"/development/creating-stream-9-repos"}},l={},s=[{value:"Metadata",id:"metadata",level:2},{value:"<code>patch_name</code>",id:"patch_name",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"<code>present_in_specfile</code>",id:"present_in_specfile",level:3},{value:"<code>ignore</code>",id:"ignore",level:3},{value:"<code>squash_commits</code> (deprecated)",id:"squash_commits-deprecated",level:3},{value:"<code>no_prefix</code>",id:"no_prefix",level:3},{value:"Dropped metadata",id:"dropped-metadata",level:2},{value:"<code>location_in_specfile</code>",id:"location_in_specfile",level:3}],c={toc:s},m="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"source-git-patch-metadata"},"Source-git patch metadata"),(0,i.kt)("p",null,"Patch metadata have been superseded by\n",(0,i.kt)("a",{parentName:"p",href:"/source-git/work-with-source-git/control-patch-generation"},"Git-native trailers"),".\nThis old patch metadata format is still supported if none of\nthe Git-trailers are found in any of the commits."),(0,i.kt)("p",null,"The metadata are a way for users and creators of source-git repos to be in\ncontrol of how packit generates patch files from downstream commits. Users are\nnot meant to set most of these - our tooling does that:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/packit/dist-git-to-source-git"},"dist2src")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"packit\nsource-git init"),"."),(0,i.kt)("p",null,"Ideally maintainers would just commit changes to source-git repos and have\n",(0,i.kt)("inlineCode",{parentName:"p"},"%autosetup")," to apply all the patches during ",(0,i.kt)("inlineCode",{parentName:"p"},"%prep"),"."),(0,i.kt)("p",null,"Example of patch metadata in one of commits in systemd source-git for CentOS\nStream 8:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ git log HEAD\n\ncommit 38e6b5b3059410530e0d5287de595cbf4574988b (HEAD -> c8s, upstream/c8s)\nAuthor: Lennart Poettering <lennart@poettering.net>\nDate:   Mon Feb 4 10:23:43 2019 +0100\n\n    pam-systemd: use secure_getenv() rather than getenv()\n\n    And explain why in a comment.\n\n    (cherry picked from commit 83d4ab55336ff8a0643c6aa627b31e351a24040a)\n\n    CVE-2019-3842\n\n    Resolves: #1687514\n\n    patch_name: 0563-pam-systemd-use-secure_getenv-rather-than-getenv.patch\n    present_in_specfile: true\n    location_in_specfile: 563\n\ndiff --git a/src/login/pam_systemd.c b/src/login/pam_systemd.c\n...\n")),(0,i.kt)("p",null,"You can see the patch metadata are stored in the commit message on the last 3\nlines."),(0,i.kt)("h2",{id:"metadata"},"Metadata"),(0,i.kt)("p",null,"The metadata are stored in commit messages and have a key-value format parsed as\nyaml. The list of keys follows."),(0,i.kt)("h3",{id:"patch_name"},(0,i.kt)("inlineCode",{parentName:"h3"},"patch_name")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type"),": str"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default"),": the default comes from ",(0,i.kt)("inlineCode",{parentName:"li"},"git-format-patch"),': "By default, each\noutput file is numbered sequentially from 1, and uses the first line of the\ncommit message"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Content"),": file name of the patch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Example"),': "my-fancy.patch"')),(0,i.kt)("p",null,"Patch file generated from the commit will have this name. This\nis useful when a patch is already defined in the spec file and we need to make\nthe patch file match that ",(0,i.kt)("inlineCode",{parentName:"p"},"Patch")," spec file entry."),(0,i.kt)("p",null,"It is also used to merge multiple adjacent commits to a single patch file, by\nsetting the same value for ",(0,i.kt)("inlineCode",{parentName:"p"},"patch_name")," in their metadata."),(0,i.kt)("h3",{id:"description"},(0,i.kt)("inlineCode",{parentName:"h3"},"description")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type"),": str"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default"),": empty string"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Example"),': "This patch is cherry-picked from upstream commit ea45faaa and\nresolves build failures on arm."')),(0,i.kt)("p",null,"Human-friendly description of the patch file to be put above the spec file entry."),(0,i.kt)("h3",{id:"present_in_specfile"},(0,i.kt)("inlineCode",{parentName:"h3"},"present_in_specfile")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type"),": bool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default"),": false (the default behaviour does not expect the patch is defined\nin the spec)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Example"),": false")),(0,i.kt)("p",null,"Is the patch present in spec? If yes, then don't create a new entry in the spec\nfile. If no, add it to the spec."),(0,i.kt)("h3",{id:"ignore"},(0,i.kt)("inlineCode",{parentName:"h3"},"ignore")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type"),": bool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default"),": false"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Example"),": true")),(0,i.kt)("p",null,"Skip this git commit when processing patches. This is handy for commits which\nchange files in source-git repos but are not in an archive or are not meant to\nbe utilized in ",(0,i.kt)("inlineCode",{parentName:"p"},"%prep"),"."),(0,i.kt)("h3",{id:"squash_commits-deprecated"},(0,i.kt)("inlineCode",{parentName:"h3"},"squash_commits")," (deprecated)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type"),": bool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default"),": false"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Example"),": false")),(0,i.kt)("p",null,"This key is ",(0,i.kt)("strong",{parentName:"p"},"deprecated")," as of ",(0,i.kt)("inlineCode",{parentName:"p"},"packit 0.35.0"),", and replaced by setting the\nsame ",(0,i.kt)("a",{parentName:"p",href:"#patch_name"},(0,i.kt)("inlineCode",{parentName:"a"},"patch_name"))," in the commit message of adjacent commits, which should end\nup in the same patch file."),(0,i.kt)("p",null,"This option is meant to be used to support ",(0,i.kt)("inlineCode",{parentName:"p"},"git-am")," patch applications.\n",(0,i.kt)("inlineCode",{parentName:"p"},"git-am")," enables you to have multiple git commits for a single patch file.\nWhen creating source-git repos with ",(0,i.kt)("inlineCode",{parentName:"p"},"packit source-git init"),", only the last\ncommit of a patch would be annotated with metadata."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"40c3a04 (HEAD -> main) patch 3, commit 3           \u2503  this is a single patch file\n61647c6 patch 3, commit 2                          \u2503  consisting of 3 commits\n89e9eff patch 3, commit 1\\n\\nsquash_commits: true  \u2523\u2501 because all leading commits are merged into the first patch\n8afd939 patch 2, commit 1\\n\\nsquash_commits: true  \u2523\u2501 a single commit patch\n3a2cff0 patch 1, commit 2\\n\\nsquash_commits: true  \u2523\u2501 commit 1 and commit 2 are part of the first patch\nb2b8e06 patch 1, commit 1                          \u2503\nd689043 downstream packaging\\n\\nignore: true\nb677988 (tag: 0.1.0) upstream release 0.1.0\n")),(0,i.kt)("h3",{id:"no_prefix"},(0,i.kt)("inlineCode",{parentName:"h3"},"no_prefix")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Type"),": bool"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default"),": false"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Example"),": true")),(0,i.kt)("p",null,"Do not prepend leading ",(0,i.kt)("inlineCode",{parentName:"p"},"a/")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"b/")," in the patch files. Use this when applying\npatches with ",(0,i.kt)("inlineCode",{parentName:"p"},"%patch -p1"),"."),(0,i.kt)("h2",{id:"dropped-metadata"},"Dropped metadata"),(0,i.kt)("h3",{id:"location_in_specfile"},(0,i.kt)("inlineCode",{parentName:"h3"},"location_in_specfile")),(0,i.kt)("p",null,"This attribute meant to represent ID of the patch within a spec file but it\nnever worked like that so we dropped it completely. The problem was that rpm\ndoes not provide such information when applying patches: it provides a number\nwhich is an unrelated internal iterator. We are planning to supersede\n",(0,i.kt)("inlineCode",{parentName:"p"},"location_in_specfile")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"patch_id"),":\n",(0,i.kt)("a",{parentName:"p",href:"https://issues.redhat.com/browse/PACKIT-1376"},"https://issues.redhat.com/browse/PACKIT-1376")))}d.isMDXComponent=!0}}]);