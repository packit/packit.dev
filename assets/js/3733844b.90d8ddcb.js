"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[61452],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={title:"Monitoring & Metrics",authors:["csomh","flachman","lbarczio"]},i=void 0,s={unversionedId:"monitoring/index",id:"monitoring/index",title:"Monitoring & Metrics",description:"Prometheus & Grafana",source:"@site/research/monitoring/index.md",sourceDirName:"monitoring",slug:"/monitoring/",permalink:"/research/monitoring/",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/monitoring/index.md",tags:[],version:"current",frontMatter:{title:"Monitoring & Metrics",authors:["csomh","flachman","lbarczio"]},sidebar:"autogenerated",previous:{title:"Sync2Jira",permalink:"/research/internal-automation/sync2jira"},next:{title:"Adoption metrics",permalink:"/research/monitoring/adoption-metrics/"}},l={},u=[{value:"Prometheus &amp; Grafana",id:"prometheus--grafana",level:2},{value:"How do we instrument our services and code?",id:"how-do-we-instrument-our-services-and-code",level:3},{value:"How could we try it out?",id:"how-could-we-try-it-out",level:3},{value:"Dashboard",id:"dashboard",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"prometheus--grafana"},"Prometheus & Grafana"),(0,a.kt)("p",null,"Requires implementing the ",(0,a.kt)("inlineCode",{parentName:"p"},"/metrics")," end-point."),(0,a.kt)("p",null,"Areas to be monitored"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"resources used in the namespaces and clusters",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"number of processes/threads",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"in API"),(0,a.kt)("li",{parentName:"ul"},"in workers"))),(0,a.kt)("li",{parentName:"ul"},"memory"),(0,a.kt)("li",{parentName:"ul"},"CPU"),(0,a.kt)("li",{parentName:"ul"},"storage"),(0,a.kt)("li",{parentName:"ul"},"PostgreSQL metrics"),(0,a.kt)("li",{parentName:"ul"},"Redis/Celery metrics (?)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"tasks waiting in the queue"))))),(0,a.kt)("li",{parentName:"ul"},"Actions taken by Packit Service and its components\nSome of the questions we could answer:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"How many times do we call the GitHub/Pagure/GitLab API?"),(0,a.kt)("li",{parentName:"ul"},"How many messages do we process from the Fedora and CentOS message\nqueues?"),(0,a.kt)("li",{parentName:"ul"},"Any other thing that is interesting information for us, but it's not\nstored in the database.")))),(0,a.kt)("h3",{id:"how-do-we-instrument-our-services-and-code"},"How do we instrument our services and code?"),(0,a.kt)("p",null,"In Packit Service API the ",(0,a.kt)("inlineCode",{parentName:"p"},"/metrics")," endpoint ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prometheus/client_python#flask"},"can be exported")," using Flask's\napplication dispatching mechanism."),(0,a.kt)("p",null,"Then code would need to be ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prometheus/client_python#instrumenting"},"instrumented"),"."),(0,a.kt)("p",null,"For monitoring Celery tasks, the most fitting solution seems to be ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prometheus/client_python#exporting-to-a-pushgateway"},"to export\nto a Pushgateway"),". For this to work, a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/prometheus/pushgateway"},"Prometherus Pushgateway")," needs to be\ndeployed in the Packit Service cluster where workers are running, to collect the\nmetrics from the workers and provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"/metrics")," endpoint for Prometheus."),(0,a.kt)("h3",{id:"how-could-we-try-it-out"},"How could we try it out?"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"As a POC we could pick one of the API end-points, instrument it, point the\ninternal Prometheus instance to scrape the data, and create a dashboard\nvisualizing that data."),(0,a.kt)("li",{parentName:"ol"},"We might want to consider a second POC to instrument a part of our Celery\ntasks, to try out the Pushgateway solution. This needs ","[Prometheus\nPushgateway]"," to be set up and configured for scraping."),(0,a.kt)("li",{parentName:"ol"},"Monitor some resources.")),(0,a.kt)("h2",{id:"dashboard"},"Dashboard"),(0,a.kt)("p",null,"The Dashboard would offer a view in the data Packit Service stores about jobs,\nbuilds, etc. In short it would be a view on the database."),(0,a.kt)("p",null,"One of the reasons we would like to keep this option, despite also wanting to\nuse Prometheus, is that the data in the DB will have high cardinality (Packit\nService will be enabled on many projects), and the time series database used\nby Prometheus is not built to support high-cardinality use-cases."),(0,a.kt)("p",null,"With the dashboard we will be able to drill down into statistics about\nindividual projects, PRs, builds. See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/packit-service/research/pull/43"},"#43"),"."))}m.isMDXComponent=!0}}]);