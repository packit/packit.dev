"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[41418],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},89900:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const i={title:"How to do Fedora releases with Packit",sidebar_position:5},r="How to do Fedora releases with Packit",s={unversionedId:"fedora-releases-guide/index",id:"fedora-releases-guide/index",title:"How to do Fedora releases with Packit",description:"Let's split the release process into single steps:",source:"@site/docs/fedora-releases-guide/index.md",sourceDirName:"fedora-releases-guide",slug:"/fedora-releases-guide/",permalink:"/docs/fedora-releases-guide/",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/fedora-releases-guide/index.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"How to do Fedora releases with Packit",sidebar_position:5},sidebar:"autogenerated",previous:{title:"Packit Upstream Onboarding Guide",permalink:"/docs/guide"},next:{title:"Dist-git repository onboarding",permalink:"/docs/fedora-releases-guide/dist-git-onboarding"}},l={},u=[{value:"Propose downstream or pull from upstream",id:"propose-downstream-or-pull-from-upstream",level:2},{value:"Resolving specfile and version",id:"resolving-specfile-and-version",level:4},{value:"New upstream release",id:"new-upstream-release",level:3},{value:"Upload archive to lookaside cache",id:"upload-archive-to-lookaside-cache",level:3},{value:"Update dist-git content",id:"update-dist-git-content",level:3},{value:"Customization",id:"customization",level:4},{value:"Actions - use your own commands/scripts",id:"actions---use-your-own-commandsscripts",level:5},{value:"Keep dist-git branches non-divergent",id:"keep-dist-git-branches-non-divergent",level:4}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-do-fedora-releases-with-packit"},"How to do Fedora releases with Packit"),(0,o.kt)("p",null,"Let's split the release process into single steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#new-upstream-release"},"New upstream release")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#upload-archive-to-lookaside-cache"},"Upload archive to lookaside cache")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#update-dist-git-content"},"Update dist-git content")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#koji-build-job"},"Koji builds")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#bodhi-update-job"},"Bodhi updates"))),(0,o.kt)("p",null,"Doing Fedora releases with Packit means utilising these jobs:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#propose-downstream-or-pull-from-upstream"},(0,o.kt)("inlineCode",{parentName:"a"},"propose_downstream")," or ",(0,o.kt)("inlineCode",{parentName:"a"},"pull_from_upstream"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#koji-build-job"},(0,o.kt)("inlineCode",{parentName:"a"},"koji_build"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#bodhi-update-job"},(0,o.kt)("inlineCode",{parentName:"a"},"bodhi_update")))),(0,o.kt)("p",null,"Every job takes care of a different part of the release process."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"In this page, you can find all the details of the release process automation covered by Packit."),(0,o.kt)("p",{parentName:"admonition"},"If you are a ",(0,o.kt)("strong",{parentName:"p"},"downstream package maintainer")," and would like to see the information on how to onboard to using\nPackit in dist-git, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/fedora-releases-guide/dist-git-onboarding"},"dist-git onboarding guide")," directly.")),(0,o.kt)("h2",{id:"propose-downstream-or-pull-from-upstream"},"Propose downstream or pull from upstream"),(0,o.kt)("p",null,"There are two jobs that can help you to get your new release to Fedora.\nThey differ in the way they are triggered and configured but share the implementation."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"/docs/configuration/upstream/propose_downstream"},"propose_downstream")," - push workflow is configured and started in the upstream repository,"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"/docs/configuration/downstream/pull_from_upstream"},"pull_from_upstream")," - pull workflow that is configured in dist-git.")),(0,o.kt)("p",null,"Here are the key differences between the two:"),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("th",null),(0,o.kt)("th",null,"propose-downstream"),(0,o.kt)("th",null,"pull-from-upstream")),(0,o.kt)("tr",null,(0,o.kt)("th",null,"Packit Service"),(0,o.kt)("td",null,(0,o.kt)("p",null,"Have a ",(0,o.kt)("code",null,".packit.yaml")," in ",(0,o.kt)("b",null,"upstream")," repo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n- job: propose-downstream:\n    ...\n")),(0,o.kt)("p",null,"Triggered by a new release in ",(0,o.kt)("b",null,"upstream project"),"."),(0,o.kt)("p",null,"It creates ",(0,o.kt)("i",null,"dist-git")," pull requests with the content of the release.")),(0,o.kt)("td",null,(0,o.kt)("p",null,"Have a ",(0,o.kt)("code",null,".packit.yaml")," in ",(0,o.kt)("b",null,"dist-git")," repo (main or rawhide branch):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n- job: pull-from-upstream:\n    ...\n")),(0,o.kt)("p",null,"Triggered by a new release in ",(0,o.kt)("b",null,"upstream project"),"."),(0,o.kt)("p",null,"It creates ",(0,o.kt)("i",null,"dist-git")," pull requests with the content of the release and the packit config taken from dist-git main/rawhide branch."))),(0,o.kt)("tr",null,(0,o.kt)("th",null,"Packit CLI"),(0,o.kt)("td",null,(0,o.kt)("p",null,"Have a ",(0,o.kt)("code",null,".packit.yaml")," in ",(0,o.kt)("b",null,"upstream")," repo, clone repo and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"packit propose-downstream\n")),(0,o.kt)("p",null,"It creates ",(0,o.kt)("i",null,"dist-git")," pull requests with the content of the release and the packit config taken from local clone.")),(0,o.kt)("td",null,(0,o.kt)("p",null,"Have a ",(0,o.kt)("code",null,".packit.yaml")," in ",(0,o.kt)("b",null,"dist-git")," repo, clone repo and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"packit pull-from-upstream\n")),(0,o.kt)("p",null,"It creates ",(0,o.kt)("i",null,"dist-git")," pull requests with the content of the release and the packit config taken from local clone.")))),(0,o.kt)("h4",{id:"resolving-specfile-and-version"},"Resolving specfile and version"),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("th",null),(0,o.kt)("th",null,"propose-downstream"),(0,o.kt)("th",null,"pull-from-upstream")),(0,o.kt)("tr",null,(0,o.kt)("th",null,"Packit Service"),(0,o.kt)("td",null,(0,o.kt)("p",null,"Version is retrieved from ",(0,o.kt)("b",null,"upstream project release event"),"."),(0,o.kt)("p",null,"Specfile is retrieved from ",(0,o.kt)("b",null,"upstream repo"),".")),(0,o.kt)("td",null,(0,o.kt)("p",null,"Version is retrieved from ",(0,o.kt)("b",null,"https://release-monitoring.org event"),"."),(0,o.kt)("p",null,"Specfile is retrieved from ",(0,o.kt)("b",null,"dist-git repo"),"."))),(0,o.kt)("tr",null,(0,o.kt)("th",null,"Packit CLI"),(0,o.kt)("td",null,(0,o.kt)("p",null,"Version is retrieved from the ",(0,o.kt)("b",null,"latest upstream project release tag")," if not ",(0,o.kt)("b",null,"specified"),"."),(0,o.kt)("p",null,"Specfile is retrieved from the ",(0,o.kt)("b",null,"upstream repo")," unless the ",(0,o.kt)("code",null,"--local-project")," option is used.")),(0,o.kt)("td",null,(0,o.kt)("p",null,"Version is retrieved from the ",(0,o.kt)("b",null,"latest upstream project release tag")," if not ",(0,o.kt)("b",null,"specified"),"."),(0,o.kt)("p",null,"Specfile is retrieved from the ",(0,o.kt)("b",null,"local dist-git repo clone"),".")))),(0,o.kt)("h3",{id:"new-upstream-release"},"New upstream release"),(0,o.kt)("p",null,"The process of releasing a new version starts in the upstream repository by creating a\nnew upstream release. If you want to restrict what releases with corresponding tags Packit should react on,\nyou can utilise the configuration options ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/#upstream_tag_include"},(0,o.kt)("inlineCode",{parentName:"a"},"upstream_tag_include"))," and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/#upstream_tag_exclude"},(0,o.kt)("inlineCode",{parentName:"a"},"upstream_tag_exclude")),". However, these are currently taken into consideration only when the\n",(0,o.kt)("inlineCode",{parentName:"p"},"upstream_project_url")," is configured with ",(0,o.kt)("inlineCode",{parentName:"p"},"pull_from_upstream")," job or for ",(0,o.kt)("inlineCode",{parentName:"p"},"propose_downstream")," job."),(0,o.kt)("h3",{id:"upload-archive-to-lookaside-cache"},"Upload archive to lookaside cache"),(0,o.kt)("p",null,"The upstream archive needs to be downloaded by Packit first and then uploaded to the lookaside cache.\nBy default, Packit downloads sources defined in the specfile that contain URLs.\nYou can override these URLs via ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration#sources"},(0,o.kt)("inlineCode",{parentName:"a"},"sources"))," configuration key."),(0,o.kt)("p",null,"For Python packages, you can use a\n",(0,o.kt)("a",{parentName:"p",href:"https://packaging.python.org/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows"},"GitHub action"),"\n(",(0,o.kt)("a",{parentName:"p",href:"https://github.com/packit/packit/blob/main/.github/workflows/pypi-publish.yml"},"example setup of Packit itself"),")\nthat automatically builds and uploads the archive to PyPI\non each new release. Then during propose downstream, Packit tries to download the archive from the provided URL.\nIf the download fails because the upstream archive is not available at the time of running the job,\nthe job is scheduled to be retried later."),(0,o.kt)("p",null,"If you don't want Packit to upload sources to lookaside cache before the pull request is opened,\nset ",(0,o.kt)("inlineCode",{parentName:"p"},"upload_sources")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),". By disabling the upload, you need to take care of this yourself\nand the builds triggered by dist-git CI will fail because of the missing archive in the lookaside cache."),(0,o.kt)("h3",{id:"update-dist-git-content"},"Update dist-git content"),(0,o.kt)("p",null,"After saving the archive in the lookaside cache,\nPackit updates the dist-git content (mainly ",(0,o.kt)("inlineCode",{parentName:"p"},"sources")," file and spec file) via pull requests for the specified branches.\nYou can configure which files in the upstream repo should be copied to dist-git during an update\nvia ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/#files_to_sync"},(0,o.kt)("inlineCode",{parentName:"a"},"files_to_sync"))," configuration key."),(0,o.kt)("p",null,"The version in the spec file is set to the version that Packit gets from the upstream tag\ncorresponding to the release that triggered the job. If the version and tag differ,\nyou can specify the ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/#upstream_tag_template"},(0,o.kt)("inlineCode",{parentName:"a"},"upstream_tag_template")),"\nconfiguration option so that Packit can extract the correct version."),(0,o.kt)("p",null,"The changelog entry generated by default is ",(0,o.kt)("inlineCode",{parentName:"p"},"- Update to version <version>")," followed by a reference to the bugzilla\nabout new release (if there is one).\nIf you use ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/#copy_upstream_release_description"},(0,o.kt)("inlineCode",{parentName:"a"},"copy_upstream_release_description: true")),",\nthe changelog entry will use the GitHub/GitLab release description field.\n(Just make sure the formatting is compatible with spec file.\nE.g. use ",(0,o.kt)("inlineCode",{parentName:"p"},"-")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," for lists to not create multiple changelog entries.)\nThere is also ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/#sync_changelog"},(0,o.kt)("inlineCode",{parentName:"a"},"sync_changelog"))," configuration option to enable syncing\nthe whole changelog.\nYou can also utilize a ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/actions#syncing-the-release"},"custom ",(0,o.kt)("inlineCode",{parentName:"a"},"changelog-entry")," action")," if you would like to override the default behaviour."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    actions:\n      changelog-entry:\n        - bash -c 'echo \"- New release ${PACKIT_PROJECT_VERSION}\"'\n")),(0,o.kt)("p",null,"Besides the configuration of changelog via Packit, you can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"%autochangelog")," macro to\ngenerate the changelog entries automatically, see\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.pagure.org/Fedora-Infra.rpmautospec/autochangelog.html"},"details"),". In that case, Packit will not touch\nthe changelog at all."),(0,o.kt)("p",null,"Be aware that Packit does not sign-off its commits so it can't open pull requests\nif the ",(0,o.kt)("inlineCode",{parentName:"p"}," Enforce signed-off commits in pull-request")," option is set in the dist-git project settings."),(0,o.kt)("p",null,"After Packit successfully creates the dist-git pull requests,\nit's on downstream CI systems and maintainer(s) to check the changes and merge\nthe pull requests."),(0,o.kt)("h4",{id:"customization"},"Customization"),(0,o.kt)("p",null,"For customization of the ",(0,o.kt)("inlineCode",{parentName:"p"},"propose_downstream"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"pull_from_upstream"),", you may need to define additional configuration options, most commonly:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If the version from release monitoring and Git tag differ,\nyou should specify the ",(0,o.kt)("a",{parentName:"li",href:"/docs/configuration/#upstream_tag_template"},(0,o.kt)("inlineCode",{parentName:"a"},"upstream_tag_template")),"."),(0,o.kt)("li",{parentName:"ul"},"You can configure which files (if any) in the upstream repo should be copied to dist-git during an update\nvia ",(0,o.kt)("a",{parentName:"li",href:"/docs/configuration/#files_to_sync"},(0,o.kt)("inlineCode",{parentName:"a"},"files_to_sync"))," configuration key."),(0,o.kt)("li",{parentName:"ul"},"By default, Packit downloads sources defined in the spec file that contain URLs.\nYou can override these URLs via ",(0,o.kt)("a",{parentName:"li",href:"/docs/configuration#sources"},(0,o.kt)("inlineCode",{parentName:"a"},"sources"))," configuration key.")),(0,o.kt)("h5",{id:"actions---use-your-own-commandsscripts"},"Actions - use your own commands/scripts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You may utilise some of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/actions/#syncing-the-release"},"actions"),"\nfor overriding the Packit default behaviour, for example:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for the ",(0,o.kt)("strong",{parentName:"p"},"changelog entry generation"),", if you do not want the default ",(0,o.kt)("inlineCode",{parentName:"p"},"Update to version <version>"),", you can use your own command(s)\n(here, the first one gets the git log between the corresponding tag and the tag before that one and the second\ncommand links the bugzilla(s)):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'changelog-entry:\n  - bash -c \'git log --no-merges --pretty="format:- %s (%an)" $(git describe --tags --abbrev=0 ${PACKIT_PROJECT_UPSTREAM_TAG}^)..${PACKIT_PROJECT_UPSTREAM_TAG} --\'\n  - bash -c \'[ -z "$PACKIT_RESOLVED_BUGS" ] || echo ${PACKIT_RESOLVED_BUGS} | tr " " "\\n" | sed "s/^/- Resolves /"\'\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for a ",(0,o.kt)("strong",{parentName:"p"},"custom commit message")," for commit created by Packit:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'commit-message:\n  - bash -c \'echo -e "Rebase to new upstream release ${PACKIT_PROJECT_VERSION}\\n"\'\n  - bash -c \'[ -z "$PACKIT_RESOLVED_BUGS" ] || echo ${PACKIT_RESOLVED_BUGS} | tr " " "\\n" | sed "s/^/- Resolves /"\'\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for ",(0,o.kt)("strong",{parentName:"p"},"source archive(s) generation"),", you can utilise e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"pre-sync")," action, see\n",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/examples#custom-archive-creation-for-release-syncing"},"this example")))))),(0,o.kt)("h4",{id:"keep-dist-git-branches-non-divergent"},"Keep dist-git branches non-divergent"),(0,o.kt)("p",null,"If you want to keep your dist-git branches from diverging,\nyou can use the new ",(0,o.kt)("inlineCode",{parentName:"p"},"dist_git_branches")," syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"  dist_git_branches:\n    rawhide:\n      fast_forward_merge_into: [fedora-branched]\n    epel-9: {}    \n      \n")),(0,o.kt)("p",null,"In this example, Packit runs the downstream synchronization process for the\n",(0,o.kt)("inlineCode",{parentName:"p"},"rawhide")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"epel-9")," branches as usual. But Packit also opens a new pull request reusing the commit from ",(0,o.kt)("inlineCode",{parentName:"p"},"rawhide")," for every\n",(0,o.kt)("inlineCode",{parentName:"p"},"fedora-branched")," branch so it can be fast-forwarded when merging."),(0,o.kt)("admonition",{title:"How to reconcile divergent branches",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"If you are already using Packit then your branches can have diverged.\nYou need to reconcile them before using the new dist_git_branches\nsyntax.\nFor the configuration example above and for the state of the branched\nFedora releases as today, you need to do:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"git checkout rawhide\ngit merge f39\ngit merge f40\ngit merge f41\n")),(0,o.kt)("p",{parentName:"admonition"},"You shouldn't have any conflict.\nBut, if you have a conflict in the ",(0,o.kt)("inlineCode",{parentName:"p"},".gitignore")," file it is safe to\nkeep changes both from rawhide and the incoming branch.\nIf you have a conflict in the changelog section of the specfile,\nthen you must pay attention to ",(0,o.kt)("strong",{parentName:"p"},"merge all the missing changelogs"),"\nin rawhide and to list them ",(0,o.kt)("strong",{parentName:"p"},"in the right order"),"\n(newest changelogs come first).\nOnce rawhide is ready you can do"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre"},"git checkout f39; git merge --ff-only rawhide\ngit checkout f40; git merge --ff-only rawhide\ngit checkout f41; git merge --ff-only rawhide\n"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"## Koji build job\nAfter having the dist-git content updated, you can easily automate also building in Koji.\nYou can simply configure Packit to react to the new commits in your dist-git repository and create\nKoji builds by having\na Packit configuration (when using `propose_downstream` job, you can configure Packit to sync the file) in your \ndefault branch (usually `rawhide`) of the dist-git repository that includes a `koji_build` job.\nThen, if Packit is informed (via fedora-messaging bus) about a new commit in the configured dist-git branch, it submits a new build in Koji\nlike maintainers usually do. (The commits without any spec file change are skipped.)\n\nBy default, only merged pull requests created by Packit are being acted upon, but \nyou can override this behaviour by specifying\n`allowed_pr_authors` and/or `allowed_committers` in the [job configuration](/docs/configuration/downstream/koji_build).\n\nFor a configuration example and retriggering, see [dist-git onboarding](./dist-git-onboarding.md#koji-build-job).\n\n## Bodhi update job\nLastly, you can again similarly to Koji builds, configure Packit to react to successful Koji builds and create\nBodhi updates by having a Packit configuration in your \ndefault branch (usually `rawhide`) of the dist-git repository that includes a `bodhi_update` job.\nOnce Packit is informed (via fedora-messaging bus) about the successful Koji build for the configured branch,\nit creates a new update for that branch in Bodhi for you.\n\nBy default, only successful Koji builds created by Packit are being acted upon, but \nyou can override this behaviour by specifying\n`allowed_builders` in the [job configuration](/docs/configuration/downstream/bodhi_update).\n\nFor a configuration example and retriggering, see [dist-git onboarding](./dist-git-onboarding.md#bodhi-update-job).\n\n\n## Permission overview\n\nThe downstream automation is a pipeline of jobs:\npropose_downstream/pull_from_upstream -> Packit PR merge -> koji_build -> bodhi_update\nor:\ndist-git push/non-Packit PR merge -> koji_build -> bodhi_update\n\nThis chain can break (resulting in no followup job) if the permissions are not configured correctly in the Packit configuration.\n\n### packit PR merge/dist-git push -> Koji build\n\nA Koji build can be triggered by a merged pull request, a direct push or a PR comment.\n\n* If you only merge Packit created pull requests, you don't need to specify other settings.\n* If you open your own pull request and you want Packit to automatically trigger a Koji build when you merge it you need to be in the [`allowed_pr_authors`](https://packit.dev/docs/configuration/downstream/koji_build#optional-parameters) list, even in case the PR contains commits created by Packit.\nOn the other hand, if you want to break the chain because, for example, you want to build the package by yourself in a side-tag then you can create a new pull request containing Packit commits and you have to make sure you are not in the [`allowed_pr_authors`](https://packit.dev/docs/configuration/downstream/koji_build#optional-parameters) list.\n* If you push Packit commits directly to dist-git (not merging Packit pull request) but you still want Packit to react and trigger a Koji build then you need to add yourself to the [`allowed_committers`](https://packit.dev/docs/configuration/downstream/koji_build#optional-parameters) list; Packit is commit *author* but you are the *committer*.\n* If you want to trigger a Koji build by a PR comment you need be in the `packager` dist-git group.\n\n:::caution\nWe are solving a bug https://github.com/packit/packit-service/issues/2359\nThis bug can cause an inconsistent behaviour (you may end up with triggered or not triggered Koji builds, even if your configuration is ok)\nwhen you try to reuse Packit commits in new pull requests or direct pushes.\n:::\n\n### Koji build -> Bodhi update\n\nA Bodhi update is triggered by a finished Koji build or a PR comment.\n\n* If the Koji builds are always submitted by Packit you don't need to specify other settings.\n* If you submit the Koji builds on your own, Packit can still automatically create the Bodhi updates but you need to be specified in the [`allowed_builders`](https://packit.dev/docs/configuration/downstream/bodhi_update#optional-parameters) list.\n* If you want to trigger a Bodhi update by a PR comment you need to have *write permissions* on the project and be in the `packager` dist-git group.\n")))}d.isMDXComponent=!0}}]);