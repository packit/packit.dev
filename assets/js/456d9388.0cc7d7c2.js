"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[13319],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=r,m=d["".concat(s,".").concat(u)]||d[u]||f[u]||o;return t?i.createElement(m,a(a({ref:n},c),{},{components:t})):i.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},24580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=t(87462),r=(t(67294),t(3905));const o={sidebar_label:"conditions",title:"specfile.conditions"},a=void 0,l={unversionedId:"api/specfile/conditions",id:"api/specfile/conditions",title:"specfile.conditions",description:"resolve\\_expression",source:"@site/specfile/api/specfile/conditions.md",sourceDirName:"api/specfile",slug:"/api/specfile/conditions",permalink:"/specfile/api/specfile/conditions",draft:!1,editUrl:"https://github.com/packit/specfile/tree/main/docs/specfile/api/specfile/conditions.md",tags:[],version:"current",frontMatter:{sidebar_label:"conditions",title:"specfile.conditions"},sidebar:"autogenerated",previous:{title:"changelog",permalink:"/specfile/api/specfile/changelog"},next:{title:"context_management",permalink:"/specfile/api/specfile/context_management"}},s={},p=[{value:"resolve_expression",id:"resolve_expression",level:4},{value:"process_conditions",id:"process_conditions",level:4}],c={toc:p},d="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"resolve_expression"},"resolve","_","expression"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def resolve_expression(keyword: str,\n                       expression: str,\n                       context: Optional["Specfile"] = None) -> bool\n')),(0,r.kt)("p",null,"Resolves a RPM expression."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"keyword")," - Condition keyword, e.g. ",(0,r.kt)("em",{parentName:"li"},"%if")," or ",(0,r.kt)("em",{parentName:"li"},"%ifarch"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expression")," - Expression string or a whitespace-delimited list\nof arches/OSes in case keyword is a variant of ",(0,r.kt)("em",{parentName:"li"},"%ifarch"),"/",(0,r.kt)("em",{parentName:"li"},"%ifos"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"context")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"Specfile")," instance that defines the context for macro expansions.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  Resolved expression as a boolean value."),(0,r.kt)("h4",{id:"process_conditions"},"process","_","conditions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def process_conditions(\n        lines: List[str],\n        macro_definitions: Optional["MacroDefinitions"] = None,\n        context: Optional["Specfile"] = None) -> List[Tuple[str, bool]]\n')),(0,r.kt)("p",null,"Processes conditions in a spec file. Takes a list of lines and returns the same\nlist of lines extended with information about their validity. A line is considered\nvalid if it doesn","'","t appear in a false branch of any condition."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"lines")," - List of lines in a spec file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"macro_definitions")," - Parsed macro definitions to be used to prevent parsing conditions\ninside their bodies (and most likely failing)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"context")," - ",(0,r.kt)("inlineCode",{parentName:"li"},"Specfile")," instance that defines the context for macro expansions.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  List of tuples in the form of (line, validity)."))}f.isMDXComponent=!0}}]);