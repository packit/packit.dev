"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[76726],{9315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(58168),i=(n(96540),n(15680));const r={title:"SAST using OpenScanHub is here!",date:new Date("2024-08-05T06:46:18.000Z"),authors:"lbarczio",tags:["copr","srpm","sast","openscanhub","shift left"]},o=void 0,s={permalink:"/posts/openscanhub-prototype",editUrl:"https://github.com/packit/packit.dev/tree/main/posts/openscanhub-prototype/index.md",source:"@site/posts/openscanhub-prototype/index.md",title:"SAST using OpenScanHub is here!",description:"We are excited to announce a new experimental feature in our service: the integration of Static",date:"2024-08-05T06:46:18.000Z",formattedDate:"August 5, 2024",tags:[{label:"copr",permalink:"/posts/tags/copr"},{label:"srpm",permalink:"/posts/tags/srpm"},{label:"sast",permalink:"/posts/tags/sast"},{label:"openscanhub",permalink:"/posts/tags/openscanhub"},{label:"shift left",permalink:"/posts/tags/shift-left"}],readingTime:2.54,hasTruncateMarker:!0,authors:[{name:"Laura Barcziov\xe1",email:"lbarczio@redhat.com",url:"https://github.com/lbarcziova",imageURL:"https://github.com/lbarcziova.png",key:"lbarczio"}],frontMatter:{title:"SAST using OpenScanHub is here!",date:"2024-08-05T06:46:18.000Z",authors:"lbarczio",tags:["copr","srpm","sast","openscanhub","shift left"]},prevItem:{title:"Packit Flock 2024 Diary",permalink:"/posts/flock_2024_diary"},nextItem:{title:"Do you like your changelogs? What DevConf.CZ attendees think",permalink:"/posts/changelogs"}},p={authorsImageUrls:[void 0]},c=[{value:"Why",id:"why",level:2},{value:"Functionality",id:"functionality",level:2},{value:"Setup",id:"setup",level:2},{value:"Conclusion",id:"conclusion",level:2}],l={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,i.yg)(u,(0,a.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"We are excited to announce a new experimental feature in our service: the integration of Static\nApplication Security Testing (SAST) using ",(0,i.yg)("a",{parentName:"p",href:"https://openscanhub.fedoraproject.org/"},"OpenScanHub"),"."),(0,i.yg)("p",null,"OpenScanHub is a service that runs various static analyzers on RPM packages - by default ",(0,i.yg)("inlineCode",{parentName:"p"},"Cppcheck"),",\n",(0,i.yg)("inlineCode",{parentName:"p"},"ShellCheck")," and the static analyzers embedded in ",(0,i.yg)("inlineCode",{parentName:"p"},"GCC"),"."),(0,i.yg)("p",null,"Let's have a look at the details of the prototype!"),(0,i.yg)("h2",{id:"why"},"Why"),(0,i.yg)("p",null,"This initiative contributes to the ",(0,i.yg)("em",{parentName:"p"},"shift left")," effort, aiming to detect and address security\nvulnerabilities earlier in the development process, thus enhancing overall software quality\nand security. By implementing this scanning functionality for ",(0,i.yg)("inlineCode",{parentName:"p"},"fedora-rawhide"),", the current\ndevelopment version of Fedora, we aim to catch security issues at the earliest possible stage.\nThis is also important as Fedora serves as an upstream platform for downstream distributions\nlike RHEL, ensuring that any vulnerabilities are addressed before they propagate to these other systems."),(0,i.yg)("h2",{id:"functionality"},"Functionality"),(0,i.yg)("p",null,"The functionality is designed to automatically\nscan for vulnerabilities and issues in code submitted through pull requests.\nIt is controlled using the configuration option\n",(0,i.yg)("a",{parentName:"p",href:"/docs/configuration#osh_diff_scan_after_copr_build"},(0,i.yg)("inlineCode",{parentName:"a"},"osh_diff_scan_after_copr_build")),",\nwhich is currently set to ",(0,i.yg)("inlineCode",{parentName:"p"},"true")," by default.\nHowever, even with this option enabled, the differential scanning feature in OpenScanHub\nwill only run for users who have also configured Copr builds with the ",(0,i.yg)("inlineCode",{parentName:"p"},"trigger: commit"),"\nsetting and have matching target branches in their pull request and job configurations.\nThis setup is crucial as it allows Packit to access the base build necessary for differential\nscanning, leading to more precise detection of issues introduced by the pull request."),(0,i.yg)("h2",{id:"setup"},"Setup"),(0,i.yg)("p",null,"To utilise this feature, you must ensure that Copr builds for commits are configured,\nalong with Copr builds for pull requests, both set to run for ",(0,i.yg)("inlineCode",{parentName:"p"},"fedora-rawhide-x86_64"),".\nIf you haven't enabled Copr builds for commits yet, you can add the following job\nconfiguration to the ",(0,i.yg)("inlineCode",{parentName:"p"},"jobs")," section in your Packit configuration:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"- job: copr_build\n  trigger: commit\n  branch: main\n  targets:\n    - fedora-rawhide\n  preserve_project: true\n")),(0,i.yg)("p",null,"This configuration assumes that you merge your pull requests into the ",(0,i.yg)("inlineCode",{parentName:"p"},"main")," branch\nand ensures preserving the Copr project (as opposed to creating a temporary one,\nsee more details ",(0,i.yg)("a",{parentName:"p",href:"https://packit.dev/docs/configuration/upstream/copr_build#optional-parameters"},"here"),").\nYou can also build in your custom Copr project (more details\n",(0,i.yg)("a",{parentName:"p",href:"https://packit.dev/docs/configuration/upstream/copr_build#using-a-custom-copr-project"},"here"),")."),(0,i.yg)("p",null,"Here is an example of a scan showing some new findings:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Example findings",src:n(90833).A,width:"1051",height:"438"})),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"Besides this newly introduced integration with Packit Service, you can also submit scans locally using Packit CLI,\nsee more details in ",(0,i.yg)("a",{parentName:"p",href:"/docs/cli/scan-in-osh"},"docs"),".")),(0,i.yg)("h2",{id:"conclusion"},"Conclusion"),(0,i.yg)("p",null,"As this is an initial prototype, the configuration and functionality may evolve based on user feedback\n(e.g. reporting the actual results of a scan).\nWe invite you to try out this feature and ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/packit/packit/discussions/2371"},"share your thoughts")," with us\n(e.g. if you would benefit from other ",(0,i.yg)("inlineCode",{parentName:"p"},"osh-cli")," options to be included).\nFor more information on setting up this feature, see the ",(0,i.yg)("a",{parentName:"p",href:"#setup"},"info above"),"."),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"A small update. Default configurations for the static analyzers like ",(0,i.yg)("inlineCode",{parentName:"p"},"cppcheck")," can now be tweaked through ",(0,i.yg)("a",{parentName:"p",href:"/docs/cli/scan-in-osh"},(0,i.yg)("inlineCode",{parentName:"a"},"--csmock-args")," CLI option")," or ",(0,i.yg)("a",{parentName:"p",href:"/docs/configuration#csmock_args"},"a ",(0,i.yg)("inlineCode",{parentName:"a"},"csmock_args")," option")," in the Packit's config file. For instance, you can specify arguments like ",(0,i.yg)("inlineCode",{parentName:"p"},"--cppcheck-add-flag=--enable=style")," to check styling issues as seen in ",(0,i.yg)("a",{parentName:"p",href:"https://openscanhub.fedoraproject.org/task/10066/"},"this example run")," triggered from ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/avahi/avahi/pull/641"},"this")," testing pull-request on Avahi.")))}h.isMDXComponent=!0},15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>d});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=i,d=u["".concat(p,".").concat(g)]||u[g]||h[g]||r;return n?a.createElement(d,o(o({ref:t},l),{},{components:n})):a.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},90833:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/openscanhub-findings-f2924a122fc19a512ff6f652bf318ec5.png"}}]);