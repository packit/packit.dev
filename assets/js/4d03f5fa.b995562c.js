"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[24732],{12112:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(58168),n=(a(96540),a(15680));const i={title:"Metrics",authors:"lbarczio"},s=void 0,o={unversionedId:"monitoring/metrics",id:"monitoring/metrics",title:"Metrics",description:"Requests coming to / of the API",source:"@site/research/monitoring/metrics.md",sourceDirName:"monitoring",slug:"/monitoring/metrics",permalink:"/research/monitoring/metrics",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/monitoring/metrics.md",tags:[],version:"current",frontMatter:{title:"Metrics",authors:"lbarczio"},sidebar:"autogenerated",previous:{title:"Logs aggregations",permalink:"/research/monitoring/logs-aggregation/"},next:{title:"Monorepos",permalink:"/research/monorepo-support/"}},l={},p=[{value:"Requests coming to / of the API",id:"requests-coming-to--of-the-api",level:2},{value:"Celery metrics",id:"celery-metrics",level:2},{value:"Httpd metrics",id:"httpd-metrics",level:2},{value:"Openshift metrics",id:"openshift-metrics",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...a}=e;return(0,n.yg)(m,(0,r.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"requests-coming-to--of-the-api"},"Requests coming to / of the API"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/rycus86/prometheus_flask_exporter"},"Prometheus Flask exporter"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"metrics are configured via decorators, e.g. ",(0,n.yg)("inlineCode",{parentName:"li"},"@metrics.counter(..)"),":")),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-python"},"@app.route('/<item_type>')\n@metrics.do_not_track()\n@metrics.counter('invocation_by_type', 'Number of invocations by type',\n         labels={'item_type': lambda: request.view_args['type']})\ndef by_type(item_type):\n    pass  # only the counter is collected, not the default metrics\n")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"the metrics are by default exposed on the same Flask application on the /metrics endpoint,\nthis can be adjusted"),(0,n.yg)("li",{parentName:"ul"},"counters count invocations, other types (histogram, gauge, summary) collect metrics based on the\nduration of those invocations"),(0,n.yg)("li",{parentName:"ul"},"labels can be defined (also using attributes of the request or the response)")))),(0,n.yg)("h2",{id:"celery-metrics"},"Celery metrics"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"Celery needs to be configured to send events to the broker which the exporter will collect (via config/CLI)")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/danihodovic/celery-exporter"},"danihodovic exporter")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/danihodovic/celery-exporter#metrics"},"metrics"),":",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"celery_task_sent_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_received_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_started_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_succeeded_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_failed_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_rejected_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_revoked_total"),(0,n.yg)("li",{parentName:"ul"},"celery_task_retried_total"),(0,n.yg)("li",{parentName:"ul"},"celery_worker_up"),(0,n.yg)("li",{parentName:"ul"},"celery_worker_tasks_active"),(0,n.yg)("li",{parentName:"ul"},"celery_task_runtime_bucket"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/danihodovic/celery-exporter#running-the-exporter"},"running the exporter")," - available via container image"),(0,n.yg)("li",{parentName:"ul"},"active project"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/OvalMoney/celery-exporter"},"OvalMoney exporter")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"metrics:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"celery_workers - number of workers"),(0,n.yg)("li",{parentName:"ul"},"celery_tasks_total - number of tasks per state (labels name, state, queue and namespace):")))),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"},' celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="RECEIVED"} 3.0\n celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="PENDING"} 0.0\n celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="STARTED"} 1.0\n celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="RETRY"} 2.0\n celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="FAILURE"} 1.0\n celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="REVOKED"} 0.0\n celery_tasks_total{name="my_app.tasks.fetch_some_data",namespace="celery",queue="celery",state="SUCCESS"} 7.0\n')),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"celery_tasks_runtime_seconds"),(0,n.yg)("li",{parentName:"ul"},"celery_tasks_latency_seconds - time until tasks are picked up by a worker - this can be helpful for us and is\nnot included in the first exporter metrics"),(0,n.yg)("li",{parentName:"ul"},"otherwise similar to the previous one, available via container image"),(0,n.yg)("li",{parentName:"ul"},"not that active project")))),(0,n.yg)("h2",{id:"httpd-metrics"},"Httpd metrics"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("a",{parentName:"li",href:"https://github.com/Lusitaniae/apache_exporter"},"Apache exporter for Prometheus"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"metrics:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"current total apache accesses (","*","),"),(0,n.yg)("li",{parentName:"ul"},"Apache scoreboard statuses"),(0,n.yg)("li",{parentName:"ul"},"Current total kbytes sent (","*",")"),(0,n.yg)("li",{parentName:"ul"},"CPU Load (","*",")"),(0,n.yg)("li",{parentName:"ul"},"Could the apache server be reached"),(0,n.yg)("li",{parentName:"ul"},"Current uptime in seconds (","*",")"),(0,n.yg)("li",{parentName:"ul"},"Apache worker statuses"),(0,n.yg)("li",{parentName:"ul"},"Apache server version"),(0,n.yg)("li",{parentName:"ul"},"Total duration of all registered requests"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"*")," are only available if ExtendedStatus is On in webserver config"))),(0,n.yg)("li",{parentName:"ul"},"how to ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/Lusitaniae/apache_exporter#using-docker"},"using Docker"))))),(0,n.yg)("h2",{id:"openshift-metrics"},"Openshift metrics"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"builtin Monitoring view in clusters we use currently - this should use some of the tools below")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"previous research:"),(0,n.yg)("ol",{parentName:"li"},(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/kubernetes/kube-state-metrics"},(0,n.yg)("inlineCode",{parentName:"a"},"kube-state-metrics"))),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"converts Kubernetes objects to metrics consumable by Prometheus"),(0,n.yg)("li",{parentName:"ul"},"not focused on the health of the individual Kubernetes components, but rather on the health of the various objects inside, such as deployments, nodes and pods"),(0,n.yg)("li",{parentName:"ul"},"metrics are exported on the HTTP endpoint ",(0,n.yg)("inlineCode",{parentName:"li"},"/metrics")," on the listening port, designed to be consumed either by\nPrometheus itself or by a scraper that is compatible with scraping a Prometheus client endpoint"),(0,n.yg)("li",{parentName:"ul"},"deleted objects are no longer visible on the ",(0,n.yg)("inlineCode",{parentName:"li"},"/metrics")," endpoint"),(0,n.yg)("li",{parentName:"ul"},"examples of exposed metrics (more ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/kubernetes/kube-state-metrics/tree/master/docs"},"here"),"):",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"kube_pod_container_resource_requests"),(0,n.yg)("li",{parentName:"ul"},"kube_pod_container_status_restarts_total"),(0,n.yg)("li",{parentName:"ul"},"kube_pod_status_phase"))),(0,n.yg)("li",{parentName:"ul"},"in limited-privileges environment where you don't have cluster-reader role:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"create a serviceaccount"),(0,n.yg)("li",{parentName:"ul"},"give it view privileges on specific namespaces (using roleBinding)"),(0,n.yg)("li",{parentName:"ul"},"specify a set of namespaces (using the --namespaces option) and\na set of kubernetes objects (using the --resources) that your serviceaccount\nhas access to in the kube-state-metrics deployment configuration"))),(0,n.yg)("li",{parentName:"ul"},"example deployment configuration files in their Github repo ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/kubernetes/kube-state-metrics/blob/master/examples"},"here")),(0,n.yg)("li",{parentName:"ul"},"can be configured in the args section of the deployment configuration using\n",(0,n.yg)("a",{parentName:"li",href:"https://github.com/kubernetes/kube-state-metrics/blob/master/docs/cli-arguments.md#command-line-arguments"},"CLI args")))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/prometheus/node_exporter"},"Node exporter")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Prometheus exporter for hardware and OS metrics exposed by ","*","NIX kernels"),(0,n.yg)("li",{parentName:"ul"},"runs on a host, provides details on I/O, memory, disk and CPU pressure"),(0,n.yg)("li",{parentName:"ul"},"can be configured as a side-car container, ",(0,n.yg)("a",{parentName:"li",href:"https://access.redhat.com/solutions/4406661"},"described")),(0,n.yg)("li",{parentName:"ul"},"various ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/prometheus/node_exporter#collectors"},"collectors")," which can be configured",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"cpu - exposes CPU statistics"),(0,n.yg)("li",{parentName:"ul"},"diskstats - disk I/O statistics"),(0,n.yg)("li",{parentName:"ul"},"filesystem - filesystem statistics (disk space used)"),(0,n.yg)("li",{parentName:"ul"},"loadavg - load average"),(0,n.yg)("li",{parentName:"ul"},"meminfo - memory statistics"),(0,n.yg)("li",{parentName:"ul"},"netdev - network interface statistics (bytes transferred)"))),(0,n.yg)("li",{parentName:"ul"},"from the example metrics:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},'rate(node_cpu_seconds_total{mode="system"}',"[1m]",") - the average amount of CPU time spent in system mode, per second, over the last minute (in seconds)"),(0,n.yg)("li",{parentName:"ul"},"node_filesystem_avail_bytes - the filesystem space available to non-root users (in bytes)"),(0,n.yg)("li",{parentName:"ul"},"rate(node_network_receive_bytes_total","[1m]",") - the average network traffic received, per second, over the last minute (in bytes)"))))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/google/cadvisor"},"cAdvisor")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"usage and performance characteristics of running containers"),(0,n.yg)("li",{parentName:"ul"},"CPU usage, memory usage, and network receive/transmit of running containers"),(0,n.yg)("li",{parentName:"ul"},"embedded into the kubelet, kubelet scraped to get container metrics, store the data in Prometheus"),(0,n.yg)("li",{parentName:"ul"},"by default, metrics are served under the ",(0,n.yg)("inlineCode",{parentName:"li"},"/metrics")," HTTP endpoint"),(0,n.yg)("li",{parentName:"ul"},"jobs in Prometheus to scrape the relevant cAdvisor processes at that metrics endpoint"),(0,n.yg)("li",{parentName:"ul"},"example metrics (more ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md#prometheus-container-metrics"},"here"),"):",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"container_cpu_usage_seconds_total - cumulative cpu time consumed"),(0,n.yg)("li",{parentName:"ul"},"container_memory_usage_bytes - current memory usage, including all memory regardless of when it was accessed"),(0,n.yg)("li",{parentName:"ul"},"container_network_receive_bytes_total - cumulative count of bytes received"),(0,n.yg)("li",{parentName:"ul"},"container_processes - number of processes running inside the container"))))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config"},(0,n.yg)("inlineCode",{parentName:"a"},"kubernetes_sd_config"))),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"in the Prometheus configuration allow Prometheus to retrieve scrape targets from Kubernetes REST API and stay synchronized with the cluster state."),(0,n.yg)("li",{parentName:"ul"},"role types that can be configured to discover targets:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"node")," - discovers one target per cluster node with the address defaulting to the Kubelet's HTTP port"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"pod")," - discovers all pods and exposes their containers as targets"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"service")," - discovers a target for each service port for each service"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"endpoints")," - discovers targets from listed endpoints of a service"))),(0,n.yg)("li",{parentName:"ul"},"need to grant the prometheus service account access to the project defined to discover in ",(0,n.yg)("inlineCode",{parentName:"li"},"namespaces")),(0,n.yg)("li",{parentName:"ul"},"example:")),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"},"    scrape_configs:\n    - job_name: 'pods'\n\n      kubernetes_sd_configs:\n      - role: pod\n        namespaces:\n          names:\n          - prometheus\n          - application\n\n      relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"to discover targets from another cluster - pass the ",(0,n.yg)("inlineCode",{parentName:"li"},"api_server")," URL, TLS certificate or bearer token files for Prometheus to authenticate:")),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"}," # The API server addresses. If left empty, Prometheus is assumed to run inside\n # of the cluster and will discover API servers automatically and use the pod's\n # CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.\n [ api_server: <host> ]\n"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/prometheus-operator/prometheus-operator"},"Prometheus Operator")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"creates, configures, and manages Prometheus monitoring instances"),(0,n.yg)("li",{parentName:"ul"},"to simplify and automate the configuration of a Prometheus based monitoring stack for Kubernetes clusters"),(0,n.yg)("li",{parentName:"ul"},"generates monitoring target configurations based on familiar Kubernetes label queries"),(0,n.yg)("li",{parentName:"ul"},"can be installed into a specific OpenShift project - needed ",(0,n.yg)("inlineCode",{parentName:"li"},"cluster-admin")," role"),(0,n.yg)("li",{parentName:"ul"},"community supported"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://github.com/kubernetes-sigs/metrics-server"},"Metrics Server")," - resource metrics from Kubelets,\nnot meant to be used to forward metrics to monitoring solutions, or as a source of monitoring solution metrics"))))))}u.isMDXComponent=!0},15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>y});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),g=n,y=m["".concat(l,".").concat(g)]||m[g]||u[g]||i;return a?r.createElement(y,s(s({ref:t},c),{},{components:a})):r.createElement(y,s({ref:t},c))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"}}]);