"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[23962],{15680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>d});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),y=s(r),m=n,d=y["".concat(p,".").concat(m)]||y[m]||g[m]||i;return r?a.createElement(d,l(l({ref:t},u),{},{components:r})):a.createElement(d,l({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[y]="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},53225:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=r(58168),n=(r(96540),r(15680));const i={title:"Prioritizing of the Celery tasks",authors:"lbarczio"},l=void 0,o={unversionedId:"celery/tasks-prioritizing",id:"celery/tasks-prioritizing",title:"Prioritizing of the Celery tasks",description:"Current state",source:"@site/research/celery/tasks-prioritizing.md",sourceDirName:"celery",slug:"/celery/tasks-prioritizing",permalink:"/research/celery/tasks-prioritizing",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/celery/tasks-prioritizing.md",tags:[],version:"current",frontMatter:{title:"Prioritizing of the Celery tasks",authors:"lbarczio"},sidebar:"autogenerated",previous:{title:"How to split one Celery task into multiple tasks",permalink:"/research/celery/task-workflow-refactor"},next:{title:"Database",permalink:"/research/category/database"}},p={},s=[{value:"Current state",id:"current-state",level:2},{value:"What do we want to achieve",id:"what-do-we-want-to-achieve",level:2},{value:"How to do it",id:"how-to-do-it",level:2},{value:"Task priority",id:"task-priority",level:3},{value:"Redis message priorities",id:"redis-message-priorities",level:4},{value:"Routing tasks",id:"routing-tasks",level:3},{value:"Plan",id:"plan",level:2}],u={toc:s},y="wrapper";function g(e){let{components:t,...r}=e;return(0,n.yg)(y,(0,a.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"current-state"},"Current state"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"2 workers in prod, 1 worker in staging, no priority")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"in each worker we do:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"},'celery --app="${APP}" worker --loglevel=${LOGLEVEL} --concurrency=1 --prefetch-multiplier=1\n')))),(0,n.yg)("h2",{id:"what-do-we-want-to-achieve"},"What do we want to achieve"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"process the tasks depending on their priority and duration")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"high-prio:"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"actionable events to users such as results with logs, final events"),(0,n.yg)("li",{parentName:"ul"},"informations with high value - i.e. first status report"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"low-prio:"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"intermediate results")))),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:null},"high-prio"),(0,n.yg)("th",{parentName:"tr",align:null},"low-prio"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"process_message"),(0,n.yg)("td",{parentName:"tr",align:null},"run_copr_build_start_handler")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"run_copr_build_handler"),(0,n.yg)("td",{parentName:"tr",align:null},"run_copr_build_end_handler")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"run_testing_farm_handler"),(0,n.yg)("td",{parentName:"tr",align:null},"run_koji_build_report_handler")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"run_propose_downstream_handler"),(0,n.yg)("td",{parentName:"tr",align:null},"run_testing_farm_results_handler")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"run_koji_build_handler"),(0,n.yg)("td",{parentName:"tr",align:null},"run_installation_handler")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null},"run_pagure_pr_label_handler"),(0,n.yg)("td",{parentName:"tr",align:null},"babysit_copr_build")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:null}),(0,n.yg)("td",{parentName:"tr",align:null},"run_distgit_commit_handler")))),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"long-running",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"tasks that build the SRPM: run_koji_build_handler, run_copr_build_handler"))),(0,n.yg)("li",{parentName:"ul"},"short-running:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"other tasks")))),(0,n.yg)("h2",{id:"how-to-do-it"},"How to do it"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"from ",(0,n.yg)("a",{parentName:"p",href:"https://docs.celeryproject.org/en/master/faq.html#does-celery-support-task-priorities"},"FAQ"),":"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Redis transport emulates priority support"),(0,n.yg)("li",{parentName:"ul"},"prioritize work by routing high priority tasks to different workers, this usually works better than per message priorities"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"also from ",(0,n.yg)("a",{parentName:"p",href:"https://docs.celeryproject.org/en/stable/userguide/optimizing.html#prefetch-limits"},"docs")),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"if you have a combination of long- and short-running tasks, the best option is to use two worker nodes that are\nconfigured separately, and route the tasks according to the run-time")))),(0,n.yg)("h3",{id:"task-priority"},"Task priority"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},"docs are not so clear:"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://docs.celeryproject.org/en/latest/reference/celery.app.task.html?highlight=celery.app.task#celery.app.task.Task.priority"},"priority"),"\nattribute of the ",(0,n.yg)("inlineCode",{parentName:"p"},"Task")," - default task priority")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://docs.celeryproject.org/en/stable/reference/celery.app.task.html?highlight=priority#celery.app.task.Task.apply_async"},"priority"),"\nargument in ",(0,n.yg)("inlineCode",{parentName:"p"},"apply_async")," method: The task priority, a number between 0 and 9 (defaults to the ",(0,n.yg)("inlineCode",{parentName:"p"},"priority")," attribute of Task)")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("a",{parentName:"p",href:"https://docs.celeryproject.org/en/latest/userguide/calling.html#advanced-options"},"priority")," defined in Advanced\noptions of task calling - number between 0 and 255, where 255 is the highest priority, Redis (priority reversed, 0 is highest)"))))),(0,n.yg)("h4",{id:"redis-message-priorities"},(0,n.yg)("a",{parentName:"h4",href:"https://docs.celeryproject.org/en/latest/userguide/routing.html#redis-message-priorities"},"Redis message priorities")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"there are 10 (0-9) priority levels"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"},"app.conf.broker_transport_options = {\n  'queue_order_strategy': 'priority',\n  }\n"))),(0,n.yg)("li",{parentName:"ul"},"creating ",(0,n.yg)("inlineCode",{parentName:"li"},"n")," lists for each queue - by default 10 priority levels are consolidated to 4 levels",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"e.g. queue named ",(0,n.yg)("inlineCode",{parentName:"li"},"celery")," will be split into 4 queues:\n",(0,n.yg)("inlineCode",{parentName:"li"}," ['celery0', 'celery3', 'celery6', 'celery9']")),(0,n.yg)("li",{parentName:"ul"},"for more levels - ",(0,n.yg)("inlineCode",{parentName:"li"},"priority_steps")," transport option")))),(0,n.yg)("h3",{id:"routing-tasks"},(0,n.yg)("a",{parentName:"h3",href:"https://docs.celeryproject.org/en/latest/userguide/routing.html"},"Routing tasks")),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"next to having the default queue/s have one either for low-prio or high-prio tasks"),(0,n.yg)("li",{parentName:"ul"},"a worker instance can consume from any number of queues"),(0,n.yg)("li",{parentName:"ul"},"specify what queues to consume from in worker with ",(0,n.yg)("inlineCode",{parentName:"li"},"-Q"),":",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"celery -A proj worker -l INFO -Q foo,bar,baz")))),(0,n.yg)("li",{parentName:"ul"},"the destination for a task is decided by the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"routing arguments:\n",(0,n.yg)("inlineCode",{parentName:"li"},'task.apply_async(queue="queue_name")')),(0,n.yg)("li",{parentName:"ul"},"attributes defined on the Task itself:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},'@task(queue="queue_name")')," in task decorator"),(0,n.yg)("li",{parentName:"ul"},"class based task:")),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"},'  class MyTask(Task):\n        queue = "queue_name"\n'))),(0,n.yg)("li",{parentName:"ul"},"in confuguration (also default queue priority in the route can be set):")),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre"},"task_routes = {\n'myapp.tasks.compress_video': {\n    'queue': 'video',\n    'routing_key': 'video.compress',\n    'priority': 10,\n    },\n}\n"))),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"task_create_missing_queues")," (by default should be True) - a named queue that\u2019s not already defined in ",(0,n.yg)("inlineCode",{parentName:"li"},"task_queues"),"\nwill be created automatically")),(0,n.yg)("h2",{id:"plan"},"Plan"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"start with creating a new queue"),(0,n.yg)("li",{parentName:"ul"},"route the long-running tasks into different queue than short-running"),(0,n.yg)("li",{parentName:"ul"},"discuss how should workers consume these queues (e.g. 1 worker consumes queue for short-running and 1 worker for both queues)"),(0,n.yg)("li",{parentName:"ul"},"later, we can play also with the priority attribute")))}g.isMDXComponent=!0}}]);