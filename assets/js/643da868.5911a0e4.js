"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[58541],{15680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>h});var n=r(96540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(r),l=i,h=d["".concat(c,".").concat(l)]||d[l]||g[l]||o;return r?n.createElement(h,s(s({ref:t},u),{},{components:r})):n.createElement(h,s({ref:t},u))}));function h(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=l;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[d]="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},95477:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var n=r(58168),i=(r(96540),r(15680));const o={title:"update-source-git",sidebar_position:4},s="packit source-git update-source-git",a={unversionedId:"cli/source-git/update-source-git",id:"cli/source-git/update-source-git",title:"update-source-git",description:"Sync changes made in a dist-git repository back to the corresponding",source:"@site/docs/cli/source-git/update-source-git.md",sourceDirName:"cli/source-git",slug:"/cli/source-git/update-source-git",permalink:"/docs/cli/source-git/update-source-git",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/cli/source-git/update-source-git.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"update-source-git",sidebar_position:4},sidebar:"autogenerated",previous:{title:"update-dist-git",permalink:"/docs/cli/source-git/update-dist-git"},next:{title:"Pre-releases",permalink:"/docs/pre-releases"}},c={},p=[{value:"Help",id:"help",level:2}],u={toc:p},d="wrapper";function g(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"packit-source-git-update-source-git"},(0,i.yg)("inlineCode",{parentName:"h1"},"packit source-git update-source-git")),(0,i.yg)("p",null,"Sync changes made in a dist-git repository back to the corresponding\nsource-git repository."),(0,i.yg)("p",null,"This is to enable engineers and bots to capture and sync back changes done\nin dist-git (by provenpackagers during rebuilds, for example). This is why\nchanges to the source and patches are not supported! If a package has a\nsource-git repository set up, the expectation is that the bulk of the\npackaging work is going to happen there."),(0,i.yg)("h2",{id:"help"},"Help"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Usage: packit source-git update-source-git [OPTIONS] DIST_GIT SOURCE_GIT\n                                           [REVISION_RANGE]\n\n  Update a source-git repository based on a dist-git repository.\n\n  Update a source-git repository with the selected checkout of a spec file and\n  additional packaging files from a dist-git repository.\n\n  Revision range represents part of dist-git history which is supposed to be\n  synchronized. Use `HEAD~..` if you want to synchronize the last commit from\n  dist-git. For more information on possible revision range formats, see\n  gitrevisions(7). If the revision range is not specified, dist-git commits\n  with no counterpart in source-git will be synchronized.\n\n  If patches or the sources file in the spec file changed, the command exits\n  with return code 2. Such changes are not supported by this command, code\n  changes should happen in the source-git repo.\n\n  Inapplicable changes to the .gitignore file are ignored since the file may\n  not be synchronized between dist-git and source-git.\n\n  This command, by default, performs only local operations and uses the\n  content of the source-git and dist-git repositories as it is, no checkout or\n  fetch is performed.\n\n  After the synchronization is done, packit will inform about the changes it\n  has performed and about differences between source-git and dist-git prior to\n  the synchronization process.\n\n  Dist-git commit messages are preserved and used when creating new source-git\n  commits, but a 'From-dist-git-commit' trailer is appended to them to mark\n  the hash of the dist-git commit from which they are created.\n\n  Examples\n\n  Take the extra (not synchronized) commit(s) of systemd dist-git repo and\n  copy the spec file and other packaging files into the source-git repo:\n\n      $ packit source-git update-source-git rpms/systemd src/systemd\n\n  Synchronize changes from the last three dist-git commits:\n\n      $ packit source-git update-source-git rpms/systemd src/systemd HEAD~3..\n\nOptions:\n  -f, --force  Don't check the synchronization status of the source-git and\n               dist-git repos prior to performing the update.\n  -h, --help   Show this message and exit.\n")))}g.isMDXComponent=!0}}]);