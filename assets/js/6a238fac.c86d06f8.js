"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[16012],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},72850:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));const i={title:"Building SRPMs in Copr",date:new Date("2022-03-07T11:57:40.000Z"),authors:"lbarczio",tags:["srpm","copr"]},a=void 0,s={permalink:"/posts/copr-srpms",editUrl:"https://github.com/packit/packit.dev/tree/main/posts/copr-srpms/index.md",source:"@site/posts/copr-srpms/index.md",title:"Building SRPMs in Copr",description:"Let's find out how Packit builds your SRPMs in the Copr.",date:"2022-03-07T11:57:40.000Z",formattedDate:"March 7, 2022",tags:[{label:"srpm",permalink:"/posts/tags/srpm"},{label:"copr",permalink:"/posts/tags/copr"}],readingTime:4.795,hasTruncateMarker:!0,authors:[{name:"Laura Barcziov\xe1",email:"lbarczio@redhat.com",url:"https://github.com/lbarcziova",imageURL:"https://github.com/lbarcziova.png",key:"lbarczio"}],frontMatter:{title:"Building SRPMs in Copr",date:"2022-03-07T11:57:40.000Z",authors:"lbarczio",tags:["srpm","copr"]},prevItem:{title:"Downstream automation is here",permalink:"/posts/downstream-automation"},nextItem:{title:"2021 for Packit",permalink:"/posts/2021-features"}},l={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:3},{value:"Problems of the previous workflow for SRPM builds",id:"problems-of-the-previous-workflow-for-srpm-builds",level:4},{value:"Implementation of the Copr SRPMs",id:"implementation-of-the-copr-srpms",level:3},{value:"Deployment phases",id:"deployment-phases",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Let's find out how Packit builds your SRPMs in the Copr."),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"If you use Packit to build RPMs for your upstream code changes, likely,\nyou have already read about how does Packit build your ",(0,r.kt)("a",{parentName:"p",href:"http://ftp.rpm.org/max-rpm/s1-rpm-miscellania-srpms.html"},"SRPMs"),".\nIf not, then just a short recap:\nEach time an RPM build is triggered, Packit builds an SRPM and then submits\nthe created SRPM file to Copr where Copr takes care of building the actual RPMs.\nSince you can modify the behaviour of building SRPMs by defining ",(0,r.kt)("a",{parentName:"p",href:"/docs/configuration/actions/"},"actions"),",\nthis process needs to be run in an isolated environment. For this, we implemented our\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/packit/sandcastle"},"sandboxing mechanism"),",\nwhich simply runs the provided commands in an Openshift pod freshly created for each build."),(0,r.kt)("h4",{id:"problems-of-the-previous-workflow-for-srpm-builds"},"Problems of the previous workflow for SRPM builds"),(0,r.kt)("p",null,"This is a pretty good-functioning workflow, but it has some downsides which have become more and more annoying\nwith the growing user base. Because of the resources, we have set limits for Openshift pods running at one time.\nThis directly affects how many SRPM builds can run in parallel. As a result, when there are too many requests for (S)RPM builds,\nsome can get stuck in the queue while waiting for other builds to finish. Another inconvenience coming with pods being\nalways freshly created is copying the needed data into\nand from the pod. This has also cost us some months of desperate debugging of weird errors.\nAnother disadvantage is that users cannot easily configure dependencies for their actions run during building SRPMs.\nWe have to install the dependencies manually on-demand, but of course, which is not flexible."),(0,r.kt)("p",null,"We were thinking about improving the process for a long time but never reached any clear conclusion.\nThen in one of our architecture meetings, when we tried to solve another\nissue related to our sandboxing solution, Pavel Raiskup from Copr team asked us why didn't\nwe build the SRPMs directly in Copr. We knew that there is a way of building SRPMs in Copr,\nbut weren't aware of the details and how would this fit our use case."),(0,r.kt)("h3",{id:"implementation-of-the-copr-srpms"},"Implementation of the Copr SRPMs"),(0,r.kt)("p",null,"After some research of the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.pagure.org/copr.copr/custom_source_method.html"},"Copr custom source method"),", we\ndecided to give it a try. To make Copr build the SRPMs, Copr needs to be provided\nwith a script that will prepare the sources used to build an SRPM.\nTherefore, we created the ",(0,r.kt)("inlineCode",{parentName:"p"},"packit prepare-sources"),' command, which mostly reuses existing code that is run also in the sandbox\nworkflow. It prepares the specfile, archive and other sources and then moves\nthem to a separate directory. So with the new implementation,\nwith each request to run (S)RPM build, Packit sends a dynamically created "script" to Copr that invokes our new command.\nHere is what the script can look like:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'#!/bin/sh\ngit config --global user.email "hello@packit.dev"\ngit config --global user.name "Packit"\nresultdir=$PWD\npackit -d prepare-sources --result-dir "$resultdir" --pr-id 676 --job-config-index 2 https://github.com/packit/ogr\n')),(0,r.kt)("p",null,"You can see that a pull request should be checked out or which job defined\nin your Packit job config is the trigger of this action. And that's it! Copr finds the sources and builds SRPM from them.\nPackit listens to the messages about the start and end of the build and similarily as for RPM builds, reports the\nstate via commit statuses/checks and provides the URL with the logs."),(0,r.kt)("h3",{id:"deployment-phases"},"Deployment phases"),(0,r.kt)("p",null,"Since this change is pretty significant, we wanted to start using this workflow gradually and catch all the problems\nbefore we get rid of the previous workflow for SRPMs.\nAt first, we tested how does the new solution work in our projects. The only disadvantage\nwas that the actual build process\ntakes a little longer than in sandcastle as we get an isolated environment where all the packages are installed for each new build.\nOn the other hand, Copr usually starts the build very soon after it is submitted, so no long wait time until some other build is finished.\nIn the initial implementation, we installed a list of dependencies\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/packit/sandcastle/blob/ece539650770fea057877f0c97074acf506fada4/files/install-rpm-packages.yaml#L5"},"which are present")," in our\nsandbox which also increased the build time a bit."),(0,r.kt)("p",null,"So as the following step we added the functionality to define dependencies for actions in the\nPackit config file with ",(0,r.kt)("a",{parentName:"p",href:"/docs/configuration/#srpm_build_deps"},(0,r.kt)("inlineCode",{parentName:"a"},"srpm_build_deps")," key"),"."),(0,r.kt)("p",null,"Example of how the configuration of ",(0,r.kt)("inlineCode",{parentName:"p"},"srpm_build_deps")," can look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'actions:\n  create-archive:\n    - "python3 setup.py sdist --dist-dir ."\n    - "sh -c \'echo packitos-$(python3 setup.py --version).tar.gz\'"\n  get-current-version:\n    - "python3 setup.py --version"\n\nsrpm_build_deps:\n  - python3-pip\n  - python3-setuptools_scm\n')),(0,r.kt)("p",null,"We also decided that presence of this key in the config will be for some period an indicator to build the SRPMs in Copr. With this approach, anyone can configure\ntheir dependencies and play with adding and adjusting them as needed without directly breaking\nthe builds in their repository. When the builds in the PR pass, the configuration change can be merged and the new approach\nwill be used for the whole repository. We wanted\nto kick off this process and therefore started opening PRs with dependencies configuration for projects that use\nthe RPM builds functionality the most. During this phase, you can reach out to us with your feedback, so we can\nimprove it even more!"),(0,r.kt)("p",null,"As a next step, we use the new approach for GitHub app installations made since September 6, 2022."),(0,r.kt)("p",null,"And as of January 10th 2023, we switched to building all SRPMs in Copr\nand thus got rid of using our sandbox for building SRPMs entirely."),(0,r.kt)("p",null,"Since we don't want to break your CI results because of missing dependencies, we will use the previously linked list of deps.\nAs the list is pretty long, we encourage you to define your dependencies on your own. If you\nbump into any troubles with setting up SRPM builds in Copr, please,\n",(0,r.kt)("a",{parentName:"p",href:"/#contact"},"reach out to us"),", we will be glad to help!"))}d.isMDXComponent=!0}}]);