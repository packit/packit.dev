"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[6034],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},24103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={title:"Actions",date:new Date("2019-06-28T00:00:00.000Z"),sidebar_position:3},l="Actions",o={unversionedId:"configuration/actions",id:"configuration/actions",title:"Actions",description:"You can probably find yourself in a situation where some part of the packit workflow needs to be",source:"@site/docs/configuration/actions.md",sourceDirName:"configuration",slug:"/configuration/actions",permalink:"/docs/configuration/actions",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/configuration/actions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Actions",date:"2019-06-28T00:00:00.000Z",sidebar_position:3},sidebar:"autogenerated",previous:{title:"Downstream configuration template",permalink:"/docs/configuration/downstream_configuration_template"},next:{title:"Examples",permalink:"/docs/configuration/examples"}},p={},s=[{value:"Command matrix",id:"command-matrix",level:2},{value:"Syncing the release",id:"syncing-the-release",level:3},{value:"Creating SRPM",id:"creating-srpm",level:3},{value:"Actions details",id:"actions-details",level:2},{value:"<code>create-archive</code>",id:"create-archive",level:3},{value:"<code>fix-spec-file</code>",id:"fix-spec-file",level:3},{value:"<code>commit-message</code>",id:"commit-message",level:3},{value:"Debugging",id:"debugging",level:4},{value:"Examples",id:"examples",level:4},{value:"Environment variables set by packit",id:"environment-variables-set-by-packit",level:2},{value:"<code>fix-spec-file</code>",id:"fix-spec-file-1",level:3},{value:"<code>create-archive</code>",id:"create-archive-1",level:3},{value:"<code>changelog-entry</code>",id:"changelog-entry",level:3},{value:"<code>commit-message</code>",id:"commit-message-1",level:3},{value:"Release-synchronization actions",id:"release-synchronization-actions",level:3}],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"actions"},"Actions"),(0,r.kt)("p",null,"You can probably find yourself in a situation where some part of the packit workflow needs to be\ntweaked for your package."),(0,r.kt)("p",null,"Packit supports actions, which can be used to change the default implementation\nof some steps in the workflow. Packit is able to execute multiple\ncommands for a single action. Each action accepts a list of commands. By\ndefault, the commands are executed using python's\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/subprocess.html"},"subprocess")," module without\nshell. If you need a shell (e.g. you want to utilize an environment variable,\nsubprocesses, pipelines, expansion or any shell syntax in your command), just\nwrap your command in a bash process:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'bash -c "my fancy $command | grep success"\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It's important to quote the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"-c")," option so shell interprets it\ncorrectly as a single option input.")),(0,r.kt)("p",null,"All actions are also executed inside Packit Service. The service\ncreates a new sandbox environment where the command is run."),(0,r.kt)("p",null,"Actions have a default behaviour which you can override, hooks don't have any -\nhooks are a way for you to perform operations following a certain packit event,\ne.g. cloning an upstream repo."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Like other keys, the ",(0,r.kt)("inlineCode",{parentName:"p"},"actions")," can be defined on the top, package or job level.\nBe aware that when overriding, the whole ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," mapping is replaced\ninstead of merging."),(0,r.kt)("p",{parentName:"admonition"},"If you want to reduce duplications, you can use the following YAML syntax to do this:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre"},"actions: &common_actions\n  action_1:\n    - echo hello\n\npackages:\n  package_1:\n    actions:\n      <<: *common_actions\n      action_2:\n        - echo world\n"))),(0,r.kt)("p",null,"Currently, these are the actions you can use:"),(0,r.kt)("h2",{id:"command-matrix"},"Command matrix"),(0,r.kt)("h3",{id:"syncing-the-release"},"Syncing the release"),(0,r.kt)("p",null,"These apply to ",(0,r.kt)("inlineCode",{parentName:"p"},"propose-downstream")," command/job and ",(0,r.kt)("inlineCode",{parentName:"p"},"pull-from-upstream")," job."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"working directory"),(0,r.kt)("th",{parentName:"tr",align:null},"when run"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[hook]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"post-upstream-clone")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after cloning the upstream repo (main) and dist-git repo (target branch) and before gpg keys verification and version compatibility check"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[hook]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pre-sync")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after cloning the upstream repo (main) and dist-git repo (target branch) and after gpg keys verification and version compatibility check"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"prepare-files")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after cloning, checking out of both upstream and dist-git repos"),(0,r.kt)("td",{parentName:"tr",align:null},"replace patching and archive generation")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"create-patches")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after sync of upstream files to the downstream"),(0,r.kt)("td",{parentName:"tr",align:null},"replace patching")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"get-current-version")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"when the current version needs to be found"),(0,r.kt)("td",{parentName:"tr",align:null},"expect version as a stdout parameter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"changelog-entry")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"when adding a new changelog entry to the specfile"),(0,r.kt)("td",{parentName:"tr",align:null},"stdout is used as a changelog entry")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"commit-message")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after running pre-sync hook and checking out the tags/branches"),(0,r.kt)("td",{parentName:"tr",align:null},"used to override default commit message")))),(0,r.kt)("h3",{id:"creating-srpm"},"Creating SRPM"),(0,r.kt)("p",null,"These apply to the ",(0,r.kt)("inlineCode",{parentName:"p"},"srpm")," command and building in COPR."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"working directory"),(0,r.kt)("th",{parentName:"tr",align:null},"when run"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[hook]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"post-upstream-clone")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after cloning of the upstream repo (main) and before other operations"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"get-current-version")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"when the current version needs to be found"),(0,r.kt)("td",{parentName:"tr",align:null},"expect version as a stdout")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"create-archive")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"when the archive needs to be created"),(0,r.kt)("td",{parentName:"tr",align:null},"replace the code for creating an archive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"create-patches")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after sync of upstream files to the downstream"),(0,r.kt)("td",{parentName:"tr",align:null},"replace patching")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fix-spec-file")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"after creation of a tarball and before running rpmbuild command"),(0,r.kt)("td",{parentName:"tr",align:null},"this action changes spec file to use the new tarball")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"changelog-entry")),(0,r.kt)("td",{parentName:"tr",align:null},"upstream git repo"),(0,r.kt)("td",{parentName:"tr",align:null},"when adding a new changelog entry to the specfile"),(0,r.kt)("td",{parentName:"tr",align:null},"stdout is used as a changelog entry")))),(0,r.kt)("h2",{id:"actions-details"},"Actions details"),(0,r.kt)("p",null,"All actions are executed in a locked-down OpenShift pod. Your commands are\ninvoked with arbitrary UIDs from a high range. Some tools may experience\nproblems with these UIDs, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"tar"),". You can observe an error like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tar: value 1021440000 out of uid_t range 0..2097151\ntar: Exiting with failure status due to previous errors\n")),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"tar"),", it's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/packit/packit.dev/issues/192#issuecomment-729594207"},"recommended"),"\nto use the ",(0,r.kt)("inlineCode",{parentName:"p"},"pax")," format (",(0,r.kt)("inlineCode",{parentName:"p"},"tar -H pax"),")."),(0,r.kt)("p",null,"If you run into similar issues with other tools, please consult documentation or maintainers of the project."),(0,r.kt)("h3",{id:"create-archive"},(0,r.kt)("inlineCode",{parentName:"h3"},"create-archive")),(0,r.kt)("p",null,"It is expected to return a relative path within the repository to the generated\narchive. If there are more steps, then one of them has to return the archive\nname. The best practice is to do it from the last step and print it: ",(0,r.kt)("inlineCode",{parentName:"p"},"bash -c\n'echo path/to/archive-$VERSION.tar.gz'"),"."),(0,r.kt)("p",null,"If you can, please place the generated archive in the same directory as your\nspec file."),(0,r.kt)("p",null,"If your project uses multiple archives, you should handle manipulation of your\nspec file yourself in the ",(0,r.kt)("inlineCode",{parentName:"p"},"fix-spec-file")," action. You also have to put all the\narchives (spec file sources) in the same directory as your spec file.  Packit\nexpects that project only have a single archive set as ",(0,r.kt)("inlineCode",{parentName:"p"},"Source0")," \u2014 it does not\nhave a mechanism to manipulate more sources right now."),(0,r.kt)("h3",{id:"fix-spec-file"},(0,r.kt)("inlineCode",{parentName:"h3"},"fix-spec-file")),(0,r.kt)("p",null,"By default, this action updates the spec file so it's possible to have a proper\nreference of the archive in the ",(0,r.kt)("inlineCode",{parentName:"p"},"%prep")," section and unpack it during the build\nproperly. The action tries to perform 3 operations on a spec file:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"It replaces Source configured by\n",(0,r.kt)("a",{parentName:"p",href:"/docs/configuration/#spec_source_id"},(0,r.kt)("inlineCode",{parentName:"a"},"spec_source_id"))," (default ",(0,r.kt)("inlineCode",{parentName:"p"},"Source0"),")\nwith a local path to the generated archive.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"It changes the first ",(0,r.kt)("inlineCode",{parentName:"p"},"%setup")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"%autosetup"),") macro in ",(0,r.kt)("inlineCode",{parentName:"p"},"%prep")," and adds\n",(0,r.kt)("inlineCode",{parentName:"p"},"-n")," so the generated tarball can be unpacked (it tries to extract the\ndirectory name directly from the archive or uses the configured\n",(0,r.kt)("a",{parentName:"p",href:"/docs/configuration#archive_root_dir_template"},(0,r.kt)("inlineCode",{parentName:"a"},"archive_root_dir_template")),").")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"It updates Version and Release in the spec file."))),(0,r.kt)("p",null,"If you provide your own implementation, none of the above happens."),(0,r.kt)("p",null,"For example a package may define multiple Sources. In such a case, the default\nimplementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"fix-spec-file")," won't be able to update ",(0,r.kt)("inlineCode",{parentName:"p"},"%prep")," correctly.\nYou can instead use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sed")," program to set the new Sources correctly, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'actions:\n  fix-spec-file:\n  # define one of the Source variables correctly\n  - sed -i my_specfile_path -e "s/https.*only-vendor.tar.xz/my_correct_tarball_path/"\n  # fill in Release as if packit would have done it\n  - bash -c "sed -i -r \\"s/Release:(\\s*)\\S+/Release:\\1${PACKIT_RPMSPEC_RELEASE}%{?dist}/\\" my_specfile_path"\n')),(0,r.kt)("h3",{id:"commit-message"},(0,r.kt)("inlineCode",{parentName:"h3"},"commit-message")),(0,r.kt)("p",null,"Our internal API differentiates between the commit title and description, so we\nhave an additional requirement on separating the commit title by an empty line.\nYou can, of course, provide ",(0,r.kt)("em",{parentName:"p"},"just")," the commit title."),(0,r.kt)("h4",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,"For your own debugging purposes we allow arbitrary output before outputting the\nactual commit message. In such case, your commit message ",(0,r.kt)("strong",{parentName:"p"},"needs")," to be\nseparated by the following separator (on a separate line):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"---%<--- snip ---%<--- here ---%<---\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This separator is exposed as an environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"PACKIT_DEBUG_DIVIDER"),".")),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example of correct output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"debug output\n---%<--- snip ---%<--- here ---%<---\nRebase to new upstream release 0.42.69\n\n- Resolves rhbz#124\n")),(0,r.kt)("p",null,"This output can be produced by the following config:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'actions:\n  commit-message:\n    - echo \'debug output\'\n    - bash -c \'echo ${PACKIT_DEBUG_DIVIDER}\'\n    - bash -c \'echo -e "Rebase to new upstream release ${PACKIT_PROJECT_VERSION}\\n"\'\n    - bash -c \'[ -z "$PACKIT_RESOLVED_BUGS" ] || echo ${PACKIT_RESOLVED_BUGS} | tr " " "\\n" | sed "s/^/- Resolves /"\'\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Example of incorrect output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"---%<--- snip ---%<--- here ---%<---\n\n\nmissing the commit title\n"))),(0,r.kt)("h2",{id:"environment-variables-set-by-packit"},"Environment variables set by packit"),(0,r.kt)("p",null,"Additionally, packit sets several environment variables for the actions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_UPSTREAM_PACKAGE_NAME")," \u2014 set to the ",(0,r.kt)("inlineCode",{parentName:"li"},"upstream_package_name")," value, if any"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_DOWNSTREAM_PACKAGE_NAME")," \u2014 set to the ",(0,r.kt)("inlineCode",{parentName:"li"},"downstream_package_name")," value, if any"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_CONFIG_PACKAGE_NAME")," \u2014 set to the package name key for the ",(0,r.kt)("inlineCode",{parentName:"li"},"packages")," dictionary in a monorepo project,\nfalls back to the ",(0,r.kt)("inlineCode",{parentName:"li"},"downstream_package_name")," or, if not set, to ",(0,r.kt)("inlineCode",{parentName:"li"},"upstream_package_name"))),(0,r.kt)("p",null,"There are also action-specific environment variables, which you can see below."),(0,r.kt)("h3",{id:"fix-spec-file-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"fix-spec-file")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_VERSION")," \u2014 current version of the project (coming from ",(0,r.kt)("inlineCode",{parentName:"li"},"git describe"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_COMMIT")," \u2014 commit hash of the top commit"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_ARCHIVE")," \u2014 expected name of the archive"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_RPMSPEC_RELEASE")," \u2014 value for spec file's ",(0,r.kt)("inlineCode",{parentName:"li"},"%release")," field which packit would set")),(0,r.kt)("h3",{id:"create-archive-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"create-archive")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_VERSION")," \u2014 current version of the project (coming from ",(0,r.kt)("inlineCode",{parentName:"li"},"git describe"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_NAME_VERSION")," \u2014 current name and version of the project (coming from ",(0,r.kt)("inlineCode",{parentName:"li"},"git describe"),")")),(0,r.kt)("h3",{id:"changelog-entry"},(0,r.kt)("inlineCode",{parentName:"h3"},"changelog-entry")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_VERSION")," \u2014 version to be set in the specfile, set when relevant\n(e.g. when syncing upstream release downstream)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_UPSTREAM_TAG")," - upstream tag corresponding to the version to be set in the specfile"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_RESOLVED_BUGS")," - bugs resolved by the release separated by space, set\nwhen syncing upstream release downstream, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"rhbz#123 rhbz#124")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_PREVIOUS_VERSION")," - version from the specfile that is about to be changed")),(0,r.kt)("h3",{id:"commit-message-1"},(0,r.kt)("inlineCode",{parentName:"h3"},"commit-message")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_VERSION")," \u2014 version to be set in the specfile"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_UPSTREAM_TAG")," \xad\u200b\u2014 git tag of the upstream release"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_UPSTREAM_COMMIT")," \u2014 commit SHA of the upstream release"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_DEBUG_DIVIDER")," \xad\u2014 divider that can be used to separate debug output\nfrom the actual commit message to be used"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_RESOLVED_BUGS")," - bugs resolved by the release separated by space,\ne.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"rhbz#123 rhbz#124"))),(0,r.kt)("h3",{id:"release-synchronization-actions"},"Release-synchronization actions"),(0,r.kt)("p",null,"Related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"propose-downstream")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pull-from-upstream")," jobs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_UPSTREAM_REPO")," \u2014 absolute path to cloned upstream git repo (main branch) "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_DOWNSTREAM_REPO")," \u2014 absolute path to cloned downstream git repo (target branch)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PACKIT_PROJECT_VERSION")," - version that is being proposed")),(0,r.kt)("p",null,"List of actions that provide these environment variables:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"post-upstream-clone")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pre-sync")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prepare-files")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create-patches")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commit-message"))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"If you want to see the content of those variables, you can print using ",(0,r.kt)("inlineCode",{parentName:"p"},"echo"),"\nin the specific action:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'actions:\n  fix-spec-file:\n  - bash -c "echo PACKIT_PROJECT_VERSION=${PACKIT_PROJECT_VERSION}"\n')),(0,r.kt)("p",null,"and then make sure to run ",(0,r.kt)("inlineCode",{parentName:"p"},"packit")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--debug")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ packit --debug srpm\n...\n2021-09-15 09:01:36.821 commands.py       DEBUG  Command: bash -c echo PACKIT_PROJECT_VERSION=${PACKIT_PROJECT_VERSION}\n2021-09-15 09:01:36.826 logging.py        INFO   PACKIT_PROJECT_VERSION=0.14.0\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Actions can be defined like this in your ",(0,r.kt)("inlineCode",{parentName:"p"},".packit.yaml"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'specfile_path: package.spec\nfiles_to_sync:\n  - packit.yaml\n  - package.spec\nupstream_package_name: package\ndownstream_package_name: package\ndist_git_url: https://src.fedoraproject.org/rpms/package.git\nactions:\n  prepare-files: "make prepare"\n  create-archive:\n  - "make archive"\n  - bash -c "ls -1 ./package-*.tar.gz"\n  changelog-entry:\n  - bash -c \'echo "- New release ${PACKIT_PROJECT_VERSION}"\'\n')),(0,r.kt)("p",null,"Please note that ",(0,r.kt)("inlineCode",{parentName:"p"},"%changelog")," expects dashes in a changelog entry, but the dash\nwould be interpreted by ",(0,r.kt)("inlineCode",{parentName:"p"},"echo")," as an option so we need to quote it."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Be aware, that commands do not share the working directory.\nSo, if you want to change the working directory of a command or multiple commands,\ndon't run ",(0,r.kt)("inlineCode",{parentName:"p"},"cd")," as a separate command as shown in the following example.\nThis won't work as expected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"actions:\n  post-upstream-clone:\n    - cd /tmp\n    - touch test_file\n")),(0,r.kt)("p",null,"Instead, spawn a shell and change the directory as the first command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'actions:\n  post-upstream-clone:\n    - bash -c "cd ${PACKIT_DOWNSTREAM_REPO}; touch new_file_for_dist_git.tmp"\n')))}d.isMDXComponent=!0}}]);