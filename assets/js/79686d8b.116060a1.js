"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[29129],{15680:(e,t,i)=>{i.d(t,{xA:()=>u,yg:()=>h});var n=i(96540);function o(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){o(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,o=function(e,t){if(null==e)return{};var i,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(o[i]=e[i]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(o[i]=e[i])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(i),p=o,h=d["".concat(l,".").concat(p)]||d[p]||g[p]||a;return i?n.createElement(h,r(r({ref:t},u),{},{components:i})):n.createElement(h,r({ref:t},u))}));function h(e,t){var i=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=i.length,r=new Array(a);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<a;c++)r[c]=i[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},62580:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/diagram-2fc3343c6b45e597aa21da472feb080b.png"},90688:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=i(58168),o=(i(96540),i(15680));const a={title:"Design",date:new Date("2018-12-31T22:59:59.000Z"),sidebar_position:1},r="Source-git design",s={unversionedId:"design",id:"design",title:"Design",description:"This document serves as a detailed description of source-git. Please bear in",source:"@site/source-git/design.md",sourceDirName:".",slug:"/design",permalink:"/source-git/design",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/source-git/design.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Design",date:"2018-12-31T22:59:59.000Z",sidebar_position:1},sidebar:"autogenerated",previous:{title:"Source-git documentation",permalink:"/source-git/"},next:{title:"Packit\u2019s statement on Source-git for 2023/Q3",permalink:"/source-git/status"}},l={},c=[{value:"What is source-git?",id:"what-is-source-git",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Premises",id:"premises",level:2},{value:"An addon to dist-git",id:"an-addon-to-dist-git",level:2},{value:"Repository location",id:"repository-location",level:2},{value:"Layout",id:"layout",level:2},{value:"History and branching",id:"history-and-branching",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Workflows",id:"workflows",level:2}],u={toc:c},d="wrapper";function g(e){let{components:t,...a}=e;return(0,o.yg)(d,(0,n.A)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"source-git-design"},"Source-git design"),(0,o.yg)("p",null,'This document serves as a detailed description of source-git. Please bear in\nmind that some things are a subject to change. Paragraphs marked with "\u203c\ufe0f\ud83d\udca3\ufe0f"\nare known to require further work to be better defined.'),(0,o.yg)("h2",{id:"what-is-source-git"},"What is source-git?"),(0,o.yg)("p",null,'Source-git is a repository format and the related processes, tooling and bots,\nthat are intended to enable using forks of the upstream projects to maintain,\nupdate and build packages in a distribution. By "distribution" we mean\ndistributions in the RHEL ecosystem (Fedora Linux, CentOS Stream and RHEL),\nbut the tools and processes probably could be applied to any RPM based\ndistribution.'),(0,o.yg)("h2",{id:"motivation"},"Motivation"),(0,o.yg)("p",null,"Traditionally dist-git is the format used to maintain, develop and release\nsoftware in these distributions. In dist-git the source archive of an upstream\nrelease is stored in the lookaside cache, while downstream (distribution\nspecific) changes are checked-in as patch files in Git. This layout resembles\nSRPMs, and so it's easily consumed by build systems, but it makes it somewhat\ndifficult for humans to make sense of the content. Additionally, transforming\nupstream content (which most of the time originates from a Git repo) to\ndist-git has become a tedious activity, with a plethora of tooling available\nto do very similar things."),(0,o.yg)("p",null,"The dist-git format also has the side effect of making the adoption of modern\nGit-workflows somewhat more difficult (reviewing changes in patch-files\nrequires a higher cognitive effort) and raising the bar for new contributors,\nwho know how to contribute using Git, but need to learn about dist-git before\ntouching any package."),(0,o.yg)("p",null,"With source-git the goal is to:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Enable using these well-known Git-workflows in packaging activities."),(0,o.yg)("li",{parentName:"ul"},"Automate and standardize the tedious task of converting from one repository\nformat to the other.")),(0,o.yg)("p",null,'If you think about it, "source-git" is really just good old plain "Git", used\nas it meant to be used by Linus.'),(0,o.yg)("h2",{id:"premises"},"Premises"),(0,o.yg)("p",null,"One of the fundamentally useless manual activities when maintaining a package\nin Fedora is transforming source code from one Git repository format to\nanother.  Git is distributed. Dist-git content is mostly boilerplate or\nregurgitated data."),(0,o.yg)("p",null,"Using an upstream format during packaging makes collaboration easier, and\nlowers the entry barrier for new contributors by enabling a development\nworkflow which they are already familiar with."),(0,o.yg)("p",null,"Linux distributions gain an advantage from having patches incorporated\nupstream and not carrying them downstream."),(0,o.yg)("p",null,"Human effort should not be focused on repetitive, automatable tasks related to\nchurn and moving code around."),(0,o.yg)("p",null,"Dist-git is used as a store of state for build tools (like Koji). Reinventing\ndist-git itself fundamentally, would mean reinventing a lot of tooling."),(0,o.yg)("h2",{id:"an-addon-to-dist-git"},"An addon to dist-git"),(0,o.yg)("p",null,"We recognize, that an extensive ecosystem of tooling and services was\ndeveloped to work with dist-git, and because of this replacing dist-git in the\nimmediate future is not feasible. On the long run though, once source-git\nproved itself, this can become possible."),(0,o.yg)("p",null,"This is why we think about source-git as ",(0,o.yg)("em",{parentName:"p"},"an addon to dist-git"),"."),(0,o.yg)("p",null,"Content of source-git repository is equivalent to dist-git, but uses upstream\nformat: source files instead of tarballs, Git commits instead of patches."),(0,o.yg)("p",null,"Bots are responsible to transform and maintain content in dist-git, so that\nhumans can do all the work in source-git. If bots fail, humans can still step\nin and do the work. Bots and humans use the same tools to do the\ntransformation."),(0,o.yg)("p",null,"All tooling already in place that interacts with dist-git continues to\ninteract with dist-git. Bots are responsible to bring CI results from dist-git\nto source-git for convenience."),(0,o.yg)("p",null,"This means that using source-git to maintain a package adds an overhead\ncompared to directly working in dist-git. Though on the positive side, enables\npackagers and contributors to use a Git workflow they are already familiar\nwith from upstream projects."),(0,o.yg)("p",null,"Source-git might not be a solution for many packages at the early stages, and\nmight not be a solution at all for some packages. This is why, ",(0,o.yg)("em",{parentName:"p"},"source-git is\nopt-in"),", and can be opted out at any point in time if so decided."),(0,o.yg)("h2",{id:"repository-location"},"Repository location"),(0,o.yg)("p",null,"Source-git repositories are hosted and shared in a Git forge chosen by the\ndistribution. This helps the community developing the distribution to be in\ncontrol of these repositories."),(0,o.yg)("p",null,"Teams of developers maintaining packages in multiple distributions can choose\nto have a single repository at a location of their choice, have dedicated\nbranches for each distribution, and sync these branches to the source-git\nrepositories of each distribution. "),(0,o.yg)("h2",{id:"layout"},"Layout"),(0,o.yg)("p",null,"A source-git repository is based on a fork of the upstream project."),(0,o.yg)("p",null,"The files required to create the package for the distribution are stored in\nthe ",(0,o.yg)("inlineCode",{parentName:"p"},".distro")," directory."),(0,o.yg)("p",null,"This includes:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"the spec file,"),(0,o.yg)("li",{parentName:"ul"},"other files required to be present in dist-git (test files, scripts used in\nbuilding the package, package configuration etc.),"),(0,o.yg)("li",{parentName:"ul"},"a ",(0,o.yg)("inlineCode",{parentName:"li"},"source-git.yaml")," file to configure how the content of the repo should be\ntransformed to dist-git.")),(0,o.yg)("h2",{id:"history-and-branching"},"History and branching"),(0,o.yg)("p",null,'By default, branching in source-git mirrors branching in dist-git. In a\nsource-git context, let\'s call these branches "downstream branches".'),(0,o.yg)("p",null,"Downstream branches share their history with the upstream release they are\nbased upon, and contain additional commits to add the ",(0,o.yg)("inlineCode",{parentName:"p"},".distro")," directory and\nits content, and to introduce downstream changes to the upstream source code."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Source-git example",src:i(62580).A,width:"703",height:"395"})),(0,o.yg)("p",null,"When transforming content to dist-git, tooling"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"prepares and uploads the source archive to dist-git's lookaside cache;"),(0,o.yg)("li",{parentName:"ul"},"generates patch files for downstream changes, if any, and updates the spec\nfile accordingly (changes to ",(0,o.yg)("inlineCode",{parentName:"li"},".distro")," are filtered out);"),(0,o.yg)("li",{parentName:"ul"},"updates other files in dist-git with the content of ",(0,o.yg)("inlineCode",{parentName:"li"},".distro")," (except\n",(0,o.yg)("inlineCode",{parentName:"li"},"source-git.yaml"),").")),(0,o.yg)("p",null,"The way patch files are generated and included in the spec file is controlled\nby Git-trailers in the commit messages of downstream commits."),(0,o.yg)("h2",{id:"configuration"},"Configuration"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},".distro/source-git.yaml")," tells tooling how to interact with the source-git\nrepo, including:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"where to pull upstream changes from;"),(0,o.yg)("li",{parentName:"ul"},"how the content of the source-git repo should be transformed to dist-git;",(0,o.yg)("ul",{parentName:"li"},(0,o.yg)("li",{parentName:"ul"},"how to generate or get the source archive to be uploaded to the lookaside\ncache;"),(0,o.yg)("li",{parentName:"ul"},"how to generate patches from downstream commits;"))),(0,o.yg)("li",{parentName:"ul"},"the dist-git repo and branch tracked.")),(0,o.yg)("p",null,"The configuration format is based on the ",(0,o.yg)("a",{parentName:"p",href:"/docs/configuration"},"Packit configuration"),"."),(0,o.yg)("p",null,"Placing this configuration file in a branch in source-git indicates that the\nsource-git branch should be auto-maintained. The configuration file may be\nremoved to turn off auto-maintenance of the branch."),(0,o.yg)("p",null,"For an example see ",(0,o.yg)("a",{parentName:"p",href:"work-with-source-git/create-source-git#configure-syncing-to-dist-git"},"Configure syncing to distgit"),"."),(0,o.yg)("p",null,"\u203c\ufe0f\ud83d\udca3\ufe0f Content from a source-git repository can be committed to a dist-git\nrepository only if the target dist-git branch makes a reference to the\nsource-git repo and branch from which the update originates."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"TODO: have an explicit documentation of ",(0,o.yg)("inlineCode",{parentName:"p"},"source-git.yaml"),".")),(0,o.yg)("h2",{id:"workflows"},"Workflows"),(0,o.yg)("p",null,"Contribution to source-git happens through pull requests (aka. merge\nrequests)."),(0,o.yg)("p",null,"Bots create mirror PRs in dist-git for each source-git PR opened, and make CI\nresults of those mirror PRs available in source-git."),(0,o.yg)("p",null,"\u203c\ufe0f\ud83d\udca3\ufe0f Changes merged in source-git are synced to dist-git."),(0,o.yg)("p",null,"Updates created in dist-git are synced back to source-git via pull requests\nopened by bots. This functionality serves to accommodate changes done by\nprovenpackagers across multiple repositories."),(0,o.yg)("p",null,"Commits need to be signed in order to be transformed to dist-git."),(0,o.yg)("p",null,"Bots sign the commits they create."),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"TODO: Rebase or merge?")))}g.isMDXComponent=!0}}]);