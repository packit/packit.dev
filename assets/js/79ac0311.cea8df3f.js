"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[82014],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>f});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),l=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(a),d=n,f=u["".concat(c,".").concat(d)]||u[d]||h[d]||i;return a?r.createElement(f,o(o({ref:t},p),{},{components:a})):r.createElement(f,o({ref:t},p))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},80362:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=a(58168),n=(a(96540),a(15680));const i={title:"Experiences using Packit for a Rust executable Project",date:new Date("2023-10-10T00:00:00.000Z"),authors:"amulhern"},o="Experiences using Packit for a Rust Executable Project",s={permalink:"/posts/experiences_with_rust",editUrl:"https://github.com/packit/packit.dev/tree/main/posts/experiences_with_rust/index.md",source:"@site/posts/experiences_with_rust/index.md",title:"Experiences using Packit for a Rust executable Project",description:'"How absurdly simple!" I cried.',date:"2023-10-10T00:00:00.000Z",formattedDate:"October 10, 2023",tags:[],readingTime:4.55,hasTruncateMarker:!0,authors:[{name:"mulhern",email:"amulhern@redhat.com",url:"https://github.com/mulkieran",imageURL:"https://github.com/mulkieran.png",key:"amulhern"}],frontMatter:{title:"Experiences using Packit for a Rust executable Project",date:"2023-10-10T00:00:00.000Z",authors:"amulhern"},prevItem:{title:"Introduction to specfile library",permalink:"/posts/specfile-introduction"},nextItem:{title:"Call for volunteers: help to test us the release syncing using staging instance",permalink:"/posts/verify-sync-release-volunteers"}},c={authorsImageUrls:[void 0]},l=[],p={toc:l},u="wrapper";function h(e){let{components:t,...a}=e;return(0,n.yg)(u,(0,r.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,'"How absurdly simple!" I cried.'),(0,n.yg)("p",null,'"Quite so!" said he, a little nettled. "Every problem becomes very childish when once it is explained to you."'),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},'Arthur Conan Doyle, "The Adventure of the Dancing Men"')),(0,n.yg)("p",null,"We have planned for a while to use Packit to generate packages on Copr\non demand for our somewhat complicated Rust executable, stratisd. It\nlooked like this was going to be challenging, and in a sense it was,\nbut once the task was completed, it turned out to have been pretty\nstraightforward."),(0,n.yg)("p",null,"The two primary parts of our Stratis project are stratisd, a big,\nfairly complicated Rust project which generates multiple distinct Rust\nexecutables and also installs scripts and configuration files and so\nforth, and stratis-cli, a relatively simple Python project which\ncommunicates with stratisd over the D-Bus. Our main purpose in getting\non-demand packages of both these projects was not to test the\npackaging, although that is a nice thing to do, but to have a\nconvenient way to do functional testing of the project, frequently\ngenerating a stratisd package from one stratisd pull request and a\nstratis-cli package from a matching stratis-cli pull request."),(0,n.yg)("p",null,"The Packit team had already obliged us by preparing a Packit\nconfiguration file for our stratis-cli repo, we thus merely had to\nfigure out how to do the same for stratisd. We already had some\nscripts which we could run by hand to make the SRPMs for both projects\nso that we could manually send them to Copr so, as it turned out, all\nwe really needed to do was figure out how to write a Packit\nconfiguration file for stratisd so that Packit would do these tasks\nfor us. There follows a quick summary of the decisions we made to\nsolve this problem. Note that our whole and only task was to figure\nout how to create the source artifacts and edit the spec file and\nto provide these in such a way that Packit could take over from there,\nbuild the SRPM, and carry on to request the Copr builds which provide\nthe binary packages for testing."),(0,n.yg)("p",null,"A Packit configuration is used to set certain configuration ",(0,n.yg)("em",{parentName:"p"},"options"),",\nto override certain ",(0,n.yg)("em",{parentName:"p"},"actions"),", or to define certain ",(0,n.yg)("em",{parentName:"p"},"hooks"),". The\navailable actions and hooks are specific to a given job or set of jobs.\nIf an action is not\noverridden in a project's Packit configuration, Packit will execute\nits own default action. For example, Packit's default for the\ncreate-archive action is just git-archive. Any action can be overridden by\nspecifying a sequence of commands. For the stratisd Packit\nconfiguration, we found that we had to override the majority of the\nactions."),(0,n.yg)("p",null,"Note that the ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/stratis-storage/stratisd/blob/master/.packit.yaml"},"stratisd Packit configuration file")," is quite\nsimple as most of the action is in the ",(0,n.yg)("inlineCode",{parentName:"p"},"create_archive.py")," script. Some\nthings to make note of are the following:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"merge_pr_in_ci")," is set to false. This prevents Packit from\nautomatically merging our pull request into its target branch. It has\nalways been our custom to build from the unmerged branch when testing\nPRs and we preferred to do the same in our Packit configuration.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"fix-spec-file")," contains a dummy echo action. This is how we override\nPackit's default spec file editing action. Instead of specifying an\noverride for this action, we use ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/stratis-storage/ci/blob/master/release_management/create_artifacts.py"},"our own script"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"create_artifacts.py"),", to\nedit the spec file as well as to generate the three source artifacts that we\nuse in this package in the ",(0,n.yg)("inlineCode",{parentName:"p"},"create-archive")," action.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"create_artifacts.py")," uses the Packit team's ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/packit/specfile"},"specfile package")," to\nedit the stratisd specfile. We needed just two modifications: 1. To overwrite the Version field with our preferred version string. 2. To overwrite the Source entries with the names and paths of the\nsource artifacts.\nThis requires just one ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/stratis-storage/ci/blob/master/release_management/_utils.py#L80"},"very simple function")," using specfile.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"In the Packit configuration, the ",(0,n.yg)("inlineCode",{parentName:"p"},"update_release")," field is set to\nfalse. We prefer to update the Version field in the spec file using\nour ",(0,n.yg)("inlineCode",{parentName:"p"},"create_archive.py")," script, so that the updated version is\nrecognized as a pre-release version of our current version by\n",(0,n.yg)("inlineCode",{parentName:"p"},"rpmdev-vercmp"),".")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"We modified our ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/stratis-storage/stratis-cli/blob/master/.packit.yaml"},"stratis-cli Packit configuration file")," to work the\nsame way as our stratisd one."))),(0,n.yg)("p",null,"In summary, we got the ability to take advantage of the Packit\ninfrastructure for Copr builds by figuring out how to satisfy its\nrequirements for the source artifacts and the specfile. Note that our\ndecisions about how to do this were made based on the scripts we had\nalready written to generate the SRPMs and the particular requirements\nof our project. For example, our release scripts are written in\nPython, and we stuck with that choice. That turned out to be handy,\nbecause that allowed us to use the specfile project in our scripts to\nedit the spec file. But it would have been possible to write the\nartifact creation script in Rust using the cargo xtask pattern just as\nwell, and to solve the spec file rewriting problem using, e.g., sed.\nWe overwrote the Version field in the spec file, rather than allowing\nPackit to autobump our release number, because our development process\nrequires us to bump the version in the Cargo.toml (for Rust) and\nsetup.cfg (for Python) files to the version we will release as soon as\nwe begin development. These choices and their implementations could be\nmade differently to support a project with different constraints and\ndifferent existing infrastructure."))}h.isMDXComponent=!0}}]);