"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[5163],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,d=u["".concat(p,".").concat(m)]||u[m]||f[m]||l;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const l={sidebar_label:"utils",title:"specfile.utils"},i=void 0,o={unversionedId:"api/specfile/utils",id:"api/specfile/utils",title:"specfile.utils",description:"EVR",source:"@site/specfile/api/specfile/utils.md",sourceDirName:"api/specfile",slug:"/api/specfile/utils",permalink:"/specfile/api/specfile/utils",draft:!1,editUrl:"https://github.com/packit/specfile/tree/main/docs/specfile/api/specfile/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"specfile.utils"},sidebar:"autogenerated",previous:{title:"tags",permalink:"/specfile/api/specfile/tags"},next:{title:"value_parser",permalink:"/specfile/api/specfile/value_parser"}},p={},s=[{value:"EVR",id:"evr",level:2},{value:"NEVR",id:"nevr",level:2},{value:"NEVRA",id:"nevra",level:2},{value:"get_filename_from_location",id:"get_filename_from_location",level:4},{value:"split_conditional_macro_expansion",id:"split_conditional_macro_expansion",level:4}],c={toc:s},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"evr"},"EVR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class EVR(collections.abc.Hashable)\n")),(0,a.kt)("p",null,"Class representing Epoch-Version-Release combination."),(0,a.kt)("h2",{id:"nevr"},"NEVR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class NEVR(EVR)\n")),(0,a.kt)("p",null,"Class representing Name-Epoch-Version-Release combination."),(0,a.kt)("h2",{id:"nevra"},"NEVRA"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class NEVRA(NEVR)\n")),(0,a.kt)("p",null,"Class representing Name-Epoch-Version-Release-Arch combination."),(0,a.kt)("h4",{id:"get_filename_from_location"},"get","_","filename","_","from","_","location"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_filename_from_location(location: str) -> str\n")),(0,a.kt)("p",null,"Extracts filename from given source location."),(0,a.kt)("p",null,"Follows RPM logic - target filename can be specified in URL fragment."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"location")," - Location to extract filename from.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Extracted filename that can be empty if there is none."),(0,a.kt)("h4",{id:"split_conditional_macro_expansion"},"split","_","conditional","_","macro","_","expansion"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def split_conditional_macro_expansion(value: str) -> Tuple[str, str, str]\n")),(0,a.kt)("p",null,"Splits conditional macro expansion into its body and prefix and suffix of it.\nIf the passed string isn","'","t a conditional macro expansion, returns it as it is."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - String to be split.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Tuple of body, prefix, suffix. Prefix and suffix will be empty if the passed string\nisn","'","t a conditional macro expansion."))}f.isMDXComponent=!0}}]);