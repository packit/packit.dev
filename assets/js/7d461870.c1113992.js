"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[91874],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),f=a,m=u["".concat(p,".").concat(f)]||u[f]||g[f]||l;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=f;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},23172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const l={sidebar_label:"utils",title:"specfile.utils"},i=void 0,o={unversionedId:"api/specfile/utils",id:"api/specfile/utils",title:"specfile.utils",description:"EVR",source:"@site/specfile/api/specfile/utils.md",sourceDirName:"api/specfile",slug:"/api/specfile/utils",permalink:"/specfile/api/specfile/utils",draft:!1,editUrl:"https://github.com/packit/specfile/tree/main/docs/specfile/api/specfile/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"specfile.utils"},sidebar:"autogenerated",previous:{title:"tags",permalink:"/specfile/api/specfile/tags"},next:{title:"value_parser",permalink:"/specfile/api/specfile/value_parser"}},p={},s=[{value:"EVR",id:"evr",level:2},{value:"NEVR",id:"nevr",level:2},{value:"NEVRA",id:"nevra",level:2},{value:"get_filename_from_location",id:"get_filename_from_location",level:4},{value:"count_brackets",id:"count_brackets",level:4},{value:"split_conditional_macro_expansion",id:"split_conditional_macro_expansion",level:4}],c={toc:s},u="wrapper";function g(e){let{components:n,...t}=e;return(0,a.yg)(u,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"evr"},"EVR"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class EVR(collections.abc.Hashable)\n")),(0,a.yg)("p",null,"Class representing Epoch-Version-Release combination."),(0,a.yg)("h2",{id:"nevr"},"NEVR"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class NEVR(EVR)\n")),(0,a.yg)("p",null,"Class representing Name-Epoch-Version-Release combination."),(0,a.yg)("h2",{id:"nevra"},"NEVRA"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"class NEVRA(NEVR)\n")),(0,a.yg)("p",null,"Class representing Name-Epoch-Version-Release-Arch combination."),(0,a.yg)("h4",{id:"get_filename_from_location"},"get","_","filename","_","from","_","location"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def get_filename_from_location(location: str) -> str\n")),(0,a.yg)("p",null,"Extracts filename from given source location."),(0,a.yg)("p",null,"Follows RPM logic - target filename can be specified in URL fragment."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"location")," - Location to extract filename from.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("p",null,"  Extracted filename that can be empty if there is none."),(0,a.yg)("h4",{id:"count_brackets"},"count","_","brackets"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def count_brackets(string: str) -> Tuple[int, int]\n")),(0,a.yg)("p",null,"Counts non-pair brackets in %","{","...","}"," and %(...) expressions appearing in the given string."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"string")," - Input string.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("p",null,"  The count of non-pair curly braces and the count of non-pair parentheses."),(0,a.yg)("h4",{id:"split_conditional_macro_expansion"},"split","_","conditional","_","macro","_","expansion"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"def split_conditional_macro_expansion(value: str) -> Tuple[str, str, str]\n")),(0,a.yg)("p",null,"Splits conditional macro expansion into its body and prefix and suffix of it.\nIf the passed string isn","'","t a conditional macro expansion, returns it as it is."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"value")," - String to be split.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("p",null,"  Tuple of body, prefix, suffix. Prefix and suffix will be empty if the passed string\nisn","'","t a conditional macro expansion."))}g.isMDXComponent=!0}}]);