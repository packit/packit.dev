"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[82450],{14130:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=a(58168),r=(a(96540),a(15680));const o={title:"Packit Service jobs configuration",date:new Date("2023-07-03T00:00:00.000Z"),sidebar_position:1},i="Packit Service jobs configuration",l={unversionedId:"configuration/jobs",id:"configuration/jobs",title:"Packit Service jobs configuration",description:"Packit Service doesn't have any web interface, but its behaviour can be configured via the config file",source:"@site/docs/configuration/jobs.md",sourceDirName:"configuration",slug:"/configuration/jobs",permalink:"/docs/configuration/jobs",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/configuration/jobs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Packit Service jobs configuration",date:"2023-07-03T00:00:00.000Z",sidebar_position:1},sidebar:"autogenerated",previous:{title:"Configuration",permalink:"/docs/configuration/"},next:{title:"Upstream jobs",permalink:"/docs/category/upstream-jobs"}},s={},p=[{value:"Configuration keys",id:"configuration-keys",level:2},{value:"job",id:"job",level:4},{value:"trigger",id:"trigger",level:4},{value:"packages",id:"packages",level:4},{value:"manual_trigger",id:"manual_trigger",level:4},{value:"Overriding global parameters in jobs",id:"overriding-global-parameters-in-jobs",level:3},{value:"Supported jobs",id:"supported-jobs",level:2}],g={toc:p},c="wrapper";function u(e){let{components:n,...a}=e;return(0,r.yg)(c,(0,t.A)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"packit-service-jobs-configuration"},"Packit Service jobs configuration"),(0,r.yg)("p",null,"Packit Service doesn't have any web interface, but its behaviour can be configured via the config file\ngenerally described ",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration"},"here"),"."),(0,r.yg)("p",null,"The tasks Packit Service should do should be defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"jobs")," section. The section is a list of dictionaries:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n- {key: value}\n- {}\n")),(0,r.yg)("p",null,"When there is an action (pull request, commit, etc.) in the upstream repository, Packit Service takes the config\nfile from the relevant git ref (release tag for release, PR head for pull requests, related dist-git commit for downstream jobs).\nThen, it tries to find a matching job in the ",(0,r.yg)("inlineCode",{parentName:"p"},"jobs")," sections for the particular event (e.g. for pull request, jobs with\n",(0,r.yg)("inlineCode",{parentName:"p"},"pull_request")," trigger are matched)."),(0,r.yg)("p",null,"If there is no ",(0,r.yg)("inlineCode",{parentName:"p"},"jobs")," section in the configuration file, jobs default to:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n- job: copr_build\n  trigger: pull_request\n  targets: [fedora-stable]\n\n- job: tests\n  trigger: pull_request\n  targets: [fedora-stable]\n\n- job: propose_downstream\n  trigger: release\n  dist_git_branches:\n    - fedora-all\n")),(0,r.yg)("p",null,"If you do not want to use the jobs then the ",(0,r.yg)("inlineCode",{parentName:"p"},"jobs")," section in the configuration file should be empty:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs: []\n\n")),(0,r.yg)("p",null,"Packit configuration supports ",(0,r.yg)("a",{parentName:"p",href:"https://yaml.org/type/merge.html"},"YAML Merge Key syntax"),", which can be used to reduce duplication of configuration. Please see the example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"# before\njobs:\n- job: copr_build\n\xa0 trigger: pull_request\n\xa0 targets:\n\xa0   - centos-stream-8-x86_64\n\xa0   - centos-stream-9-x86_64\n\xa0   - fedora-all\n\n- job: copr_build\n\xa0 trigger: commit\n\xa0 branch: main\n\xa0 targets:\n\xa0   - centos-stream-8-x86_64\n\xa0   - centos-stream-9-x86_64\n\xa0   - fedora-all\n\n# after\njobs:\n- &copr\n\xa0 job: copr_build\n\xa0 trigger: pull_request\n\xa0 targets:\n\xa0   - centos-stream-8-x86_64\n\xa0   - centos-stream-9-x86_64\n\xa0   - fedora-all\n\n- <<: *copr\n\xa0 trigger: commit\n\xa0 branch: main\n")),(0,r.yg)("p",null,"Do not forget that you can also define common Packit config options at the\ntop level (such as ",(0,r.yg)("inlineCode",{parentName:"p"},"targets")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"actions"),") and only override them when\nneeded in the ",(0,r.yg)("inlineCode",{parentName:"p"},"jobs")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"packages")," section."),(0,r.yg)("p",null,"For more complex structures it can be useful to have yaml-anchors that are ignored,\nin which case you can use the top-level ",(0,r.yg)("inlineCode",{parentName:"p"},"_")," key, for example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"_:\n  basic-test: &template-basic-test\n    job: tests\n    trigger: pull_request\n    targets:\n\xa0     - centos-stream-8-x86_64\n\xa0     - centos-stream-9-x86_64\n\xa0     - fedora-all\n\njobs:\n\n- <<: *template-basic-test\n  identifier: kernel-rt-sanity\n  labels:\n    - kernel-rt\n  env:\n    RPM_NAME=kernel-rt\n\n- <<: *template-basic-test\n  identifier: kernel-sanity\n  labels:\n    - kernel\n  env:\n    RPM_NAME=kernel\n")),(0,r.yg)("p",null,"This is typically useful when creating a number of tests which needs various\nparameters, but many parameters stay same. For compatibility reasons, you can\nalso define a job that is not executed by setting ",(0,r.yg)("inlineCode",{parentName:"p"},"trigger")," to ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore"),". The\nabove example can be rewritten as:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n- &template-basic-test\n  job: tests\n  trigger: ignore\n  targets:\n\xa0   - centos-stream-8-x86_64\n\xa0   - centos-stream-9-x86_64\n\xa0   - fedora-all\n\n- <<: *template-basic-test\n  identifier: kernel-rt-sanity\n  trigger: pull_request\n  labels:\n    - kernel-rt\n  env:\n    RPM_NAME=kernel-rt\n\n- <<: *template-basic-test\n  identifier: kernel-sanity\n  trigger: pull_request\n  labels:\n    - kernel\n  env:\n    RPM_NAME=kernel\n")),(0,r.yg)("p",null,"However, using the ",(0,r.yg)("inlineCode",{parentName:"p"},"_")," placeholder key is preferred as it provides more flexibility."),(0,r.yg)("h2",{id:"configuration-keys"},"Configuration keys"),(0,r.yg)("h4",{id:"job"},"job"),(0,r.yg)("p",null,"(",(0,r.yg)("em",{parentName:"p"},"str"),") name of the job (you can imagine this as a CLI command)."),(0,r.yg)("h4",{id:"trigger"},"trigger"),(0,r.yg)("p",null,"(",(0,r.yg)("em",{parentName:"p"},"str"),") what is the trigger for the job? Every job only supports a specific set of triggers.\nYou can also use the special value ",(0,r.yg)("inlineCode",{parentName:"p"},"ignore")," that indicates not to execute the job at all\n(used for templates or temporarily disabled jobs)."),(0,r.yg)("h4",{id:"packages"},"packages"),(0,r.yg)("p",null,"(",(0,r.yg)("em",{parentName:"p"},"list"),") Optional, list of package object names (when using monorepositories). If a job object has no such key,\nall packages of a monorepo should be handled. The package object names need to be defined\nin the ",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration#packages"},(0,r.yg)("inlineCode",{parentName:"a"},"packages"))," dictionary."),(0,r.yg)("p",null,"Here is an example of the configuration of the job including the ",(0,r.yg)("inlineCode",{parentName:"p"},"packages"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  - job: copr_build\n    trigger: pull_request\n    targets:\n      - fedora-all\n      - epel-8\n    packages:\n      - copr-frontend\n      - copr-backend\n")),(0,r.yg)("h4",{id:"manual_trigger"},"manual_trigger"),(0,r.yg)("p",null,"(",(0,r.yg)("em",{parentName:"p"},"bool"),") Option that enables triggering the job only manually (via pull-request/issue comment or rerunning GitHub check).\nDefaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,r.yg)("h3",{id:"overriding-global-parameters-in-jobs"},"Overriding global parameters in jobs"),(0,r.yg)("p",null,"You are able to override your global parameters (such as ",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration#specfile_path"},(0,r.yg)("inlineCode",{parentName:"a"},"specfile_path")),",\n",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration#downstream_package_name"},(0,r.yg)("inlineCode",{parentName:"a"},"downstream_package_name")),",\n",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration/actions"},(0,r.yg)("inlineCode",{parentName:"a"},"actions")),"...) for every job. This is very useful\nwhen you want to set up a build or a test matrix using different parameters or\nconfiguration. It's also useful when your release workflow differs between\nFedora and EPEL."),(0,r.yg)("p",null,"In order to do such a thing, just set a value you want to override in the\nrespective job."),(0,r.yg)("p",null,"Example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"specfile_path: package.spec\njobs:\n- job: some-job\n  trigger: ran-out-of-beer\n  targets: [fedora-stable]\n  specfile_path: somewhere/else/package.spec\n")),(0,r.yg)("p",null,"In this example, the job ",(0,r.yg)("inlineCode",{parentName:"p"},"some-job")," would override ",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration#specfile_path"},(0,r.yg)("inlineCode",{parentName:"a"},"specfile_path"))," to\n",(0,r.yg)("inlineCode",{parentName:"p"},"somewhere/else/package.spec")," instead of using ",(0,r.yg)("inlineCode",{parentName:"p"},"./package.spec"),"."),(0,r.yg)("h2",{id:"supported-jobs"},"Supported jobs"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Upstream jobs",(0,r.yg)("ol",{parentName:"li"},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"upstream/copr_build"},(0,r.yg)("inlineCode",{parentName:"a"},"copr_build"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"upstream/tests"},(0,r.yg)("inlineCode",{parentName:"a"},"tests"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"upstream/upstream_koji_build"},(0,r.yg)("inlineCode",{parentName:"a"},"upstream_koji_build"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"upstream/vm_image_build"},(0,r.yg)("inlineCode",{parentName:"a"},"vm_image_build"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"upstream/propose_downstream"},(0,r.yg)("inlineCode",{parentName:"a"},"propose_downstream"))))),(0,r.yg)("li",{parentName:"ul"},"Downstream jobs",(0,r.yg)("ol",{parentName:"li"},(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"downstream/pull_from_upstream"},(0,r.yg)("inlineCode",{parentName:"a"},"pull_from_upstream"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"downstream/koji_build"},(0,r.yg)("inlineCode",{parentName:"a"},"koji_build"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("a",{parentName:"li",href:"downstream/bodhi_update"},(0,r.yg)("inlineCode",{parentName:"a"},"bodhi_update")))))))}u.isMDXComponent=!0},15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>d});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},g=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,d=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return a?t.createElement(d,i(i({ref:n},g),{},{components:a})):t.createElement(d,i({ref:n},g))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);