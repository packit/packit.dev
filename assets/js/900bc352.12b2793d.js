"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[71605],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||y[m]||i;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},57410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(58168),r=(n(96540),n(15680));const i={title:"Secrets"},l=void 0,o={unversionedId:"secrets",id:"secrets",title:"Secrets",description:"During deployment (make deploy), secret files are downloaded from a vault",source:"@site/deployment/secrets.md",sourceDirName:".",slug:"/secrets",permalink:"/deployment/secrets",draft:!1,editUrl:"https://github.com/packit/deployment/tree/main/docs/deployment/secrets.md",tags:[],version:"current",frontMatter:{title:"Secrets"},sidebar:"autogenerated",previous:{title:"Updating the changelog",permalink:"/deployment/scripts"},next:{title:"Deployment Specifics",permalink:"/deployment/category/deployment-specifics"}},p={},s=[{value:"Install <code>bw</code> CLI",id:"install-bw-cli",level:2},{value:"Update secrets in Bitwarden",id:"update-secrets-in-bitwarden",level:2},{value:"Update secrets in OpenShift",id:"update-secrets-in-openshift",level:2},{value:"What secret files the deployment expects",id:"what-secret-files-the-deployment-expects",level:2},{value:"Running a service/bot locally",id:"running-a-servicebot-locally",level:2},{value:"Encrypting Secrets for OpenShift Tests in Testing Farm",id:"encrypting-secrets-for-openshift-tests-in-testing-farm",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Obtaining Required Information",id:"obtaining-required-information",level:3},{value:"Encryption Process",id:"encryption-process",level:3},{value:"Example Configuration Structure",id:"example-configuration-structure",level:3}],c={toc:s},d="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(d,(0,a.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"During deployment (",(0,r.yg)("inlineCode",{parentName:"p"},"make deploy"),"), secret files are downloaded from a vault\ninto one of the subdirectories and transformed into Kubernetes/Openshift secrets.\nThey can also be downloaded independently with ",(0,r.yg)("inlineCode",{parentName:"p"},"make download-secrets"),"\n(only Packit team members with access to Bitwarden vault).\nBy default, these subdirectories contain only templates, which don't contain any secret,\nbut which are processes and injected with secrets during the deployment process.\nIf you want to see them rendered before you run the deployment,\nuse ",(0,r.yg)("inlineCode",{parentName:"p"},"make render-secrets-from-templates"),"."),(0,r.yg)("h2",{id:"install-bw-cli"},"Install ",(0,r.yg)("inlineCode",{parentName:"h2"},"bw")," CLI"),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://bitwarden.com/help/cli/#download-and-install"},"https://bitwarden.com/help/cli/#download-and-install")),(0,r.yg)("h2",{id:"update-secrets-in-bitwarden"},"Update secrets in Bitwarden"),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"scripts/update_bw_secret.sh")," to update secrets, and don't have to click\nthrough the Bitwarden Web UI, deleting and uploading attachments."),(0,r.yg)("p",null,"Here is the workflow how to do that:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Make sure your local copy is up-to-date. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ SERVICE=packit DEPLOYMENT=stg make download-secrets\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit the secret file you want to update, for example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ $EDITOR secrets/packit/stg/extra-vars.yml\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the secret in Bitwarden. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ ./scripts/update_bw_secret.sh secrets/packit/stg/extra-vars.yml\n")))),(0,r.yg)("p",null,"The script figures out which Bitwarden item to edit from the path to the file,\nso that needs to be provided as ",(0,r.yg)("inlineCode",{parentName:"p"},"secrets/<service>/<deployment>/<file>"),"."),(0,r.yg)("p",null,"Nothing happens if the file did not change. The script also helps with\nupdating the ",(0,r.yg)("inlineCode",{parentName:"p"},"! Changelog !"),": saves the note in a file, opens the file with\n",(0,r.yg)("inlineCode",{parentName:"p"},"$EDITOR")," to be edited, and updates the note in Bitwarden."),(0,r.yg)("h2",{id:"update-secrets-in-openshift"},"Update secrets in OpenShift"),(0,r.yg)("p",null,"Use ",(0,r.yg)("inlineCode",{parentName:"p"},"scripts/update_oc_secret.sh")," to update secrets directly in OpenShift from\nthe command-line."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"First make sure the local copies of the secrets are in sync\nwith what's stored in Bitwarden. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ SERVICE=packit DEPLOYMENT=stg make download-secrets\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Edit the file you want to update. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ $EDITOR secrets/packit/stg/packit-service.yaml.j2\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Render secret files from the templates:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ SERVICE=packit DEPLOYMENT=stg make render-secrets-from-templates\n")),(0,r.yg)("p",{parentName:"li"},"This creates ",(0,r.yg)("inlineCode",{parentName:"p"},"packit-service.yaml")," from ",(0,r.yg)("inlineCode",{parentName:"p"},"packit-service.yaml.j2"),"\n(no secret values, stored in public repo) and ",(0,r.yg)("inlineCode",{parentName:"p"},"extra-vars.yml"),"\n(secret values, downloaded from the vault).")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Login to OpenShift and select the right project. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ oc login ...\n$ oc project packit-stg\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the secret in OpenShift with the content of the file. You'll need to\nknow the name of the secret. For example:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"$ scripts/update_oc_secret.sh packit-config secrets/packit/stg/packit-service.yaml\n")))),(0,r.yg)("p",null,"Don't forget that you'll need to re-spin the pods using the secret, so that\nthey pick up the change."),(0,r.yg)("h2",{id:"what-secret-files-the-deployment-expects"},"What secret files the deployment expects"),(0,r.yg)("p",null,"Not all services expect all of them. For example source-git services don't need ",(0,r.yg)("inlineCode",{parentName:"p"},"copr")," & ",(0,r.yg)("inlineCode",{parentName:"p"},"private-key.pem"),".\nCheck ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/packit/deployment/tree/main/playbooks/roles/generate_secrets/files"},"generate_secrets role")," to see some pre-filled."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"copr")," - Your copr credentials."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"extra-vars.yml")," - tokens, passwords, keys, etc."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fedora.keytab")," - Fedora kerberos."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fedora.toml")," - ",(0,r.yg)("a",{parentName:"li",href:"https://fedora-messaging.readthedocs.io/en/stable/configuration.html"},"fedora-messaging configuration"),". Generated from ",(0,r.yg)("inlineCode",{parentName:"li"},"fedora.toml.j2")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"extra-vars.yml")," either during deployment or manually with ",(0,r.yg)("inlineCode",{parentName:"li"},"make render-secrets-from-templates"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fullchain.pem")," & ",(0,r.yg)("inlineCode",{parentName:"li"},"privkey.pem"),"- Let's encrypt TLS certs."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"id_ed25519[.pub]")," - SSH keys, to push to a git forge."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"packit-service.yaml")," - The service configuration. Generated from ",(0,r.yg)("inlineCode",{parentName:"li"},"packit-service.yaml.j2")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"extra-vars.yml")," either during deployment or manually with ",(0,r.yg)("inlineCode",{parentName:"li"},"make render-secrets-from-templates"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"private-key.pem")," - Specified in a GitHub App settings. Used to ",(0,r.yg)("a",{parentName:"li",href:"https://developer.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app"},"sign access token requests"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"ssh_config")," - SSH configuration to be able to run fedpkg inside the OpenShift pod.")),(0,r.yg)("h2",{id:"running-a-servicebot-locally"},"Running a service/bot locally"),(0,r.yg)("p",null,"Before you can ",(0,r.yg)("a",{parentName:"p",href:"testing-changes"},"try the service locally"),"\nyou need to have expected secrets in ",(0,r.yg)("inlineCode",{parentName:"p"},"secrets/{SERVICE}/dev/"),". Either"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"generate them with ",(0,r.yg)("inlineCode",{parentName:"li"},"make generate-local-secrets")," or"),(0,r.yg)("li",{parentName:"ul"},"if you're a Packit team member with access to Bitwarden vault, download ",(0,r.yg)("inlineCode",{parentName:"li"},"stg/")," secrets (",(0,r.yg)("inlineCode",{parentName:"li"},"DEPLOYMENT=stg make download-secrets"),") and copy into ",(0,r.yg)("inlineCode",{parentName:"li"},"dev/"))),(0,r.yg)("p",null,"In both cases you have to do some tweaks before using them:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"packit-service.yaml.j2"),":",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"deployment: dev")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fas_user: your-fas-username")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"validate_webhooks: false")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"server_name: service.localhost:8443")))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"extra-vars.yml"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"would be nice to use your tokens/api keys in ",(0,r.yg)("inlineCode",{parentName:"li"},"packit_service.authentication"),", but it's not crucial since it's for staging instances"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"sentry.dsn"),": just empty it to not send your devel bugs to Sentry"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fedora_messaging"),": replace with a new generated (",(0,r.yg)("inlineCode",{parentName:"li"},"uuidgen"),") one (if you'll run ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/packit/packit-service-fedmsg"},"fedmsg"),")"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"copr"),": would be nice to use ",(0,r.yg)("a",{parentName:"li",href:"https://copr.fedorainfracloud.org/api/"},"your own token")," if you're planning to build in Copr"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"id_ed25519[.pub]"),": replace with your ssh keys")),(0,r.yg)("p",null,"Not all services use all of them. For example ",(0,r.yg)("inlineCode",{parentName:"p"},"copr")," is needed only by ",(0,r.yg)("inlineCode",{parentName:"p"},"packit")," service."),(0,r.yg)("h2",{id:"encrypting-secrets-for-openshift-tests-in-testing-farm"},"Encrypting Secrets for OpenShift Tests in Testing Farm"),(0,r.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.yg)("p",null,"To run OpenShift tests triggered by Packit successfully, you need to encrypt the CRC Pull Secret."),(0,r.yg)("p",null,"When submitting a contribution PR where tests are executed, the encryption should be performed against your personal fork if the PR originates from your fork.\nOtherwise, encryption should be performed against the packit/deployment repository."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},(0,r.yg)("strong",{parentName:"p"},"Important:")," The encryption has a 448 character limit per secret. If your pull secret exceeds this limit, split it into multiple smaller chunks.")),(0,r.yg)("h3",{id:"obtaining-required-information"},"Obtaining Required Information"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"CRC Pull Secret"),': Access the pull secret from "Bitwarden \u2192 RH Portal account for Image Builder and OpenShift Local \u2192 Red Hat OpenShift Local Pull Secret"')),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Token ID"),": Use the public Packit testing farm token for the Public Ranch:\n",(0,r.yg)("inlineCode",{parentName:"p"},"0cfc00a8-94d7-4408-babc-4d0bc43821ea")))),(0,r.yg)("h3",{id:"encryption-process"},"Encryption Process"),(0,r.yg)("p",null,"For each part of your split secret, follow these steps:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Encrypt the secret part using the testing-farm CLI tool (if you don't have a ",(0,r.yg)("inlineCode",{parentName:"li"},"TESTING_FARM_API_TOKEN")," yet, create one ",(0,r.yg)("a",{parentName:"li",href:"https://testing-farm.io/tokens/"},"here"),"):")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"export TESTING_FARM_API_TOKEN=<your token>\ntesting-farm encrypt --token-id 0cfc00a8-94d7-4408-babc-4d0bc43821ea --git-url https://github.com/YOUR_USERNAME/deployment <crc_pull_secret_part>\n")),(0,r.yg)("ol",{start:2},(0,r.yg)("li",{parentName:"ol"},"Add the encrypted output to the corresponding ",(0,r.yg)("inlineCode",{parentName:"li"},"CRC_PULL_SECRET_PART_X")," list in the ",(0,r.yg)("inlineCode",{parentName:"li"},".testing-farm.yaml")," file in your repository.")),(0,r.yg)("h3",{id:"example-configuration-structure"},"Example Configuration Structure"),(0,r.yg)("p",null,"Your ",(0,r.yg)("inlineCode",{parentName:"p"},".testing-farm.yaml")," file should contain entries similar to:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'version: 1\nenvironments:\n  secrets:\n    CRC_PULL_SECRET_PART_1:\n      - "0cfc00a8-94d7-4408-babc-4d0bc43821ea,encrypted_string_here"\n    CRC_PULL_SECRET_PART_2:\n      - "0cfc00a8-94d7-4408-babc-4d0bc43821ea,another_encrypted_string_here"\n')),(0,r.yg)("p",null,"Make sure to replace ",(0,r.yg)("inlineCode",{parentName:"p"},"YOUR_USERNAME")," with your actual GitHub username in the git URL."))}y.isMDXComponent=!0}}]);