"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[4183],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(r),d=a,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},29259:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={title:"Koji builds",sidebar_position:3},i="job: upstream_koji_build",s={unversionedId:"configuration/upstream/upstream_koji_build",id:"configuration/upstream/upstream_koji_build",title:"Koji builds",description:"Create a SRPM from upstream and submit a scratch RPM build",source:"@site/docs/configuration/upstream/upstream_koji_build.md",sourceDirName:"configuration/upstream",slug:"/configuration/upstream/upstream_koji_build",permalink:"/docs/configuration/upstream/upstream_koji_build",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/configuration/upstream/upstream_koji_build.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Koji builds",sidebar_position:3},sidebar:"autogenerated",previous:{title:"Testing Farm",permalink:"/docs/configuration/upstream/tests"},next:{title:"VM Image Builds",permalink:"/docs/configuration/upstream/vm_image_build"}},p={},l=[{value:"Supported triggers",id:"supported-triggers",level:2},{value:"Optional parameters",id:"optional-parameters",level:2}],u={toc:l},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"job-upstream_koji_build"},(0,a.kt)("inlineCode",{parentName:"h1"},"job: upstream_koji_build")),(0,a.kt)("p",null,"Create a SRPM from upstream and submit a scratch RPM build\nto ",(0,a.kt)("a",{parentName:"p",href:"https://koji.fedoraproject.org/koji/"},"Fedora Koji")," build system."),(0,a.kt)("p",null,"At the moment it is not possible to run non-scratch Koji builds from upstream.\nFor more info, please see ",(0,a.kt)("a",{parentName:"p",href:"https://pagure.io/releng/issue/9801"},"the following issue"),"."),(0,a.kt)("p",null,"If you want to do official Koji builds, the sources need to be present in\ndist-git: job ",(0,a.kt)("a",{parentName:"p",href:"/docs/configuration/downstream/koji_build"},(0,a.kt)("inlineCode",{parentName:"a"},"koji_build"))," can take care of that."),(0,a.kt)("p",null,"(The job used to be called ",(0,a.kt)("inlineCode",{parentName:"p"},"production_build")," but we are deprecating that name in favour of\nthe more explicit ",(0,a.kt)("inlineCode",{parentName:"p"},"upstream_koji_build"),".)"),(0,a.kt)("h2",{id:"supported-triggers"},"Supported triggers"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"pull_request")," - check out content of the pull request"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"commit")," - reacts to new commits to the specified branch"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"release")," - check out content of the tag associated with the release")),(0,a.kt)("h2",{id:"optional-parameters"},"Optional parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"scratch")," - (boolean) used to create a scratch (test) build instead of the real production build"),(0,a.kt)("admonition",{parentName:"li",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Needs to be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," for upstream Koji builds."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"targets")," - (a list of) targets we want to build for,\nlist of supported targets can be listed using with ",(0,a.kt)("inlineCode",{parentName:"p"},"koji list-targets"),".\nYou can also use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/configuration#aliases"},"aliases provided by Packit"),"\nto not need to change the config file when the new system version is released.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"branch")," - the name of the branch we want to build for when using ",(0,a.kt)("strong",{parentName:"p"},"commit")," trigger\n(defaults to the repository's default branch) or target branch when using ",(0,a.kt)("strong",{parentName:"p"},"pull_request")," trigger\n(default behaviour is reacting to all pull requests in the repository)."))))}m.isMDXComponent=!0}}]);