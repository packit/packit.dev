"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[42448],{15680:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>m});var a=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,m=u["".concat(c,".").concat(d)]||u[d]||g[d]||r;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72527:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/statuses-8048b69ec99393dd77aaace7258dffff.png"},93499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(58168),o=(n(96540),n(15680));const r={title:"Introducing monorepository support",date:new Date("2023-07-04T07:20:06.000Z"),authors:"lbarczio",tags:["monorepos"]},i=void 0,p={permalink:"/posts/monorepos",editUrl:"https://github.com/packit/packit.dev/tree/main/posts/monorepos/index.md",source:"@site/posts/monorepos/index.md",title:"Introducing monorepository support",description:"We are very happy to announce a major enhancement to Packit! We have now added support for",date:"2023-07-04T07:20:06.000Z",formattedDate:"July 4, 2023",tags:[{label:"monorepos",permalink:"/posts/tags/monorepos"}],readingTime:2.27,hasTruncateMarker:!0,authors:[{name:"Laura Barcziov\xe1",email:"lbarczio@redhat.com",url:"https://github.com/lbarcziova",imageURL:"https://github.com/lbarcziova.png",key:"lbarczio"}],frontMatter:{title:"Introducing monorepository support",date:"2023-07-04T07:20:06.000Z",authors:"lbarczio",tags:["monorepos"]},prevItem:{title:"(Tests) job triggering improvements",permalink:"/posts/manual-triggering"},nextItem:{title:"Handling of Release field in propose_downstream job",permalink:"/posts/release-field-handling"}},c={authorsImageUrls:[void 0]},s=[{value:"Configuration",id:"configuration",level:2},{value:"Packit Service support",id:"packit-service-support",level:3},{value:"CLI support",id:"cli-support",level:3},{value:"Wrapping up",id:"wrapping-up",level:2}],l={toc:s},u="wrapper";function g(e){let{components:t,...r}=e;return(0,o.yg)(u,(0,a.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"We are very happy to announce a major enhancement to Packit! We have now added support for\nmonorepositories, enabling the integration of upstream repositories containing multiple downstream packages.\nIf you have a repository in the monorepo format, Packit can now help you automate the integration to downstream\ndistributions both from CLI and as a service."),(0,o.yg)("h2",{id:"configuration"},"Configuration"),(0,o.yg)("p",null,"Let's take a look at how a monorepository should be configured so that Packit can automate the process!"),(0,o.yg)("p",null,"The main addition to the Packit configuration file in the context of monorepositories are the keys\n",(0,o.yg)("a",{parentName:"p",href:"/docs/configuration#packages"},(0,o.yg)("inlineCode",{parentName:"a"},"packages"))," and ",(0,o.yg)("a",{parentName:"p",href:"/docs/configuration#paths"},(0,o.yg)("inlineCode",{parentName:"a"},"paths")),"."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"packages")," holds a dictionary of ",(0,o.yg)("inlineCode",{parentName:"p"},"{package_name: package_configuration}")," where package configuration can contain any keys\nthat were previously used as top-level keys for the standard (single) package configuration. The ",(0,o.yg)("inlineCode",{parentName:"p"},"paths")," can be defined\nin each ",(0,o.yg)("inlineCode",{parentName:"p"},"package_configuration")," and should hold a list of paths that should be considered for the particular package."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"packages")," section in the configuration can then look like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},"packages:\n  python-copr:\n    downstream_package_name: python-copr\n    upstream_package_name: copr\n    paths:\n      - ./python\n    specfile_path: python-copr.spec\n    files_to_sync:\n      - python-copr.spec\n\n  copr-cli:\n    downstream_package_name: copr-cli\n    upstream_package_name: copr-cli\n    paths:\n      - ./cli\n    specfile_path: copr-cli.spec\n    files_to_sync:\n      - copr-cli.spec\n\n  copr-backend:\n    downstream_package_name: copr-backend\n    upstream_package_name: copr-backend\n    paths:\n      - ./backend\n    specfile_path: copr-backend.spec\n    files_to_sync:\n      - copr-backend.spec\n")),(0,o.yg)("p",null,"That was the configuration of the packages and their locations in general, but how should these values then be utilised?"),(0,o.yg)("h3",{id:"packit-service-support"},"Packit Service support"),(0,o.yg)("p",null,"For the Packit Service jobs, there is one more addition to the configuration: the ",(0,o.yg)("a",{parentName:"p",href:"/docs/configuration/jobs#packages"},(0,o.yg)("inlineCode",{parentName:"a"},"packages"))," key again,\nthat can be used in each job and tells which packages should be considered for that particular job."),(0,o.yg)("p",null,"As a result, the repository in monorepo format could have jobs in the Packit configuration configured like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  - job: copr_build\n    packages:\n      - copr-backend\n      - copr-cli\n    trigger: pull_request\n    targets:\n      - fedora-all-x86_64\n    preserve_project: True\n\n  - job: copr_build\n    packages:\n      - python-copr\n    trigger: pull_request\n    targets:\n      - fedora-all-x86_64\n      - fedora-all-aarch64\n    manual_trigger: True\n")),(0,o.yg)("p",null,"And the commit statuses in GitHub/GitLab will also include the name of the package:\n",(0,o.yg)("img",{alt:"Monorepo statuses",src:n(72527).A,width:"879",height:"516"})),(0,o.yg)("h3",{id:"cli-support"},"CLI support"),(0,o.yg)("p",null,"As for the CLI, you can now for each command specify the ",(0,o.yg)("inlineCode",{parentName:"p"},"-p")," or ",(0,o.yg)("inlineCode",{parentName:"p"},"--packages")," argument followed by the package name\nand the scope of the command will take into consideration only the specified packages:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"packit build in-mock --package my-package-1 --package my-package-2\n")),(0,o.yg)("h2",{id:"wrapping-up"},"Wrapping up"),(0,o.yg)("p",null,"If you have a repository in the monorepo format, give it a try now and share your feedback with us!"),(0,o.yg)("p",null,"Going forward, we are about to implement the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/packit/packit-service/issues/2105"},"possibility of defining dependencies between jobs"),",\nallowing for even greater flexibility and control of monorepository jobs."),(0,o.yg)("p",null,"We are also happy to help with any contributions from the community to help us expand and refine the support with additional functionalities,\nsuch as ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/packit/packit-service/issues/2006"},"being able to define paths the service should react to"),"\nor ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/packit/packit/issues/1925"},"templating features"),"."))}g.isMDXComponent=!0}}]);