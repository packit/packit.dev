"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[16319],{15680:(e,n,a)=>{a.d(n,{xA:()=>u,yg:()=>m});var l=a(96540);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,l,t=function(e,n){if(null==e)return{};var a,l,t={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=l.createContext({}),p=function(e){var n=l.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},u=function(e){var n=p(e.components);return l.createElement(s.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var a=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),d=t,m=c["".concat(s,".").concat(d)]||c[d]||g[d]||r;return a?l.createElement(m,o(o({ref:n},u),{},{components:a})):l.createElement(m,o({ref:n},u))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=a.length,o=new Array(r);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:t,o[1]=i;for(var p=2;p<r;p++)o[p]=a[p];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},61758:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var l=a(58168),t=(a(96540),a(15680));const r={sidebar_label:"sources",title:"specfile.sources"},o=void 0,i={unversionedId:"api/specfile/sources",id:"api/specfile/sources",title:"specfile.sources",description:"Source",source:"@site/specfile/api/specfile/sources.md",sourceDirName:"api/specfile",slug:"/api/specfile/sources",permalink:"/specfile/api/specfile/sources",draft:!1,editUrl:"https://github.com/packit/specfile/tree/main/docs/specfile/api/specfile/sources.md",tags:[],version:"current",frontMatter:{sidebar_label:"sources",title:"specfile.sources"},sidebar:"autogenerated",previous:{title:"sourcelist",permalink:"/specfile/api/specfile/sourcelist"},next:{title:"spec_parser",permalink:"/specfile/api/specfile/spec_parser"}},s={},p=[{value:"Source",id:"source",level:2},{value:"number",id:"number",level:4},{value:"location",id:"location",level:4},{value:"expanded_location",id:"expanded_location",level:4},{value:"filename",id:"filename",level:4},{value:"remote",id:"remote",level:4},{value:"expanded_filename",id:"expanded_filename",level:4},{value:"comments",id:"comments",level:4},{value:"valid",id:"valid",level:4},{value:"TagSource",id:"tagsource",level:2},{value:"__init__",id:"__init__",level:4},{value:"number",id:"number-1",level:4},{value:"number_digits",id:"number_digits",level:4},{value:"location",id:"location-1",level:4},{value:"expanded_location",id:"expanded_location-1",level:4},{value:"filename",id:"filename-1",level:4},{value:"expanded_filename",id:"expanded_filename-1",level:4},{value:"comments",id:"comments-1",level:4},{value:"valid",id:"valid-1",level:4},{value:"ListSource",id:"listsource",level:2},{value:"__init__",id:"__init__-1",level:4},{value:"number",id:"number-2",level:4},{value:"location",id:"location-2",level:4},{value:"expanded_location",id:"expanded_location-2",level:4},{value:"filename",id:"filename-2",level:4},{value:"expanded_filename",id:"expanded_filename-2",level:4},{value:"comments",id:"comments-2",level:4},{value:"valid",id:"valid-2",level:4},{value:"Sources",id:"sources",level:2},{value:"__init__",id:"__init__-2",level:4},{value:"insert",id:"insert",level:4},{value:"insert_numbered",id:"insert_numbered",level:4},{value:"remove",id:"remove",level:4},{value:"remove_numbered",id:"remove_numbered",level:4},{value:"count",id:"count",level:4},{value:"Patch",id:"patch",level:2},{value:"TagPatch",id:"tagpatch",level:2},{value:"ListPatch",id:"listpatch",level:2},{value:"Patches",id:"patches",level:2}],u={toc:p},c="wrapper";function g(e){let{components:n,...a}=e;return(0,t.yg)(c,(0,l.A)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h2",{id:"source"},"Source"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class Source(ABC)\n")),(0,t.yg)("p",null,"Class that represents a source."),(0,t.yg)("h4",{id:"number"},"number"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef number() -> int\n")),(0,t.yg)("p",null,"Source number."),(0,t.yg)("h4",{id:"location"},"location"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef location() -> str\n")),(0,t.yg)("p",null,"Literal location of the source as stored in the spec file."),(0,t.yg)("h4",{id:"expanded_location"},"expanded","_","location"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef expanded_location() -> Optional[str]\n")),(0,t.yg)("p",null,"Location of the source after expanding macros."),(0,t.yg)("h4",{id:"filename"},"filename"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef filename() -> str\n")),(0,t.yg)("p",null,"Literal filename of the source."),(0,t.yg)("h4",{id:"remote"},"remote"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef remote() -> bool\n")),(0,t.yg)("p",null,"Whether the source is remote (location is URL)."),(0,t.yg)("h4",{id:"expanded_filename"},"expanded","_","filename"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef expanded_filename() -> Optional[str]\n")),(0,t.yg)("p",null,"Filename of the source after expanding macros."),(0,t.yg)("h4",{id:"comments"},"comments"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef comments() -> Comments\n")),(0,t.yg)("p",null,"List of comments associated with the source."),(0,t.yg)("h4",{id:"valid"},"valid"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef valid() -> bool\n")),(0,t.yg)("p",null,"Whether the source is not located in a false branch of a condition."),(0,t.yg)("h2",{id:"tagsource"},"TagSource"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class TagSource(Source)\n")),(0,t.yg)("p",null,"Class that represents a source backed by a spec file tag."),(0,t.yg)("h4",{id:"__init__"},"_","_","init","_","_"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def __init__(tag: Tag, number: Optional[int] = None) -> None\n")),(0,t.yg)("p",null,"Initializes a tag source object."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"tag")," - Tag that this source represents."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"number")," - Source number (in the case of implicit numbering).")),(0,t.yg)("h4",{id:"number-1"},"number"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef number() -> int\n")),(0,t.yg)("p",null,"Source number."),(0,t.yg)("h4",{id:"number_digits"},"number","_","digits"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef number_digits() -> int\n")),(0,t.yg)("p",null,"Gets number of digits in the source number."),(0,t.yg)("p",null,"Returns 0 if the source has no number, 1 if the source number\nhas no leading zeros and the actual number of digits if there are\nany leading zeros."),(0,t.yg)("h4",{id:"location-1"},"location"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef location() -> str\n")),(0,t.yg)("p",null,"Literal location of the source as stored in the spec file."),(0,t.yg)("h4",{id:"expanded_location-1"},"expanded","_","location"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef expanded_location() -> Optional[str]\n")),(0,t.yg)("p",null,"Location of the source after expanding macros."),(0,t.yg)("h4",{id:"filename-1"},"filename"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef filename() -> str\n")),(0,t.yg)("p",null,"Literal filename of the source."),(0,t.yg)("h4",{id:"expanded_filename-1"},"expanded","_","filename"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef expanded_filename() -> Optional[str]\n")),(0,t.yg)("p",null,"Filename of the source after expanding macros."),(0,t.yg)("h4",{id:"comments-1"},"comments"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef comments() -> Comments\n")),(0,t.yg)("p",null,"List of comments associated with the source."),(0,t.yg)("h4",{id:"valid-1"},"valid"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef valid() -> bool\n")),(0,t.yg)("p",null,"Whether the source is not located in a false branch of a condition."),(0,t.yg)("h2",{id:"listsource"},"ListSource"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class ListSource(Source)\n")),(0,t.yg)("p",null,"Class that represents a source backed by a line in a ",(0,t.yg)("em",{parentName:"p"},"%sourcelist")," section."),(0,t.yg)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def __init__(source: SourcelistEntry, number: int) -> None\n")),(0,t.yg)("p",null,"Initializes a list source object."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"source")," - ",(0,t.yg)("inlineCode",{parentName:"li"},"Sourcelist")," entry that this source represents."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"number")," - Source number.")),(0,t.yg)("h4",{id:"number-2"},"number"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef number() -> int\n")),(0,t.yg)("p",null,"Source number."),(0,t.yg)("h4",{id:"location-2"},"location"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef location() -> str\n")),(0,t.yg)("p",null,"Literal location of the source as stored in the spec file."),(0,t.yg)("h4",{id:"expanded_location-2"},"expanded","_","location"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef expanded_location() -> str\n")),(0,t.yg)("p",null,"Location of the source after expanding macros."),(0,t.yg)("h4",{id:"filename-2"},"filename"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef filename() -> str\n")),(0,t.yg)("p",null,"Literal filename of the source."),(0,t.yg)("h4",{id:"expanded_filename-2"},"expanded","_","filename"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef expanded_filename() -> str\n")),(0,t.yg)("p",null,"Filename of the source after expanding macros."),(0,t.yg)("h4",{id:"comments-2"},"comments"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef comments() -> Comments\n")),(0,t.yg)("p",null,"List of comments associated with the source."),(0,t.yg)("h4",{id:"valid-2"},"valid"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"@property\ndef valid() -> bool\n")),(0,t.yg)("p",null,"Whether the source is not located in a false branch of a condition."),(0,t.yg)("h2",{id:"sources"},"Sources"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class Sources(collections.abc.MutableSequence)\n")),(0,t.yg)("p",null,"Class that represents a sequence of all sources."),(0,t.yg)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},'def __init__(tags: Tags,\n             sourcelists: List[Sourcelist],\n             allow_duplicates: bool = False,\n             default_to_implicit_numbering: bool = False,\n             default_source_number_digits: int = 1,\n             context: Optional["Specfile"] = None) -> None\n')),(0,t.yg)("p",null,"Initializes a sources object."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"tags")," - All spec file tags."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"sourcelists")," - List of all %sourcelist sections."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"allow_duplicates")," - Whether to allow duplicate entries when adding new sources."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"default_to_implicit_numbering")," - Use implicit numbering (no source numbers) by default."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"default_source_number_digits")," - Default number of digits in a source number."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"context")," - ",(0,t.yg)("inlineCode",{parentName:"li"},"Specfile")," instance that defines the context for macro expansions.")),(0,t.yg)("h4",{id:"insert"},"insert"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def insert(i: int, location: str) -> None\n")),(0,t.yg)("p",null,"Inserts a new source at a specified index."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"i")," - Requested index."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"location")," - Location of the new source.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Raises"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"DuplicateSourceException")," - If duplicates are disallowed and there\nalready is a source with the same location.")),(0,t.yg)("h4",{id:"insert_numbered"},"insert","_","numbered"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def insert_numbered(number: int, location: str) -> int\n")),(0,t.yg)("p",null,"Inserts a new source with the specified number."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"number")," - Number of the new source."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"location")," - Location of the new source.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returns"),":"),(0,t.yg)("p",null,"  Index of the newly inserted source."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Raises"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"DuplicateSourceException")," - If duplicates are disallowed and there\nalready is a source with the same location.")),(0,t.yg)("h4",{id:"remove"},"remove"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def remove(location: str) -> None\n")),(0,t.yg)("p",null,"Removes sources by location."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"location")," - Location of the sources to be removed.")),(0,t.yg)("h4",{id:"remove_numbered"},"remove","_","numbered"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def remove_numbered(number: int) -> None\n")),(0,t.yg)("p",null,"Removes a source by number."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"number")," - Number of the source to be removed.")),(0,t.yg)("h4",{id:"count"},"count"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"def count(location: str) -> int\n")),(0,t.yg)("p",null,"Counts sources by location."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Arguments"),":"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"location")," - Location of the sources to be counted.")),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Returns"),":"),(0,t.yg)("p",null,"  Number of sources with the specified location."),(0,t.yg)("h2",{id:"patch"},"Patch"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class Patch(Source)\n")),(0,t.yg)("p",null,"Class that represents a patch."),(0,t.yg)("h2",{id:"tagpatch"},"TagPatch"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class TagPatch(TagSource, Patch)\n")),(0,t.yg)("p",null,"Class that represents a patch backed by a spec file tag."),(0,t.yg)("h2",{id:"listpatch"},"ListPatch"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class ListPatch(ListSource, Patch)\n")),(0,t.yg)("p",null,"Class that represents a patch backed by a line in a ",(0,t.yg)("em",{parentName:"p"},"%patchlist")," section."),(0,t.yg)("h2",{id:"patches"},"Patches"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-python"},"class Patches(Sources)\n")),(0,t.yg)("p",null,"Class that represents a sequence of all patches."))}g.isMDXComponent=!0}}]);