"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[47031],{15680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>y});var n=t(96540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),c=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),f=a,y=u["".concat(i,".").concat(f)]||u[f]||g[f]||o;return t?n.createElement(y,l(l({ref:r},p),{},{components:t})):n.createElement(y,l({ref:r},p))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},53984:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(58168),a=(t(96540),t(15680));const o={title:"Celery Canvas",authors:"lbarcziova"},l=void 0,s={unversionedId:"workflow-engines/celery-canvas",id:"workflow-engines/celery-canvas",title:"Celery Canvas",description:"- docs//docs.celeryq.dev/en/stable/userguide/canvas.html",source:"@site/research/workflow-engines/celery-canvas.md",sourceDirName:"workflow-engines",slug:"/workflow-engines/celery-canvas",permalink:"/research/workflow-engines/celery-canvas",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/workflow-engines/celery-canvas.md",tags:[],version:"current",frontMatter:{title:"Celery Canvas",authors:"lbarcziova"},sidebar:"autogenerated",previous:{title:"Argo Workflows",permalink:"/research/workflow-engines/argo-workflows"},next:{title:"Prefect",permalink:"/research/workflow-engines/prefect"}},i={},c=[{value:"Chains",id:"chains",level:2}],p={toc:c},u="wrapper";function g(e){let{components:r,...t}=e;return(0,a.yg)(u,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"docs: ",(0,a.yg)("a",{parentName:"li",href:"https://docs.celeryq.dev/en/stable/userguide/canvas.html"},"https://docs.celeryq.dev/en/stable/userguide/canvas.html")),(0,a.yg)("li",{parentName:"ul"},"provides capabilities to build simple workflows"),(0,a.yg)("li",{parentName:"ul"},"it is possible to define e.g. serial execution, in parallel, in group")),(0,a.yg)("h2",{id:"chains"},"Chains"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"tasks can be linked together: the linked task is called when the task returns successfully"),(0,a.yg)("li",{parentName:"ul"},"example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},"from celery import chain\nfrom task import task_a, task_b, task_c\n\nwork_flow = chain(task_a(arg1, arg2), task_b(result, arg4, arg5), task_c(arg6, arg7))\n\n# another way\n\ns = task_a.s(arg1, arg2)\ns.link(task_b.s(arg4, arg5))\n\n# another way using pipes\nwork_flow = task_a(arg1, arg2) | task_b(result, arg4) | task_c(arg5, arg6)\n\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"we would only write code on top of existing one, for handling the dependant tasks, no need\nfor deployment changes"),(0,a.yg)("li",{parentName:"ul"},"post describing the capabilities in detail: ",(0,a.yg)("a",{parentName:"li",href:"https://dev.to/akarshan/the-curious-case-of-celery-work-flows-39f7"},"https://dev.to/akarshan/the-curious-case-of-celery-work-flows-39f7"))))}g.isMDXComponent=!0}}]);