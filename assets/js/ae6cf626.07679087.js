"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[62360],{15680:(e,r,t)=>{t.d(r,{xA:()=>u,yg:()=>m});var n=t(96540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(t),f=i,m=l["".concat(c,".").concat(f)]||l[f]||d[f]||o;return t?n.createElement(m,a(a({ref:r},u),{},{components:t})):n.createElement(m,a({ref:r},u))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=f;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[l]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},56064:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=t(58168),i=(t(96540),t(15680));const o={title:"prepare-sources",date:"2021-12-8",sidebar_position:8},a="packit prepare-sources",s={unversionedId:"cli/prepare-sources",id:"cli/prepare-sources",title:"prepare-sources",description:"Prepares sources for a new SRPM build using the content of the upstream repository.",source:"@site/docs/cli/prepare-sources.md",sourceDirName:"cli",slug:"/cli/prepare-sources",permalink:"/docs/cli/prepare-sources",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/cli/prepare-sources.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"prepare-sources",date:"2021-12-8",sidebar_position:8},sidebar:"autogenerated",previous:{title:"propose-downstream",permalink:"/docs/cli/propose-downstream"},next:{title:"pull-from-upstream",permalink:"/docs/cli/pull-from-upstream"}},c={},p=[{value:"Requirements",id:"requirements",level:2},{value:"Help",id:"help",level:2}],u={toc:p},l="wrapper";function d(e){let{components:r,...t}=e;return(0,i.yg)(l,(0,n.A)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"packit-prepare-sources"},(0,i.yg)("inlineCode",{parentName:"h1"},"packit prepare-sources")),(0,i.yg)("p",null,"Prepares sources for a new SRPM build using the content of the upstream repository.\nApplies the same as for ",(0,i.yg)("inlineCode",{parentName:"p"},"packit srpm"),", but instead of building a SRPM in the end,\nprepared sources are moved to the ",(0,i.yg)("inlineCode",{parentName:"p"},"result-dir"),"."),(0,i.yg)("h2",{id:"requirements"},"Requirements"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Upstream project is using git."),(0,i.yg)("li",{parentName:"ul"},"Packit config file placed in the upstream repository.")),(0,i.yg)("h2",{id:"help"},"Help"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"Usage: packit prepare-sources [OPTIONS] [PATH_OR_URL]\n\n  Prepare sources for a new SRPM build using content of the upstream\n  repository. Determine version, create an archive or download upstream and\n  create patches for sourcegit, fix/update the specfile to use the right\n  archive, download the remote sources. Behaviour can be customized by\n  specifying actions (post-upstream-clone, get-current-version, create-\n  archive, create-patches, fix-spec-file) in the configuration.\n\n  PATH_OR_URL argument is a local path or a URL to the upstream git\n  repository, it defaults to the current working directory\n\nOptions:\n  --result-dir DIR                Copy the sources into DIR. By default,\n                                  `prepare_sources_result` directory in the\n                                  current working directory is created.\n  --upstream-ref TEXT             Git ref of the last upstream commit in the\n                                  current branch from which packit should\n                                  generate patches (this option implies the\n                                  repository is source-git).\n  --merged-ref TEXT               Git ref used to identify correct most recent\n                                  tag.\n  --update-release / --no-update-release\n                                  Specifies whether to update Release.\n                                  Defaults to value set in configuration,\n                                  which defaults to yes.\n  --bump / --no-bump              Deprecated. Use --[no-]update-release\n                                  instead.\n  --release-suffix TEXT           Specifies release suffix. Allows to override\n                                  default generated:{current_time}.{sanitized_\n                                  current_branch}{git_desc_suffix}\n  --default-release-suffix        Allows to use default, packit-generated,\n                                  release suffix when some release_suffix is\n                                  specified in the configuration.\n  --job-config-index INTEGER      Internal option to override package config\n                                  found in the repository with job config with\n                                  given index (needed for packit service).\n  --ref TEXT                      Git reference to checkout.\n  --pr-id TEXT                    Specifies PR to checkout.\n  --merge-pr / --no-merge-pr      Specifies whether to merge PR into the base\n                                  branch in case pr-id is specified.\n  --target-branch TEXT            Specifies target branch which PR should be\n                                  merged into.\n  --create-symlinks / --no-create-symlinks\n                                  Specifies whether Packit should create\n                                  symlinks or copy the files (e.g. archive\n                                  outside specfile dir).\n  -p, --package TEXT              Package to prepare, if more than one\n                                  available, like in a monorepo configuration.\n                                  Use it multiple times to select multiple\n                                  packages.Defaults to all the packages listed\n                                  inside the config.\n  -h, --help                      Show this message and exit.\n")))}d.isMDXComponent=!0}}]);