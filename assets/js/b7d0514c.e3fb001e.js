"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[40675],{4022:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/distgit_pr_detail-e34816e0dd354d7b35afc8131f517551.png"},8006:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/distgit_pr_specfile-134e1c00d39c6afb809ae31a5af19d66.png"},15680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>g});var n=a(96540);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),m=i,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return a?n.createElement(g,o(o({ref:t},c),{},{components:a})):n.createElement(g,o({ref:t},c))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},43839:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/bodhi_update_detail-c18320c042648314d31a9b4609aec94b.png"},44384:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/bodhi_updates-bb4320cda3965b1d3feff7b14e561373.png"},55616:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/upstream_release-529c0916055286b228c4e1b631529fa4.png"},59237:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/distgit_prs-cf5788b3b23d52d771960621f308eab8.png"},71284:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/distgit_pr_build_status-3f4561f6c2fbdaaf76616bd060e80b23.png"},79764:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var n=a(58168),i=(a(96540),a(15680));const r={title:"Downstream automation is here",date:new Date("2022-05-06T00:00:00.000Z"),authors:"flachman",tags:["propose-downstream"]},o="Downstream automation is here",s={permalink:"/posts/downstream-automation",editUrl:"https://github.com/packit/packit.dev/tree/main/posts/downstream-automation/index.md",source:"@site/posts/downstream-automation/index.md",title:"Downstream automation is here",description:"Finally, it's here. Now, you can do the whole Fedora release with the help of Packit.",date:"2022-05-06T00:00:00.000Z",formattedDate:"May 6, 2022",tags:[{label:"propose-downstream",permalink:"/posts/tags/propose-downstream"}],readingTime:3.265,hasTruncateMarker:!0,authors:[{name:"Franti\u0161ek Lachman",email:"flachman@redhat.com",url:"https://github.com/lachmanfrantisek",imageURL:"https://github.com/lachmanfrantisek.png",key:"flachman"}],frontMatter:{title:"Downstream automation is here",date:"2022-05-06T00:00:00.000Z",authors:"flachman",tags:["propose-downstream"]},prevItem:{title:"Automation of FAS verification in Packit Service",permalink:"/posts/fas-verification-automation"},nextItem:{title:"Building SRPMs in Copr",permalink:"/posts/copr-srpms"}},l={authorsImageUrls:[void 0]},p=[{value:"Upstream",id:"upstream",level:2},{value:"Propose downstream",id:"propose-downstream",level:2},{value:"Koji",id:"koji",level:2},{value:"Bodhi",id:"bodhi",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(d,(0,n.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Finally, it's here. Now, you can do the whole Fedora release with the help of Packit.\nLet's take a look at how it works on an example of ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/packit/ogr"},"OGR"),", the Python library we develop."),(0,i.yg)("h2",{id:"upstream"},"Upstream"),(0,i.yg)("p",null,"The process of releasing a new version starts in the upstream repository.\nHere, we can see an upstream release:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Upstream release",src:a(55616).A,width:"1108",height:"588"})),(0,i.yg)("h2",{id:"propose-downstream"},"Propose downstream"),(0,i.yg)("p",null,"As the first step on our way to Fedora users, we need to get the new upstream release to the Fedora dist-git.\nThis is what we call ",(0,i.yg)("inlineCode",{parentName:"p"},"propose-downstream")," job.\nHere is a snippet from the config file of OGR:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: python-ogr\ncopy_upstream_release_description: true\n\njobs:\n  - job: propose_downstream\n    trigger: release\n    dist_git_branches:\n      - fedora-all\n      - epel-8\n")),(0,i.yg)("p",null,"How does the ",(0,i.yg)("inlineCode",{parentName:"p"},"propose-downstream")," work?\nAs a first step, the archive is saved to lookaside cache\nand after that, Packit updates the dist-git content (mainly ",(0,i.yg)("inlineCode",{parentName:"p"},"sources")," file and spec-file)\nvia pull-requests for the specified branches. (Direct push is possible only for CLI by setting a\n",(0,i.yg)("a",{parentName:"p",href:"https://packit.dev/docs/configuration/#create_pr"},(0,i.yg)("inlineCode",{parentName:"a"},"create_pr")," option")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"false"),".)"),(0,i.yg)("p",null,"If you use ",(0,i.yg)("a",{parentName:"p",href:"https://packit.dev/docs/configuration/#copy_upstream_release_description"},(0,i.yg)("inlineCode",{parentName:"a"},"copy_upstream_release_description: true")),",\nas in the config above,\nthe changelog entry will use the GitHub/GitLab release description field.\n(Just make sure the formatting is compatible with spec-file.\nE.g. use ",(0,i.yg)("inlineCode",{parentName:"p"},"-")," instead of ",(0,i.yg)("inlineCode",{parentName:"p"},"*")," for lists to not create multiple changelog entries.)"),(0,i.yg)("p",null,"And how is it triggered?\nPackit gets the information about the newly created release from GitHub/GitLab (via webhook),\nloads the config from the release commit and if there is a ",(0,i.yg)("inlineCode",{parentName:"p"},"propose-downstream")," job\ndefined, the workflow begins."),(0,i.yg)("p",null,"Here are the pull-requests created by Packit:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"List of downstream pull-requests created by Packit",src:a(59237).A,width:"1089",height:"420"})),(0,i.yg)("p",null,"And here are the details of the one created for ",(0,i.yg)("inlineCode",{parentName:"p"},"f35")," branch:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Downstream pull-request created by Packit",src:a(4022).A,width:"736",height:"409"}),"\n",(0,i.yg)("img",{alt:"Downstream pull-request created by Packit: changes in specfile",src:a(8006).A,width:"1094",height:"734"})),(0,i.yg)("p",null,"Now, it's on downstream CI systems and maintainer to check the changes and merge\nthe pull-request."),(0,i.yg)("h2",{id:"koji"},"Koji"),(0,i.yg)("p",null,"If Packit sees a new commit in the configured dist-git branch, it submits a new build in Koji\nlike maintainers usually do. (The commits without any spec-file change are skipped.)"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"List of Koji builds triggered by Packit",src:a(87182).A,width:"965",height:"141"})),(0,i.yg)("p",null,"Here is a job definition for the package we use as an example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  - job: koji_build\n    trigger: commit\n    dist_git_branches:\n      - fedora-all\n      - epel-8\n")),(0,i.yg)("p",null,"There is no UI provided by Packit for the job,\nbut it is visible across Fedora systems (like you can see in the following image)\nlike a manually created Koji build and you can utilise\n",(0,i.yg)("a",{parentName:"p",href:"https://apps.fedoraproject.org/notifications/about"},"Fedora Notifications"),"\nto get informed about the builds."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Build status in merged downstream pull-request",src:a(71284).A,width:"725",height:"499"})),(0,i.yg)("h2",{id:"bodhi"},"Bodhi"),(0,i.yg)("p",null,"Once Packit is informed (via fedora-messaging bus) about the successful Koji build,\nit creates a new update in Bodhi for you."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"List of Bodhi updates created by Packit",src:a(44384).A,width:"992",height:"222"})),(0,i.yg)("p",null,"Here is a job definition:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n  - job: bodhi_update\n    trigger: commit\n    dist_git_branches:\n      - fedora-branched # rawhide updates are created automatically\n      - epel-8\n")),(0,i.yg)("p",null,"The packit config is loaded from the commit the build is triggered from."),(0,i.yg)("p",null,"Here is an example of the resulting Bodhi update:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Bodhi update created by Packit",src:a(43839).A,width:"743",height:"266"})),(0,i.yg)("p",null,"And that's all. The rest is on the users and maintainers to give the update enough Karma\nso the update gets to the users."),(0,i.yg)("h2",{id:"conclusion"},"Conclusion"),(0,i.yg)("p",null,"Does it look simple? Yes, it is. We try to automate\nas much as possible but still leave the space for human intervention where it is needed --\npull-request review and verification of the Bodhi update.\nOf course, in case of some errors, a human can (and should)\nreplace the work of a bot.\nOther manual, mundane and waiting tasks are replaced by Packit."),(0,i.yg)("p",null,"Please, try it yourself and let us know what do you think.\nThose jobs are really new and some issues might occur.\nBut we will try to fix those and if you have any suggestions\nfor improvement, please, ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/packit/packit-service/issues/new/choose"},"create an issue")," so we can\nsee if the request is doable and we can try to implement it.\nAnd of course, code contribution is more than welcome as well."))}u.isMDXComponent=!0},87182:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/koji_builds-2f1af2ff0b81650da2cef9d25fcdaae4.png"}}]);