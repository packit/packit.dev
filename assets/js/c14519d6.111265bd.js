"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[29558],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>m});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),g=o,m=d["".concat(p,".").concat(g)]||d[g]||u[g]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},85040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(58168),o=(n(96540),n(15680));const i={title:"Setting up cross-project testing",sidebar_position:10},a="Setting up cross-project testing",s={unversionedId:"cross-project-testing",id:"cross-project-testing",title:"Setting up cross-project testing",description:"Cross-project testing enables you to ensure the compatibility and reliability of interconnected repositories.",source:"@site/docs/cross-project-testing.md",sourceDirName:".",slug:"/cross-project-testing",permalink:"/docs/cross-project-testing",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/cross-project-testing.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Setting up cross-project testing",sidebar_position:10},sidebar:"autogenerated",previous:{title:"Pre-releases",permalink:"/docs/pre-releases"},next:{title:"Generated code in upstream archives",permalink:"/docs/archive-not-matching-git"}},p={},l=[{value:"Configuring Packit builds on commits of the dependent repository",id:"configuring-packit-builds-on-commits-of-the-dependent-repository",level:3},{value:"Configuring the test plan",id:"configuring-the-test-plan",level:3},{value:"Configuring the Packit test job",id:"configuring-the-packit-test-job",level:3}],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"setting-up-cross-project-testing"},"Setting up cross-project testing"),(0,o.yg)("p",null,"Cross-project testing enables you to ensure the compatibility and reliability of interconnected repositories.\nAnd with a little bit of configuration on Packit and tmt parts, it can be easily automated within Packit!"),(0,o.yg)("p",null,"Big kudos to ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/martinpitt/"},"Martin Pitt")," who experimented with these settings in\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cockpit-project/"},(0,o.yg)("inlineCode",{parentName:"a"},"cockpit")," repositories")," and wrote an amazing blog post about it!\nIf you are interested in all the details, make sure to read the\n",(0,o.yg)("a",{parentName:"p",href:"https://cockpit-project.org/blog/tmt-cross-project-testing.html"},"full blog post"),". Alternatively, the following sections\nwill describe the needed configuration for setting it up."),(0,o.yg)("p",null,"After determining the dependency (or dependencies) you want to test, the configuration is relatively easy:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"For the dependent repository, Packit should be configured to build every commit of the ",(0,o.yg)("inlineCode",{parentName:"li"},"main")," branch, or any other\nsimilar branch containing recent changes, into a dedicated Copr repository."),(0,o.yg)("li",{parentName:"ol"},"For the dependency repository, you should add a separate Packit test job with a tmt test plan to run on all pull requests. ")),(0,o.yg)("p",null,"Let's break down these steps using examples from the ",(0,o.yg)("inlineCode",{parentName:"p"},"cockpit")," setup (where ",(0,o.yg)("inlineCode",{parentName:"p"},"cockpit-podman")," depends on the ",(0,o.yg)("inlineCode",{parentName:"p"},"cockpit")," repo)!"),(0,o.yg)("h3",{id:"configuring-packit-builds-on-commits-of-the-dependent-repository"},"Configuring Packit builds on commits of the dependent repository"),(0,o.yg)("p",null,"The goal here is to build the most recent code (usually in the ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," branch) of the repo in a dedicated Copr repository,\nwhich can be easily done using Packit.\nFirstly a new dedicated ",(0,o.yg)("a",{parentName:"p",href:"https://copr.fedorainfracloud.org"},"Copr")," project needs to be created and configured as needed.\nFor Packit to build in this project, the ",(0,o.yg)("inlineCode",{parentName:"p"},"Packit allowed forge projects")," needs to be filled as well."),(0,o.yg)("p",null,"Then you can configure a Packit ",(0,o.yg)("inlineCode",{parentName:"p"},"copr_build")," job to do a build in the new Copr repo for each commit that lands in the desired\nbranch of the dependent repo (in this example ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," branch of ",(0,o.yg)("inlineCode",{parentName:"p"},"cockpit-podman"),"):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'- job: copr_build\n  trigger: commit\n  branch: "^main$"\n  owner: "@cockpit"\n  project: "main-builds"\n  preserve_project: True\n')),(0,o.yg)("p",null,"You will need to approve the ",(0,o.yg)("inlineCode",{parentName:"p"},"packit")," Copr user to be able to trigger builds in the Copr repo. "),(0,o.yg)("p",null,"The additional details of the setup are described ",(0,o.yg)("a",{parentName:"p",href:"/docs/configuration/upstream/copr_build#using-a-custom-copr-project"},"here"),"."),(0,o.yg)("h3",{id:"configuring-the-test-plan"},"Configuring the test plan"),(0,o.yg)("p",null,"After that, a new test plan ",(0,o.yg)("inlineCode",{parentName:"p"},"plans/<your-project>.fmf")," needs to be added to the dependency repository, which selects the\ntests you want to run from this repo. Unfortunately, it is impossible to auto-import all plans\nat the moment (but this may be useful since you can select a subset of tests that apply to the tested dependency)."),(0,o.yg)("p",null,"So this is mostly a copy of the dependent repo test plan, with one modification: they should not run by default,\nbut only in a ",(0,o.yg)("inlineCode",{parentName:"p"},"revdeps")," tmt context. The test plan can then look like this (an example from ",(0,o.yg)("inlineCode",{parentName:"p"},"cockpit"),"):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'# reverse dependency test\nenabled: false\n\nadjust+:\n  when: revdeps == yes\n  enabled: true\n\ndiscover:\n    how: fmf\n    url: https://github.com/cockpit-project/cockpit-podman\n    ref: "main"\nexecute:\n    how: tmt\n\n/podman-system:\n    summary: Run cockpit-podman system tests\n    discover+:\n        test: /test/browser/system\n\n# ... possibly more test plans here\n')),(0,o.yg)("p",null,"For the other plans in this repository, you should mark it to not run in the ",(0,o.yg)("inlineCode",{parentName:"p"},"revdeps")," scenario:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},"adjust+:\n  when: revdeps == yes\n  enabled: false\n")),(0,o.yg)("h3",{id:"configuring-the-packit-test-job"},"Configuring the Packit test job"),(0,o.yg)("p",null,"Finally, to plug everything together, a Packit test job needs to be configured that will run the ",(0,o.yg)("inlineCode",{parentName:"p"},"revdeps")," context test plan\nagainst the builds from ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," branch of the dependent repo by specifying ",(0,o.yg)("a",{parentName:"p",href:"https://packit.dev/docs/configuration/upstream/tests#optional-parameters"},(0,o.yg)("inlineCode",{parentName:"a"},"tf_extra_params")),".\nThe key here is to install the latest ",(0,o.yg)("inlineCode",{parentName:"p"},"main")," build from the dependency: we are making sure we are not breaking ",(0,o.yg)("inlineCode",{parentName:"p"},"cockpit"),".\nMake sure to also give it a meaningful ",(0,o.yg)("inlineCode",{parentName:"p"},"identifier")," so that you can differentiate the statuses:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'  - job: tests\n    identifier: revdeps\n    trigger: pull_request\n    targets:\n      - fedora-latest-stable\n    tf_extra_params:\n      environments:\n        - artifacts:\n          - type: repository-file\n            id: https://copr.fedorainfracloud.org/coprs/g/cockpit/main-builds/repo/fedora-$releasever/group_cockpit-main-builds-fedora-$releasever.repo\n          tmt:\n            context:\n              revdeps: "yes"\n')))}u.isMDXComponent=!0}}]);