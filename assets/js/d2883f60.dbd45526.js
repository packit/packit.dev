"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[58452],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>y});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,y=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return r?a.createElement(y,s(s({ref:t},c),{},{components:r})):a.createElement(y,s({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:n,s[1]=o;for(var u=2;u<i;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},25971:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=r(58168),n=(r(96540),r(15680));const i={title:"Error Budgets",authors:"jpopelka"},s=void 0,o={unversionedId:"monitoring/error-budgets/users-expectations",id:"monitoring/error-budgets/users-expectations",title:"Error Budgets",description:"Users expectations",source:"@site/research/monitoring/error-budgets/users-expectations.md",sourceDirName:"monitoring/error-budgets",slug:"/monitoring/error-budgets/users-expectations",permalink:"/research/monitoring/error-budgets/users-expectations",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/monitoring/error-budgets/users-expectations.md",tags:[],version:"current",frontMatter:{title:"Error Budgets",authors:"jpopelka"},sidebar:"autogenerated",previous:{title:"Definitions of SLOs and SLIs for Packit",permalink:"/research/monitoring/error-budgets/SLOs-SLIs"},next:{title:"GitHub API Call Rate Limits",permalink:"/research/monitoring/github-api-call-inventory/"}},l={},u=[{value:"Users expectations",id:"users-expectations",level:2},{value:"latency",id:"latency",level:3},{value:"reliability / error rate",id:"reliability--error-rate",level:3},{value:"availability",id:"availability",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.yg)(p,(0,a.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"users-expectations"},"Users expectations"),(0,n.yg)("p",null,"To adopt ",(0,n.yg)("a",{parentName:"p",href:"/research/monitoring/error-budgets"},"Error Budget")," for Packit Service we asked our users\nto provide their feedback on what they expect from the service in areas of\nreliability, availability, performance, etc."),(0,n.yg)("p",null,"The responses are classified into several objectives:"),(0,n.yg)("h3",{id:"latency"},"latency"),(0,n.yg)("p",null,"In what timeframe users expect first response from the service."),(0,n.yg)("p",null,'I got first reply from mpitt & mmarusak and they suggested to have some\n"accepted" status ASAP. I liked the idea so I asked the other users about\nthat as well.'),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},'Packit should be reasonably quick to post status to Github - just to let us\nknow it was recognized and it will be dealt with. This should be measured in\n"a couple of seconds". I would assume there is some queue where you keep tasks\nthat will be run. If that is the case, then I would say there should be some\nlimit on how much time a task spends in a queue waiting for a free worker.\nWhile posting status should take at most a couple of seconds, this should take\na maximum of "a couple of minutes" and then the task should be running. (mmarusak)'),(0,n.yg)("li",{parentName:"ul"},'95% of "pending" statuses get sent to a PR within 30s, 99.5% of them within 10 minutes.(mpitt)'),(0,n.yg)("li",{parentName:"ul"},'Max several minutes. If there was some "accepted" status, then he\'d expect\nto see it within 5s. (jkonecny)'),(0,n.yg)("li",{parentName:"ul"},'Max 10 minutes. "accepted" status would be handy within 1min. (jrodak)'),(0,n.yg)("li",{parentName:"ul"},'Max 5 minutes. "accepted" 30s max.(vtrefny)'),(0,n.yg)("li",{parentName:"ul"},'mbocek expects some response in several minutes. Doesn\'t need any separate "accepted" status.'),(0,n.yg)("li",{parentName:"ul"},'Have "pending" state ASAP as indication that the request was accepted and\nthen we can wait minutes - hours before results are returned. (fsumsal)')),(0,n.yg)("h3",{id:"reliability--error-rate"},"reliability / error rate"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"A ",(0,n.yg)("inlineCode",{parentName:"li"},"/packit build")," request requeues the test in 95% of cases, and retrying a\nfailed requeue a second time then succeeds in 99.5% of all cases. (mpitt)"),(0,n.yg)("li",{parentName:"ul"},"95% of all test requests finish, i.e. get queued, sandcastle starts building\nthe srpm, hands it to COPR, then hands it to TF, and that provisions an\ninstance and collects the logs. 5% failure rate is pretty high as a user,\nbut let's start with modest goals and improve in the future. There's always\n",(0,n.yg)("inlineCode",{parentName:"li"},"/packit build")," for self-service retries. (mpitt)"),(0,n.yg)("li",{parentName:"ul"},"Error rate max 10%. The bugs are expected to be fixed within day(s). (jkonecny)"),(0,n.yg)("li",{parentName:"ul"},"95% (jrodak)"),(0,n.yg)("li",{parentName:"ul"},"Units of fails monthly. (vtrefny)"),(0,n.yg)("li",{parentName:"ul"},"mbocek would ping us in case of any errors, but would probably survive some\nerrors since he's probably able to manually work-around it for some time."),(0,n.yg)("li",{parentName:"ul"},"fsumsal doesn't expect 100% reliability. Can't say any percentage,\nbut current stability/reliability is more than satisfactory. It's nice that\njobs can be easily restarted (would be even better if individual jobs could be restarted).")),(0,n.yg)("h3",{id:"availability"},"availability"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"99.9% availability of the webhook for controlling GitHub events (PRs and\n",(0,n.yg)("inlineCode",{parentName:"li"},"/packit")," commands), i.e. 10 min downtime/month (mpitt)"),(0,n.yg)("li",{parentName:"ul"},"85% (jkonecny)"),(0,n.yg)("li",{parentName:"ul"},"90%, downtime max 1 day in one PR. (jrodak)"),(0,n.yg)("li",{parentName:"ul"},"No big problem if the service is unavailable for couple of hours up to a day (vtrefny)"),(0,n.yg)("li",{parentName:"ul"},"Max like 2 days in a month, i.e. 93% (mbocek)"),(0,n.yg)("li",{parentName:"ul"},"Depends whether the downtime is planned or not, i.e. it's better over weekend\nthan during week. Anyway 1% sounds reasonable, esp. if it's out of \"peak hours\". (fsumsal)"),(0,n.yg)("li",{parentName:"ul"},"Dashboard is expected to be up and showing production data 99.5% of all times\n(50 min downtime/week) -- again this seems rather modest, but let's start\nsomewhere. I find this dashboard really useful. (mpitt)")))}d.isMDXComponent=!0}}]);