"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[51906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=r,m=h["".concat(c,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[h]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={title:"Generated code in upstream archives",sidebar_position:11},i="When the release archive does not match the upstream git tag checkout",s={unversionedId:"archive-not-matching-git",id:"archive-not-matching-git",title:"Generated code in upstream archives",description:"This document covers a scenario when an upstream project has a script to create",source:"@site/docs/archive-not-matching-git.md",sourceDirName:".",slug:"/archive-not-matching-git",permalink:"/docs/archive-not-matching-git",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/archive-not-matching-git.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Generated code in upstream archives",sidebar_position:11},sidebar:"autogenerated",previous:{title:"Setting up cross-project testing",permalink:"/docs/cross-project-testing"},next:{title:"Reproduce CI environment locally",permalink:"/docs/reproduce-locally"}},c={},l=[{value:"The solution",id:"the-solution",level:2},{value:"Variant 1",id:"variant-1",level:2},{value:"Variant 2",id:"variant-2",level:2},{value:"Variant 3",id:"variant-3",level:2}],p={toc:l},h="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"when-the-release-archive-does-not-match-the-upstream-git-tag-checkout"},"When the release archive does not match the upstream git tag checkout"),(0,r.kt)("p",null,"This document covers a scenario when an upstream project has a script to create\nrelease archives and some of the code in the archive is generated. This means\nthat when a downstream distribution has patches of the generated code those\npatches can't be applied in the upstream repo."),(0,r.kt)("h2",{id:"the-solution"},"The solution"),(0,r.kt)("p",null,"The provided solution will be performed in a ",(0,r.kt)("a",{parentName:"p",href:"/source-git"},"source-git"),"\nrepository."),(0,r.kt)("p",null,"When all your downstream patches apply cleanly on top of the upstream git repo\nfor the particular git tag, then all is good, and you don't need anything\nspecial. You can follow ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli/source-git/init"},"the guide for the source-git init command")," to create such a source-git repo."),(0,r.kt)("p",null,"There is an issue when the patches require running tooling to regenerate code.\nSome upstream projects even use tooling which is not available downstream.\nSadly, packit is unable to magically solve this scenario. If you cannot\nregenerate the code downstream, there is nothing that packit can offer.\nAlternatively you can fork the upstream project and start producing your own\ntarballs with patches of your choice - packit can help with setting this up,\nautomate testing and the release process."),(0,r.kt)("p",null,"Another variant of this problem is when you need to patch code which is ",(0,r.kt)("strong",{parentName:"p"},"not"),"\npresent in the upstream repo and is present in the release tarball. It means\nyour downstream patches (of the generated code) would not apply within the\nupstream repo."),(0,r.kt)("p",null,"There are two solutions to this:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Use upstream git history, patch regular sources instead and regenerate code\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"%prep"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create additional commit with changes (run ",(0,r.kt)("inlineCode",{parentName:"p"},"autogen.sh"),", generate\ndocumentation, etc.) so that you can apply the downstream patches.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the source-git repo from the tarball, not using the upstream git\nhistory."))),(0,r.kt)("h2",{id:"variant-1"},"Variant 1"),(0,r.kt)("p",null,"This still follows the regular source-git repo. The problem may be when\nregenerating the does not fix the original problem or creates new problems -\nand you'll really need to patch the generated sources."),(0,r.kt)("p",null,'In such a case, you should follow "Variant 3" since the code you need to patch\nis not present in the upstream repo.'),(0,r.kt)("h2",{id:"variant-2"},"Variant 2"),(0,r.kt)("p",null,"It's a manual step to make which ensures that you still have upstream history\nand at the same time you can comfortably work with the package in the\ndownstream."),(0,r.kt)("p",null,"To make packit ignore commits (so they are not generated as new downstream\npatches), just append a new line to the commit message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ignore: true\n")),(0,r.kt)("h2",{id:"variant-3"},"Variant 3"),(0,r.kt)("p",null,"There is a tool to achieve this within the packit project:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/packit/dist-git-to-source-git"},"dist-git-to-source-git"),".\nThought this tool was mainly used by the packit team and was not meant to be\nused outside the team, please ",(0,r.kt)("a",{parentName:"p",href:"/#contact"},"reach out")," and the team will be happy to assist you."))}u.isMDXComponent=!0}}]);