"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[2276],{15680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>m});var n=a(96540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=s(a),d=r,m=g["".concat(p,".").concat(d)]||g[d]||c[d]||i;return a?n.createElement(m,o(o({ref:t},u),{},{components:a})):n.createElement(m,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[g]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},20561:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(58168),r=(a(96540),a(15680));const i={title:"Copr builds",sidebar_position:1},o="job: copr_build",l={unversionedId:"configuration/upstream/copr_build",id:"configuration/upstream/copr_build",title:"Copr builds",description:"Create an SRPM and submit an RPM build to Fedora Copr build system.",source:"@site/docs/configuration/upstream/copr_build.md",sourceDirName:"configuration/upstream",slug:"/configuration/upstream/copr_build",permalink:"/docs/configuration/upstream/copr_build",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/configuration/upstream/copr_build.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Copr builds",sidebar_position:1},sidebar:"autogenerated",previous:{title:"Upstream jobs",permalink:"/docs/category/upstream-jobs"},next:{title:"Testing Farm",permalink:"/docs/configuration/upstream/tests"}},p={},s=[{value:"Supported triggers",id:"supported-triggers",level:2},{value:"Required parameters",id:"required-parameters",level:2},{value:"Example",id:"example",level:3},{value:"Optional parameters",id:"optional-parameters",level:2},{value:"Top level keys affecting a Copr build",id:"top-level-keys-affecting-a-copr-build",level:3},{value:"Retriggering",id:"retriggering",level:2},{value:"Using a custom Copr project",id:"using-a-custom-copr-project",level:2},{value:"Allow Packit to build in your custom project",id:"allow-packit-to-build-in-your-custom-project",level:3},{value:"Allow builds from forges",id:"allow-builds-from-forges",level:3},{value:"Target-specific configuration",id:"target-specific-configuration",level:2},{value:"Example",id:"example-1",level:3},{value:"Available Copr build targets",id:"available-copr-build-targets",level:2}],u={toc:s},g="wrapper";function c(e){let{components:t,...i}=e;return(0,r.yg)(g,(0,n.A)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"job-copr_build"},(0,r.yg)("inlineCode",{parentName:"h1"},"job: copr_build")),(0,r.yg)("p",null,"Create an SRPM and submit an RPM build to ",(0,r.yg)("a",{parentName:"p",href:"https://copr.fedorainfracloud.org/"},"Fedora Copr")," build system."),(0,r.yg)("h2",{id:"supported-triggers"},"Supported triggers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"pull_request")," - check out content of the pull request"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"commit")," - reacts to new commits to the specified branch"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"release")," - check out content of the tag associated with the release")),(0,r.yg)("h2",{id:"required-parameters"},"Required parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"targets")," - (a list of) mock chroot(s) where the build is going to be\nexecuted (example ",(0,r.yg)("inlineCode",{parentName:"li"},"fedora-rawhide-x86_64"),", defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"fedora-stable"),"): for\nmore info ",(0,r.yg)("a",{parentName:"li",href:"#available-copr-build-targets"},"see below"),". Does not need to be\ndefined if using a custom Copr project (we fetch targets from the Copr settings).")),(0,r.yg)("h3",{id:"example"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"jobs:\n- job: copr_build\n  trigger: pull_request\n  targets:\n    - fedora-stable\n    - centos-stream-8-x86_64\n")),(0,r.yg)("p",null,"With this configuration, you'll get builds in all stable fedora releases\n(excluding rawhide) and the CentOS Stream."),(0,r.yg)("h2",{id:"optional-parameters"},"Optional parameters"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"branch")," - the name of the branch we want to build for when using ",(0,r.yg)("strong",{parentName:"li"},"commit")," trigger\n(defaults to the repository's default branch) or target branch when using ",(0,r.yg)("strong",{parentName:"li"},"pull_request")," trigger\n(default behaviour is reacting to all pull requests in the repository)."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"timeout")," - (seconds) give up watching a build after timeout, defaults to 7200s, i.e. 2 hours."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"owner")," - a namespace in Copr where the build should happen (defaults to packit).\nPrefix with ",(0,r.yg)("inlineCode",{parentName:"li"},"@")," in case of a group."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"project")," - a name of the Copr project (defaults to ",(0,r.yg)("inlineCode",{parentName:"li"},'"{github_namespace}-{repository_name}-{pr_id}"'),")"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"additional_repos")," - a list of additional buildroot repositories"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"bootstrap")," - mock bootstrap setup. Accepted values are:",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"default")," - use default configuration from ",(0,r.yg)("inlineCode",{parentName:"li"},"mock-core-configs")," package"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"on")," - enable bootstrapping"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"off")," - disable bootstrapping"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"image")," - enable bootstrapping and initialize the bootstrap chroot from a container image"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"list_on_homepage")," - The project will be shown on Copr frontend homepage if set to ",(0,r.yg)("inlineCode",{parentName:"li"},"True"),".\nDefaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"False"),".\nThe value is represented as ",(0,r.yg)("inlineCode",{parentName:"li"},"unlisted_on_hp")," in Copr project settings."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"preserve_project")," - The project will not be removed after 60 days if set to ",(0,r.yg)("inlineCode",{parentName:"li"},"True"),".\nDefaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"False"),".\nThe value is represented as ",(0,r.yg)("inlineCode",{parentName:"li"},"delete_after_days")," in Copr project settings\n(",(0,r.yg)("inlineCode",{parentName:"li"},"True")," is ",(0,r.yg)("inlineCode",{parentName:"li"},"-1")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"False")," is ",(0,r.yg)("inlineCode",{parentName:"li"},"60"),")."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"enable_net")," - Specifies whether created Copr build should have access to network during its build.\nDefaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"False")," (Copr default, switched to ",(0,r.yg)("inlineCode",{parentName:"li"},"False")," in June 2022)."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"identifier")," - Suffix added to the name of a GitHub check run.\nFor example if you ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/rpm-software-management/mock/pull/902/checks?check_run_id=6530714905"},'set this to "mock"'),', then a check run for Rawhide would be\nnamed "rpm-build:fedora-rawhide-x86',"_",'64:mock".',(0,r.yg)("admonition",{parentName:"li",type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Make sure to configure this option if you are having multiple ",(0,r.yg)("inlineCode",{parentName:"p"},"copr_build")," jobs in the configuration,\notherwise the reporting may be incorrect."))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"module_hotfixes")," - The project will have ",(0,r.yg)("inlineCode",{parentName:"li"},"module_hotfixes=1")," in the Copr generated repo files.\nThis is useful when you build packages that need to be installed in a modular context.\nDefaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"False"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"follow_fedora_branching")," - The project will get branched automatically by\nthe Copr. This setting is useful if you're releasing to the Copr.\nDefaults to ",(0,r.yg)("inlineCode",{parentName:"li"},"False"),"."),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"osh_diff_scan_after_copr_build")," - Whether to run a differential scan in ",(0,r.yg)("a",{parentName:"li",href:"https://openscanhub.fedoraproject.org/"},"OpenScanHub"),"\nafter the Copr build successfully completes. See more details ",(0,r.yg)("a",{parentName:"li",href:"/docs/configuration#osh_diff_scan_after_copr_build"},"here"),".")),(0,r.yg)("h3",{id:"top-level-keys-affecting-a-copr-build"},"Top level keys affecting a Copr build"),(0,r.yg)("p",null,"Beside the job specific keys above you can specify a set of top level keys\n(or package level keys in a monorepo configuration)\nthat can change the behaviour of your Copr builds:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://packit.dev/docs/configuration#merge_pr_in_ci"},(0,r.yg)("strong",{parentName:"a"},"merge_pr_in_ci"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://packit.dev/docs/configuration#update_release"},(0,r.yg)("strong",{parentName:"a"},"update_release"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://packit.dev/docs/configuration#release_suffix"},(0,r.yg)("strong",{parentName:"a"},"release_suffix"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://packit.dev/docs/configuration#srpm_build_deps"},(0,r.yg)("strong",{parentName:"a"},"srpm_build_deps")))),(0,r.yg)("h2",{id:"retriggering"},"Retriggering"),(0,r.yg)("p",null,"For retriggering the job, see ",(0,r.yg)("a",{parentName:"p",href:"/docs/retriggering#copr_build"},"retriggering docs"),"."),(0,r.yg)("h2",{id:"using-a-custom-copr-project"},"Using a custom Copr project"),(0,r.yg)("p",null,"When using a custom Copr project (by specifying ",(0,r.yg)("inlineCode",{parentName:"p"},"project")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"owner"),") you need to:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"allow Packit to build in your custom Copr project,"),(0,r.yg)("li",{parentName:"ul"},"allow builds from your forge project.")),(0,r.yg)("h3",{id:"allow-packit-to-build-in-your-custom-project"},"Allow Packit to build in your custom project"),(0,r.yg)("p",null,"When using a custom ",(0,r.yg)("inlineCode",{parentName:"p"},"owner"),", Packit Service asks for ",(0,r.yg)("inlineCode",{parentName:"p"},"builder")," permission the\nfirst time it tries to build in the project. In case the configuration of the\nCopr project (e.g. adding new ",(0,r.yg)("inlineCode",{parentName:"p"},"targets"),") need to be updated, Packit Service asks\nfor ",(0,r.yg)("inlineCode",{parentName:"p"},"admin")," permission. You need to approve these requests in the Copr project\nsettings."),(0,r.yg)("p",null,"If you do not want to give us ",(0,r.yg)("inlineCode",{parentName:"p"},"admin")," permission, you can update the project\nsettings manually in Copr based on the guidance Packit Service gives."),(0,r.yg)("p",null,"You can also directly edit the permissions yourself without waiting for the Packit request\nby running:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"$ copr-cli edit-permissions --builder packit [--admin packit] <project>\n")),(0,r.yg)("p",null,"Boolean values (",(0,r.yg)("inlineCode",{parentName:"p"},"list_on_homepage"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"preserve_project")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"follow_fedora_branching"),") are not updated when you use custom ",(0,r.yg)("inlineCode",{parentName:"p"},"owner"),"."),(0,r.yg)("h3",{id:"allow-builds-from-forges"},"Allow builds from forges"),(0,r.yg)("p",null,"When using a custom ",(0,r.yg)("inlineCode",{parentName:"p"},"project"),", the GitHub or Gitlab repo has to be listed in the\n",(0,r.yg)("strong",{parentName:"p"},"Packit allowed forge projects")," field in the ",(0,r.yg)("strong",{parentName:"p"},"Copr project settings")," so that the Copr builds can be actually run.\nAs an example the string ",(0,r.yg)("em",{parentName:"p"},"github.com/osbuild/osbuild")," has to be inserted\ninto ",(0,r.yg)("a",{parentName:"p",href:"https://copr.fedorainfracloud.org/coprs/g/osbuild/osbuild/edit/#packit_forge_projects_allowed"},"https://copr.fedorainfracloud.org/coprs/g/osbuild/osbuild/edit/#packit_forge_projects_allowed"),"."),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Copr allowed forge projects example",src:a(99654).A,width:"1092",height:"155"})),(0,r.yg)("h2",{id:"target-specific-configuration"},"Target-specific configuration"),(0,r.yg)("p",null,"You can define a specific build configuration for different targets (chroots in\ncontext of Copr). For example, there are packages that are architecture-specific and not available for all architectures. Or you may want ",(0,r.yg)("a",{parentName:"p",href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/installing_managing_and_removing_user-space_components/introduction-to-modules_using-appstream"},"modules"),"\nenabled for builds in CentOS Stream 8."),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://python-copr.readthedocs.io/en/latest/client_v3/proxies.html#project-chroot"},"Copr allows specifying additional packages, modules and repos")," for individual targets."),(0,r.yg)("p",null,"Setting this in packit.yaml requires targets to be a mapping. If you require\nthis functionality, this is the preferred solution over specifying multiple\njobs."),(0,r.yg)("h3",{id:"example-1"},"Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'jobs:\n- job: copr_build\n  trigger: pull_request\n  targets:\n    centos-stream-8:\n      additional_repos:\n       - http://koji.katello.org/releases/yum/foreman-nightly/el8/x86_64/\n      additional_modules: "foreman:el8,ruby:2.7,nodejs:12,postgresql:12"\n      without_opts:\n       - check\n    fedora-rawhide: {}\n    fedora-37: {}\n')),(0,r.yg)("p",null,"In this case, both Fedora targets don't have anything specific and would use\npackages and modules from the base distro, while CentOS Stream 8 will use a\ncustom yum repo, 4 specific modules and it will have ",(0,r.yg)("inlineCode",{parentName:"p"},"--without check")," passed\nto rpmbuild."),(0,r.yg)("p",null,"You can define these options:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"additional_packages")," (list) \u2013 install additional packages before the build"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"additional_repos")," (list) \u2013 enable these yum repositories before installing any packages"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"additional_modules")," (str) \u2013 enable these modules before installing packages,\nspecified as comma-separated string: ",(0,r.yg)("inlineCode",{parentName:"li"},"MODULE:STREAM,MODULE2:STREAM2,...")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"with_opts")," (list) \u2013 build with these rpmbuild ",(0,r.yg)("inlineCode",{parentName:"li"},"--with")," options"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"without_opts")," (list) \u2013 build with these rpmbuild ",(0,r.yg)("inlineCode",{parentName:"li"},"--without")," options")),(0,r.yg)("h2",{id:"available-copr-build-targets"},"Available Copr build targets"),(0,r.yg)("p",null,"There are multiple places where you can get the latest list of available build targets:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},'Open your Copr project, then click "Settings" > "Build options" > "Chroots" -\nthese are the same values packit accepts.')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Install package ",(0,r.yg)("inlineCode",{parentName:"p"},"copr-cli")," and run:"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"$ copr-cli list-chroots\ncentos-stream-8-aarch64\ncentos-stream-8-x86_64\ncustom-1-i386\ncustom-1-x86_64\nepel-6-i386\nepel-6-x86_64\nepel-7-aarch64\nepel-7-x86_64\nepel-8-aarch64\nepel-8-x86_64\nfedora-32-aarch64\nfedora-32-armhfp\n\u2026\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"You can also use the ",(0,r.yg)("a",{parentName:"p",href:"/docs/configuration/#aliases"},"aliases provided by Packit"),"\nto not need to change the config file when the new system version is released."),(0,r.yg)("p",{parentName:"li"},"By default, the ",(0,r.yg)("inlineCode",{parentName:"p"},"x86_64")," architecture will be used, but you can\noverride the default e.g. ",(0,r.yg)("inlineCode",{parentName:"p"},"fedora-stable-aarch64"),".\nThis applies to bare Copr chroots as well, so for example ",(0,r.yg)("inlineCode",{parentName:"p"},"epel-8")," is equivalent to ",(0,r.yg)("inlineCode",{parentName:"p"},"epel-8-x86_64"),".")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"If you are using custom Copr repository for your Copr builds, you don't have\nto define the targets at all and they will be deduced from your custom Copr\nproject."))))}c.isMDXComponent=!0},99654:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/copr_allowed_forges-8296aa98a335afe40b287e6595838cfe.png"}}]);