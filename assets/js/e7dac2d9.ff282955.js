"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[30560],{15680:(e,t,a)=>{a.d(t,{xA:()=>p,yg:()=>d});var r=a(96540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(a),g=n,d=c["".concat(s,".").concat(g)]||c[g]||m[g]||i;return a?r.createElement(d,o(o({ref:t},p),{},{components:a})):r.createElement(d,o({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}g.displayName="MDXCreateElement"},82617:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=a(58168),n=(a(96540),a(15680));const i={title:"Image Builder",authors:"ttomecek"},o=void 0,l={unversionedId:"integrations/image-builder/index",id:"integrations/image-builder/index",title:"Image Builder",description:"We would like to use Image Builder to compose bootable images that would",source:"@site/research/integrations/image-builder/index.md",sourceDirName:"integrations/image-builder",slug:"/integrations/image-builder/",permalink:"/research/integrations/image-builder/",draft:!1,editUrl:"https://github.com/packit/research/tree/main/research/integrations/image-builder/index.md",tags:[],version:"current",frontMatter:{title:"Image Builder",authors:"ttomecek"},sidebar:"autogenerated",previous:{title:"GitLab integration",permalink:"/research/integrations/gitlab/"},next:{title:"Automation of internal processes",permalink:"/research/category/automation-of-internal-processes"}},s={},u=[{value:"Image Builder API",id:"image-builder-api",level:2},{value:"Drawbacks",id:"drawbacks",level:2},{value:"PoPoC",id:"popoc",level:2},{value:"Usage",id:"usage",level:3},{value:"Next steps",id:"next-steps",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.yg)(c,(0,r.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"We would like to use Image Builder to compose bootable images that would\ncontain upstream code that anyone can boot and play with it, especially\ncontributors."),(0,n.yg)("p",null,"Packit needs to work with Image Builder API in order to start those image builds."),(0,n.yg)("h2",{id:"image-builder-api"},"Image Builder API"),(0,n.yg)("p",null,(0,n.yg)("a",{parentName:"p",href:"https://github.com/ondrejbudai"},"@ondrejbudai")," created ",(0,n.yg)("a",{parentName:"p",href:"https://hackmd.io/Lrbf_6Q9SZy06iEj5S5Wuw"},"a great intro blog\npost")," how to use the API. Please read\nit before continuing reading."),(0,n.yg)("p",null,"TL;DR"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Create a token ",(0,n.yg)("a",{parentName:"li",href:"https://access.redhat.com/management/api"},"here")," and generate\nan access token from it to use with Image Builder API"),(0,n.yg)("li",{parentName:"ol"},"API docs: ",(0,n.yg)("a",{parentName:"li",href:"https://github.com/osbuild/image-builder/blob/main/internal/v1/api.yaml"},"https://github.com/osbuild/image-builder/blob/main/internal/v1/api.yaml")),(0,n.yg)("li",{parentName:"ol"},"Web UI: ",(0,n.yg)("a",{parentName:"li",href:"https://console.redhat.com/insights/image-builder/"},"https://console.redhat.com/insights/image-builder/")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("a",{parentName:"li",href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/uploading_a_customized_rhel_system_image_to_cloud_environments/creating-a-customized-rhel-system-image-for-aws-using-image-builder"},"Image Builder service docs")),(0,n.yg)("li",{parentName:"ol"},"The team has their own gchat room, guess the name :)")),(0,n.yg)("h2",{id:"drawbacks"},"Drawbacks"),(0,n.yg)("p",null,"The API works well, but the experience wasn't perfect. Be aware of these:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"There are no build logs and there is no plan right now to have them."),(0,n.yg)("li",{parentName:"ol"},"In case of failure, there is only a single error message provided that can\nbe confusing (see Jira tickets linked from\n",(0,n.yg)("a",{parentName:"li",href:"https://issues.redhat.com/browse/PACKIT-1940"},"https://issues.redhat.com/browse/PACKIT-1940")," to HMSIB)"),(0,n.yg)("li",{parentName:"ol"},"No callbacks, one needs to poll to find out about the completion about an\nimage build")),(0,n.yg)("h2",{id:"popoc"},"PoPoC"),(0,n.yg)("p",null,"We have a PoC in mind (Installer team needs bootable images off PRs to see the\nchange in action). I started a simple python script that submits an image build\nand waits for it to finish. The image installs cockpit on RHEL 9 from cockpit's\nreleases Copr project."),(0,n.yg)("p",null,"Once the image is built, there is a link in the webui to launch an AWS EC2\ninstance and play with it. Neat!"),(0,n.yg)("h3",{id:"usage"},"Usage"),(0,n.yg)("p",null,"Set the offline token via ",(0,n.yg)("inlineCode",{parentName:"p"},"REDHAT_API_OFFLINE_TOKEN"),' env var and run the\n"image_build.py" script.'),(0,n.yg)("h2",{id:"next-steps"},"Next steps"),(0,n.yg)("p",null,"The integration is pretty straightforward:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},'Create a new job: "vm-image-build"')),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Implement a handler for it (trigger = successful Copr build + explicit ",(0,n.yg)("inlineCode",{parentName:"p"},"/packit")," command)")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Wait for the build to finish: babysit/polling/celery")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Auth - create a 'service' account for Packit on access.redhat.com"),(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Attach employee SKU to it"),(0,n.yg)("li",{parentName:"ul"},"Create a refresh token & store it in bitwarden"),(0,n.yg)("li",{parentName:"ul"},"Inform Image Builder team about this user so they are aware of it (maybe\nincrease quota)"),(0,n.yg)("li",{parentName:"ul"},"We need to figure out how images will be shared with users (they can\nprovide their AWS/GCP/Azure account ID so Image Builder can share the\nuploaded image with it)"))),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Once the build is done, put a comment in a PR that the build is done and\nprovide steps how to access it and possibly launch it"))))}m.isMDXComponent=!0}}]);