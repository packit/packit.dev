"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[67075],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>u});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),g=p(a),c=i,u=g["".concat(s,".").concat(c)]||g[c]||m[c]||o;return a?t.createElement(u,r(r({ref:n},d),{},{components:a})):t.createElement(u,r({ref:n},d))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},13396:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=a(87462),i=(a(67294),a(3905));const o={title:"Releasing multiple packages in a single update",sidebar_position:7},r="Releasing multiple packages in a single update",l={unversionedId:"fedora-releases-guide/releasing-multiple-packages",id:"fedora-releases-guide/releasing-multiple-packages",title:"Releasing multiple packages in a single update",description:"It is possible to release multiple packages in a single Bodhi update using Koji sidetags.",source:"@site/docs/fedora-releases-guide/releasing-multiple-packages.md",sourceDirName:"fedora-releases-guide",slug:"/fedora-releases-guide/releasing-multiple-packages",permalink:"/docs/fedora-releases-guide/releasing-multiple-packages",draft:!1,editUrl:"https://github.com/packit/packit.dev/tree/main/docs/fedora-releases-guide/releasing-multiple-packages.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Releasing multiple packages in a single update",sidebar_position:7},sidebar:"autogenerated",previous:{title:"Non-divergent dist-git branches",permalink:"/docs/fedora-releases-guide/non-divergent-dist-git-branches"},next:{title:"Configuration",permalink:"/docs/configuration/"}},s={},p=[{value:"Simplest scenario",id:"simplest-scenario",level:2},{value:"Ensuring build order",id:"ensuring-build-order",level:2},{value:"Skipping release of some packages",id:"skipping-release-of-some-packages",level:2},{value:"Full example",id:"full-example",level:2}],d={toc:p},g="wrapper";function m(e){let{components:n,...a}=e;return(0,i.kt)(g,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"releasing-multiple-packages-in-a-single-update"},"Releasing multiple packages in a single update"),(0,i.kt)("p",null,"It is possible to release multiple packages in a single Bodhi update using Koji sidetags.\nPackit now supports automating that. Let's take a look on how to configure it."),(0,i.kt)("h2",{id:"simplest-scenario"},"Simplest scenario"),(0,i.kt)("p",null,"Let's have two packages, ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),", that we want to release together in one update.\nThe packages build independently of each other."),(0,i.kt)("p",null,"Here are the relevant parts from Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: foo\n\njobs:\n  - job: koji_build\n    trigger: commit\n    sidetag_group: foo-bar-releases\n    dependents:\n      - bar\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("p",null,"Here are the relevant parts from Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: bar\n\njobs:\n  - job: koji_build\n    trigger: commit\n    sidetag_group: foo-bar-releases\n    dist_git_branches:\n      - fedora-all\n\n  - job: bodhi_update\n    trigger: koji_build\n    sidetag_group: foo-bar-releases\n    dependencies:\n      - foo\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("p",null,"Note that there is only one ",(0,i.kt)("inlineCode",{parentName:"p"},"bodhi_update")," job for both packages, we chose to configure it in ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),".\nFor that reason we have to reference ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"dependents")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"koji_build")," job in ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),",\nand, vice versa, reference ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"bodhi_update")," job in ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"sidetag_group")," option, having the same value in all jobs, defines the sidetags Koji builds\nwill be tagged into and Bodhi update will be created from. It doesn't matter which package\nis built first, only after builds of both of them are tagged into the sidetag a Bodhi update\nis created and the sidetag removed."),(0,i.kt)("h2",{id:"ensuring-build-order"},"Ensuring build order"),(0,i.kt)("p",null,"Let's have the same two packages as before, but this time ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," depends on ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),", meaning that\na build of ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," can fail if it is built before ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),". So we have to make sure that ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," is always\nbuilt first."),(0,i.kt)("p",null,"Here are the relevant parts from Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: foo\n\njobs:\n  - job: koji_build\n    trigger: commit\n    sidetag_group: foo-bar-releases\n    dependents:\n      - bar\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("p",null,"Here are the relevant parts from Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: bar\n\njobs:\n  - job: koji_build\n    trigger: commit | koji_build\n    sidetag_group: foo-bar-releases\n    dependencies:\n      - foo\n    dist_git_branches:\n      - fedora-all\n\n  - job: bodhi_update\n    trigger: koji_build\n    sidetag_group: foo-bar-releases\n    dependencies:\n      - foo\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("p",null,"Note that config of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," hasn't changed at all. The ",(0,i.kt)("inlineCode",{parentName:"p"},"koji_build")," job in ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," however now has\ntwo triggers - it will be triggered also when a build of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," lands in the common sidetag.\nIt also has ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"dependencies"),", so if it is triggred via commit while ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," is not yet\nin the sidetag, it will be skipped. As before, once builds of both packages are in the sidetag,\na Bodhi update is created and the sidetag removed."),(0,i.kt)("h2",{id:"skipping-release-of-some-packages"},"Skipping release of some packages"),(0,i.kt)("p",null,"What if we only want to release ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," and not ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),"? We can tag the latest stable build of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),"\nto the common sidetag to satisfy the dependency and trigger the jobs in ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),". We can do that\nby commenting ",(0,i.kt)("inlineCode",{parentName:"p"},"/packit koji-tag --all-branches")," in any dist-git pull request of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),". By omitting\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"--all-branches")," argument we can make the command apply only to the target branch\nof the pull request."),(0,i.kt)("h2",{id:"full-example"},"Full example"),(0,i.kt)("p",null,"Here is a complete example with three packages, ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"baz"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"baz")," depends\non ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bar")," (in other words, ",(0,i.kt)("inlineCode",{parentName:"p"},"baz")," has to be built last, build order of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),"\ndoesn't matter)."),(0,i.kt)("p",null,"Here is Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"foo"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: foo\n\njobs:\n  - job: pull_from_upstream\n    trigger: release\n    dist_git_branches:\n      - fedora-all\n\n  - job: koji_build\n    trigger: commit\n    sidetag_group: foo-bar-baz-releases\n    dependents:\n      - baz\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("p",null,"Here is Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"bar"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: bar\n\njobs:\n  - job: pull_from_upstream\n    trigger: release\n    dist_git_branches:\n      - fedora-all\n\n  - job: koji_build\n    trigger: commit\n    sidetag_group: foo-bar-baz-releases\n    dependents:\n      - baz\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("p",null,"Here is Packit config of ",(0,i.kt)("inlineCode",{parentName:"p"},"baz"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"downstream_package_name: baz\n\njobs:\n  - job: pull_from_upstream\n    trigger: release\n    dist_git_branches:\n      - fedora-all\n\n  - job: koji_build\n    trigger: commit | koji_build\n    sidetag_group: foo-bar-baz-releases\n    dependencies:\n      - foo\n      - bar\n    dist_git_branches:\n      - fedora-all\n\n  - job: bodhi_update\n    trigger: koji_build\n    sidetag_group: foo-bar-baz-releases\n    dependencies:\n      - foo\n      - bar\n    dist_git_branches:\n      - fedora-all\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"downstream_package_name")),(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"downstream_package_name")," option in the configuration examples is there for the sake\nof explicitness and is completely optional.")))}m.isMDXComponent=!0}}]);