"use strict";(self.webpackChunkpackit_dev=self.webpackChunkpackit_dev||[]).push([[7491],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>d});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,d=c["".concat(l,".").concat(g)]||c[g]||m[g]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},93380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(58168),a=(n(96540),n(15680));const o={title:"Call for volunteers: help to test us the release syncing using staging instance",date:new Date("2023-09-05T12:46:18.000Z"),authors:"lbarczio",tags:["downstream","pull-from-upstream","propose-downstream","staging"]},i=void 0,s={permalink:"/posts/verify-sync-release-volunteers",editUrl:"https://github.com/packit/packit.dev/tree/main/posts/verify-sync-release-volunteers/index.md",source:"@site/posts/verify-sync-release-volunteers/index.md",title:"Call for volunteers: help to test us the release syncing using staging instance",description:"In the upcoming months, we plan to migrate our service to a new cluster. However, this may affect propose_downstream",date:"2023-09-05T12:46:18.000Z",formattedDate:"September 5, 2023",tags:[{label:"downstream",permalink:"/posts/tags/downstream"},{label:"pull-from-upstream",permalink:"/posts/tags/pull-from-upstream"},{label:"propose-downstream",permalink:"/posts/tags/propose-downstream"},{label:"staging",permalink:"/posts/tags/staging"}],readingTime:1.84,hasTruncateMarker:!0,authors:[{name:"Laura Barcziov\xe1",email:"lbarczio@redhat.com",url:"https://github.com/lbarcziova",imageURL:"https://github.com/lbarcziova.png",key:"lbarczio"}],frontMatter:{title:"Call for volunteers: help to test us the release syncing using staging instance",date:"2023-09-05T12:46:18.000Z",authors:"lbarczio",tags:["downstream","pull-from-upstream","propose-downstream","staging"]},prevItem:{title:"Experiences using Packit for a Rust executable Project",permalink:"/posts/experiences_with_rust"},nextItem:{title:"(Tests) job triggering improvements",permalink:"/posts/manual-triggering"}},l={authorsImageUrls:[void 0]},p=[],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"In the upcoming months, we plan to migrate our service to a new cluster. However, this may affect ",(0,a.yg)("inlineCode",{parentName:"p"},"propose_downstream"),"\nand ",(0,a.yg)("inlineCode",{parentName:"p"},"pull_from_upstream")," jobs due to the new firewall rules. The problematic aspects could be:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"commands you run in your ",(0,a.yg)("inlineCode",{parentName:"li"},"actions")," during syncing the release involving interactions with external servers"),(0,a.yg)("li",{parentName:"ul"},"downloading your sources from various hosting services (crates.io, npm, gems, etc.)")),(0,a.yg)("p",null,"To smoothen this transition, we kindly encourage you to enable one of these jobs on our already migrated staging instance.\nThis recommendation is particularly important if you belong to one of the groups affected by the two previous points.\nThis proactive step will help us identify and address any issues promptly."),(0,a.yg)("p",null,"Both instances can be run at the same time and the behaviour can be configured via the ",(0,a.yg)("inlineCode",{parentName:"p"},"packit_instances")," configuration key,\nwhich is by default set to ",(0,a.yg)("inlineCode",{parentName:"p"},'["prod"]'),". Picking just one instance is required only for ",(0,a.yg)("inlineCode",{parentName:"p"},"koji_build")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"bodhi_update")," jobs since\nboth instances work with the production instances of Fedora systems. To avoid too much noise in your dist-git PRs, you\nmay enable the ",(0,a.yg)("inlineCode",{parentName:"p"},"pull_from_upstream"),"/",(0,a.yg)("inlineCode",{parentName:"p"},"propose_downstream")," job for only one target, resulting in only one additional PR created."),(0,a.yg)("p",null,"Here's how you can enable one of the jobs on the staging instance:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"pull-from-upstream"),":\nThe only thing needed is to duplicate the job in your Packit config using ",(0,a.yg)("inlineCode",{parentName:"li"},"packit_instances")," configuration option. Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'- job: pull_from_upstream\n  trigger: release\n  packit_instances: ["stg"]\n  dist_git_branches:\n    - fedora-rawhide\n')),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"propose-downstream"),":\nFor this job, you first need to ",(0,a.yg)("a",{parentName:"li",href:"/docs/guide/#staging-instance"},"enable our staging Github app"),"\n(you should be already automatically approved if you had been previously approved for production instance).\nAfter that, similarly to ",(0,a.yg)("inlineCode",{parentName:"li"},"pull-from-upstream"),", you only need to duplicate the job in your Packit config using ",(0,a.yg)("inlineCode",{parentName:"li"},"packit_instances"),". Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'- job: propose_downstream\n  trigger: release\n  packit_instances: ["stg"]\n  dist_git_branches:\n    - fedora-rawhide\n')),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"When merging the PRs created by Packit, please don't forget to merge the PRs created by the production instance\nif you have a follow-up ",(0,a.yg)("inlineCode",{parentName:"p"},"koji_build")," job enabled to ensure your builds will not be skipped\n(or you can allow builds for staging instance as well, see ",(0,a.yg)("a",{parentName:"p",href:"/docs/configuration/downstream/koji_build#optional-parameters"},"allowed_pr_authors"),")).")),(0,a.yg)("p",null,"We would be happy if you could then report any problems to ",(0,a.yg)("a",{parentName:"p",href:"#contact"},"us"),". We appreciate your collaboration in ensuring a seamless migration. Your Packit team!"))}m.isMDXComponent=!0}}]);