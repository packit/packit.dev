<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Packit Blog</title>
        <link>https://packit.dev/posts</link>
        <description>Blog posts by Packit</description>
        <lastBuildDate>Mon, 22 Jan 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Customize AWS cloud images with Image Builder and Packit]]></title>
            <link>https://packit.dev/posts/aws-and-image-builder</link>
            <guid>https://packit.dev/posts/aws-and-image-builder</guid>
            <pubDate>Mon, 22 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Have you ever wanted to bring your pull request changes in a cloud image easily?]]></description>
            <content:encoded><![CDATA[<p>Have you ever wanted to bring your pull request changes in a cloud image easily?
Curious about how easy it can be? With Packit, it can be just about commenting on your pull request with <code>/packit vm-image-build</code>.</p><p>With the above command, Packit automates all the manual steps needed to create an
RPM package with your pull request changes and asks the Image Builder to install it
inside a brand new cloud image.
Let's have a look at the prerequisites for this.</p><h1>Join the Red Hat Developer Program</h1><p>If you don't already have a business account you can create a
<em>Red Hat Developer account</em> at no cost <a href="https://developers.redhat.com/about" target="_blank" rel="noopener noreferrer">here</a>.</p><p>You need a subscription in order to use the
<a href="https://console.redhat.com/insights/image-builder" target="_blank" rel="noopener noreferrer">Image Builder service</a>
and launch the builded images in the <a href="https://aws.amazon.com/console/" target="_blank" rel="noopener noreferrer">AWS management console</a>.</p><h1>Prepare to upload AWS AMI images</h1><p>Before uploading an AWS AMI image, you must configure the AWS system for receiving them.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="prerequisites">Prerequisites<a href="#prerequisites" class="hash-link" aria-label="Direct link to Prerequisites" title="Direct link to Prerequisites">​</a></h3><ul><li>You must have an Access Key ID configured in the <a href="https://aws.amazon.com/iam/" target="_blank" rel="noopener noreferrer">AWS IAM account manager</a>.</li><li>You must have a writable <a href="https://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html" target="_blank" rel="noopener noreferrer">S3 bucket</a> prepared.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="procedure">Procedure<a href="#procedure" class="hash-link" aria-label="Direct link to Procedure" title="Direct link to Procedure">​</a></h3><p>Follow <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/composing_a_customized_rhel_system_image/creating-cloud-images-with-composer_composing-a-customized-rhel-system-image#preparing-for-uploading-aws-ami-images_creating-cloud-images-with-composer" target="_blank" rel="noopener noreferrer">these steps</a>
to satisfy the above prerequisites.</p><h1>The manual steps</h1><p>Are you wondering what are the manual steps for bringing your pull request changes
in a cloud image and why you should automate them?</p><p>There could be many ways to achieve this goal but let's see together the closest to our
automated solution. Below you can find a summary of all the needed manual steps;
I am quite sure after reading them, you will want to automate them with Packit!</p><ul><li><p>Build an RPM package with your pull request changes through <strong>COPR</strong>, go to <a href="https://copr.fedorainfracloud.org" target="_blank" rel="noopener noreferrer">https://copr.fedorainfracloud.org</a></p><ol><li>Install <code>copr-cli</code>.</li><li>Create your account and service token.</li><li>Add your token to `~/.config/copr.</li><li>Create a new COPR project.</li><li>Start a build with your local pull request changes using <code>copr-cli</code>.</li><li><strong>WAIT for the build to finish</strong>.</li></ol></li><li><p>Create a new cloud image through the <strong>Image Builder console</strong>, go to <a href="https://console.redhat.com/insights/image-builder" target="_blank" rel="noopener noreferrer">https://console.redhat.com/insights/image-builder</a></p><ol start="7"><li>Login with your <em>Red Hat developer</em> account.</li><li>Click on the <code>Create Image</code> button, choose <em>AWS image</em> type and follow the wizard.</li><li><strong>WAIT for the build to finish</strong>.</li><li>Open the <code>Launch</code> link for the builded image.</li></ol></li><li><p>Launch and access the AWS image through the <strong>AWS management console</strong>, go to <a href="https://aws.amazon.com/console/" target="_blank" rel="noopener noreferrer">https://aws.amazon.com/console/</a></p><ol start="11"><li>The previous link will open an AWS console tab with the
<em>Launch an Instance</em> wizard preset to use the builded image.
You need to login into the <em>AWS management console</em> using an <em>AWS Account ID</em>
allowed to access the <em>AMI Image</em> you just created.</li><li>Select a <strong>Key pair</strong>, or create one if you don't have it already,
to be able to ssh the image later.</li><li>Click on <code>Launch Instance</code></li><li>Connect to instance using an ssh client</li><li>Add the previously created COPR repo to the list of available dnf repositories.</li><li>Install the package you have created at step number 4.</li><li>Now you are ready to test your code in a real cloud image.</li></ol></li></ul><p>For every new pull request you want to test directly in a cloud image you have to repeat
steps 4-16 or automate them through Packit!</p><h1>Automate the steps</h1><h2 class="anchor anchorWithStickyNavbar_LWe7" id="install-packit">Install Packit<a href="#install-packit" class="hash-link" aria-label="Direct link to Install Packit" title="Direct link to Install Packit">​</a></h2><p>Installing Packit is pretty straightforward.</p><ol><li>Create a valid <a href="https://fedoraproject.org/wiki/Account_System" target="_blank" rel="noopener noreferrer">Fedora Account System (FAS)</a>
account (if you don't already have one).
Why do you need it? After these few steps you will start building (and potentially shipping)
Fedora packages through the <a href="https://copr.fedorainfracloud.org/" target="_blank" rel="noopener noreferrer">COPR service</a> and we need you to agree with the Fedora license.</li><li>Install our GitHub application on <a href="https://github.com/marketplace/packit-as-a-service" target="_blank" rel="noopener noreferrer">GitHub Marketplace</a>,
or <a href="https://packit.dev/docs/guide/#how-to-set-up-packit-on-gitlab" target="_blank" rel="noopener noreferrer">configure a webhook</a> on GitLab
(depending on where your project lives).</li><li>Make Packit <a href="https://packit.dev/docs/guide/#2-approval" target="_blank" rel="noopener noreferrer">approve your FAS username</a>;
on Github the approval process is automated and for Gitlab you have to contact us.</li></ol><p>Now you are ready to automate the process as described below.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup-packit">Setup Packit<a href="#setup-packit" class="hash-link" aria-label="Direct link to Setup Packit" title="Direct link to Setup Packit">​</a></h2><p>Create a <code>.packit.yaml</code> configuration file in your pull request.</p><p>But just the first time! After your pull request has been merged, Packit will take the <code>.packit.yaml</code> file from the target <em>main branch</em>.</p><p>The configuration file will look like the following:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">---</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jobs:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- job: copr_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  trigger: pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  targets:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - fedora-all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- job: vm_image_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  trigger: pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  image_request:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    architecture: x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    image_type: aws</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    upload_request:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      type: aws</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      options:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        share_with_accounts:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - &lt; shared-aws-account-id &gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  image_distribution: fedora-39</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  copr_chroot: fedora-39-x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  image_customizations:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    packages: [hello-world]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="copr_build-job">copr_build job<a href="#copr_build-job" class="hash-link" aria-label="Direct link to copr_build job" title="Direct link to copr_build job">​</a></h3><p>The first job tells Packit service to build an RPM package, for the Fedora release you want,
in this example all the active fedora releases, and to add your pull request changes to the package.</p><p>To further customize the COPR builds made by Packit you may want to give a look at this
<a href="https://packit.dev/docs/configuration/upstream/copr_build" target="_blank" rel="noopener noreferrer">guide</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="vm_image_build-job">vm_image_build job<a href="#vm_image_build-job" class="hash-link" aria-label="Direct link to vm_image_build job" title="Direct link to vm_image_build job">​</a></h3><p>The second job tells Packit how to configure the Builder Image service.</p><p>The first two lines of this job are still meant for Packit;
they allow Packit to react to your pull request comment <code>/packit vm-image-build</code>.
Packit does not build a VM image automatically, as it does when it builds a COPR package,
to save you from no wanted costs.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">- job: vm_image_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">trigger: pull_request</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The other lines are meant to customize the Image Builder behaviour.</p><p>You are asking to build an <em>AWS</em> image, with a <em>fedora-39</em> distribution,
for the <em>x86_64</em> architecture and you want to share it with the listed
<em>AWS Account IDs</em>.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">image_request:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  architecture: x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  image_type: aws</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  upload_request:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    type: aws</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    options:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      share_with_accounts:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - &lt; shared-aws-account-id &gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">image_distribution: fedora-39</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You don't want to manually install the COPR package into the image,
for this reason you ask the Image Builder to install it (<em>hello-world</em>).</p><p>You tell Image Builder to take it from the COPR chroot <em>fedora-39-x86_64</em>,
and you don't need to create or specify a COPR project because it has
been automatically created by Packit for you.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">copr_chroot: fedora-39-x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">image_customizations:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  packages: [hello-world]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="create-comment-and-test-a-pull-request">Create, comment and test a pull request!<a href="#create-comment-and-test-a-pull-request" class="hash-link" aria-label="Direct link to Create, comment and test a pull request!" title="Direct link to Create, comment and test a pull request!">​</a></h2><p>Create a pull request, mine will show you the <strong>world</strong> word in green 🌿.</p><p>You are ready to go, just comment your pull request with</p><p><code>/packit vm-image-build</code></p><p>and the image will be built and customized for you.</p><p>Look for the check named <strong>vm-image-build-fedora-39-x86_64</strong>
and wait for it to finish.</p><p><img loading="lazy" alt="Wait for check vm-image-build-fedora-39-x86_64 to finish" src="/assets/images/checks_vm_image_build-0ec652132670f4da590dca9dc372a468.png" width="512" height="194" class="img_ev3q"></p><p>Open its details and you will find the link
to the AWS image.</p><p><img loading="lazy" alt="The check details have a link to the AWS image" src="/assets/images/link_to_aws_image-16f87362483365f8530c80041de39ada.png" width="512" height="198" class="img_ev3q"></p><p>Open the AWS link (you need to be already logged in) and
see the details of your image ready to be launched.</p><p><img loading="lazy" alt="The AWS image details" src="/assets/images/ami-link-2bb9d9e9a1da6c8e18ca31b39db13789.png" width="512" height="246" class="img_ev3q"></p><p>Launch your image instance and connect to it.</p><p><img loading="lazy" alt="Connect to instance details" src="/assets/images/connect-to-instance-0f2ae4856b17566477e3e4e29074075f.png" width="512" height="393" class="img_ev3q"></p><p>Test it!</p><p><img loading="lazy" alt="Test it!" src="/assets/images/hello-world-809c7da500a4aca0a1d5b7fbdd3ea1fc.png" width="495" height="94" class="img_ev3q"></p>]]></content:encoded>
            <author>mmassari@redhat.com (Maja Massarini)</author>
            <category>image-builder</category>
        </item>
        <item>
            <title><![CDATA[Introduction to specfile library]]></title>
            <link>https://packit.dev/posts/specfile-introduction</link>
            <guid>https://packit.dev/posts/specfile-introduction</guid>
            <pubDate>Fri, 12 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Have you ever wanted to make changes in an RPM spec file programmatically? specfile library]]></description>
            <content:encoded><![CDATA[<p>Have you ever wanted to make changes in an RPM spec file programmatically? <em>specfile</em> library
has been created for that very purpose. It is a pure Python library that allows you to conveniently
edit different parts of a spec file while doing its best to keep the resulting changeset minimal
(no unnecessary whitespace changes etc.).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="installation">Installation<a href="#installation" class="hash-link" aria-label="Direct link to Installation" title="Direct link to Installation">​</a></h2><p>The library is packaged for Fedora, EPEL 9 and EPEL 8 and you can simply install it with dnf:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dnf </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> python3-specfile</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>On other systems, you can use pip (just note that it requires RPM Python bindings to be installed):</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pip </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> specfile</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="usage">Usage<a href="#usage" class="hash-link" aria-label="Direct link to Usage" title="Direct link to Usage">​</a></h2><p>Let's have a look at a few simple examples of how to use the library.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="bumping-release">Bumping release<a href="#bumping-release" class="hash-link" aria-label="Direct link to Bumping release" title="Direct link to Bumping release">​</a></h3><p>To bump release and add a new changelog entry, we could use the following code:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> specfile </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Specfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> Specfile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"example.spec"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">release </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">str</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">expanded_release</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add_changelog_entry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"- Bumped release for test purposes"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let's take a look at what happens here:</p><p>We instantiate <code>Specfile</code> class with a path to our spec file and use it as a context manager
to automatically save all changes upon exiting the context.</p><p>We then use <code>expanded_release</code> property to get the current value of <code>Release</code> tag after macro expansion.
We assume it is numeric, so we simply convert it to integer, add 1, convert the result back to string
and assign the new value to <code>release</code> property.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Note that <code>release</code>/<code>expanded_release</code> properties exclude dist tag (usually <code>%{?dist}</code>) - for convenience,
it is ignored when reading and preserved unmodified when writing. If that's not what you want, you can use
<code>raw_release</code>/<code>expanded_raw_release</code> properties instead.</p></div></div><p>Finally, we add a new changelog entry. We don't specify any other arguments but content,
so the author is determined automatically using the same procedure as <code>rpmdev-packager</code> uses
and date is set to current day.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="switching-to-autochangelog">Switching to <code>%autochangelog</code><a href="#switching-to-autochangelog" class="hash-link" aria-label="Direct link to switching-to-autochangelog" title="Direct link to switching-to-autochangelog">​</a></h3><p>To make a switch from traditional changelog to <code>%autochangelog</code>, we could do the following:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> pathlib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> specfile </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> Specfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Specfile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"example.spec"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> autosave</span><span class="token operator" style="color:#393A34">=</span><span class="token boolean" style="color:#36acaa">True</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sections</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sections</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    entries </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> sections</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">changelog</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sections</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">changelog</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">:</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"%autochangelog"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pathlib</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"changelog"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write_text</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"\n"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entries</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"\n"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let's take a look at what happens here:</p><p>We instantiate <code>Specfile</code> class with a path to our spec file and we also set <code>autosave</code> argument
that ensures that any changes are saved automatically as soon as possible.</p><p><em>specfile</em> heavily relies on context managers. Here we are using <code>sections()</code> method that returns
a context manager that we can use to manipulate spec file sections. Upon exiting the context,
any modifications done are propagated to the internal representation stored in our <code>Specfile</code> instance,
and since <code>autosave</code> is set, they are immediately saved to the spec file as well.</p><p>First, we store a copy of the content of the <code>%changelog</code> section. The content is represented
as a list of lines.</p><p>Then we replace the content with a single line - "%autochangelog".</p><p>Finally, we save the stored content into a "changelog" file.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="iterating-through-tags">Iterating through tags<a href="#iterating-through-tags" class="hash-link" aria-label="Direct link to Iterating through tags" title="Direct link to Iterating through tags">​</a></h3><p>Contexts can be nested. Here is a code that iterates through all <em>package</em> sections
(including the first, implicitly named one; also known as <em>preamble</em>) and prints expanded value
of all <code>Requires</code> tags:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spec </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Specfile</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"example.spec"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sections</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> sections</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> section </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> sections</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># normalized name of a section is lowercased</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> section</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">normalized_name </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"package"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">with</span><span class="token plain"> spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">tags</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">section</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> tag </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token comment" style="color:#999988;font-style:italic"># normalized name of a tag is capitalized</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> tag</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">normalized_name </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Requires"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-interpolation string" style="color:#e3116c">f"Section: </span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">section</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation builtin">id</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">, Tag: </span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">tag</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation">name</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">, Value: </span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">{</span><span class="token string-interpolation interpolation">tag</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">.</span><span class="token string-interpolation interpolation">expanded_value</span><span class="token string-interpolation interpolation punctuation" style="color:#393A34">}</span><span class="token string-interpolation string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let's take a look at what happens here:</p><p>We instantiate <code>Specfile</code> class with a path to our spec file. This time we don't set <code>autosave</code> because
we are not doing any modifications (though we could still save any changes explicitly using <code>save()</code> method).</p><p>Then we use <code>sections()</code> context manager and iterate through sections; we skip sections not called "package"
(the initial <em>%</em> is ommited for convenience).</p><p>After that we use <code>tags()</code> context manager and pass the current section as an argument. This allows us
to iterate through tags in the current section. Without any argument, we would get a list of tags in <em>preamble</em>,
the very first section in a spec file. We skip tags not called "Requires" and finally print the values
of <code>Requires</code> tags after macro expansion. We also print tag names (not normalized) and section IDs - those are
section names followed by options, e.g. "package -n alternative-name-for-example".</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-info-and-links">More info and links<a href="#more-info-and-links" class="hash-link" aria-label="Direct link to More info and links" title="Direct link to More info and links">​</a></h2><p>Are you interested in more details, trying the library out or even contributing? You can find <em>specfile</em> source code on <a href="https://github.com/packit/specfile" target="_blank" rel="noopener noreferrer">GitHub</a>.
See the <a href="https://github.com/packit/specfile/blob/main/README.md" target="_blank" rel="noopener noreferrer">README</a> for more tips and usage examples.
You can also check out the <a href="https://packit.dev/specfile/api/specfile" target="_blank" rel="noopener noreferrer">API reference</a>.</p>]]></content:encoded>
            <author>nforro@redhat.com (Nikola Forró)</author>
            <category>specfile</category>
        </item>
        <item>
            <title><![CDATA[Experiences using Packit for a Rust executable Project]]></title>
            <link>https://packit.dev/posts/experiences_with_rust</link>
            <guid>https://packit.dev/posts/experiences_with_rust</guid>
            <pubDate>Tue, 10 Oct 2023 00:00:00 GMT</pubDate>
            <description><![CDATA["How absurdly simple!" I cried.]]></description>
            <content:encoded><![CDATA[<p>"How absurdly simple!" I cried.</p><p>"Quite so!" said he, a little nettled. "Every problem becomes very childish when once it is explained to you."</p><ul><li>Arthur Conan Doyle, "The Adventure of the Dancing Men"</li></ul><p>We have planned for a while to use Packit to generate packages on Copr
on demand for our somewhat complicated Rust executable, stratisd. It
looked like this was going to be challenging, and in a sense it was,
but once the task was completed, it turned out to have been pretty
straightforward.</p><p>The two primary parts of our Stratis project are stratisd, a big,
fairly complicated Rust project which generates multiple distinct Rust
executables and also installs scripts and configuration files and so
forth, and stratis-cli, a relatively simple Python project which
communicates with stratisd over the D-Bus. Our main purpose in getting
on-demand packages of both these projects was not to test the
packaging, although that is a nice thing to do, but to have a
convenient way to do functional testing of the project, frequently
generating a stratisd package from one stratisd pull request and a
stratis-cli package from a matching stratis-cli pull request.</p><p>The Packit team had already obliged us by preparing a Packit
configuration file for our stratis-cli repo, we thus merely had to
figure out how to do the same for stratisd. We already had some
scripts which we could run by hand to make the SRPMs for both projects
so that we could manually send them to Copr so, as it turned out, all
we really needed to do was figure out how to write a Packit
configuration file for stratisd so that Packit would do these tasks
for us. There follows a quick summary of the decisions we made to
solve this problem. Note that our whole and only task was to figure
out how to create the source artifacts and edit the spec file and
to provide these in such a way that Packit could take over from there,
build the SRPM, and carry on to request the Copr builds which provide
the binary packages for testing.</p><p>A Packit configuration is used to set certain configuration <em>options</em>,
to override certain <em>actions</em>, or to define certain <em>hooks</em>. The
available actions and hooks are specific to a given job or set of jobs.
If an action is not
overridden in a project's Packit configuration, Packit will execute
its own default action. For example, Packit's default for the
create-archive action is just git-archive. Any action can be overridden by
specifying a sequence of commands. For the stratisd Packit
configuration, we found that we had to override the majority of the
actions.</p><p>Note that the <a href="https://github.com/stratis-storage/stratisd/blob/master/.packit.yaml" target="_blank" rel="noopener noreferrer">stratisd Packit configuration file</a> is quite
simple as most of the action is in the <code>create_archive.py</code> script. Some
things to make note of are the following:</p><ol><li><p><code>merge_pr_in_ci</code> is set to false. This prevents Packit from
automatically merging our pull request into its target branch. It has
always been our custom to build from the unmerged branch when testing
PRs and we preferred to do the same in our Packit configuration.</p></li><li><p><code>fix-spec-file</code> contains a dummy echo action. This is how we override
Packit's default spec file editing action. Instead of specifying an
override for this action, we use <a href="https://github.com/stratis-storage/ci/blob/master/release_management/create_artifacts.py" target="_blank" rel="noopener noreferrer">our own script</a>, <code>create_artifacts.py</code>, to
edit the spec file as well as to generate the three source artifacts that we
use in this package in the <code>create-archive</code> action.</p></li><li><p><code>create_artifacts.py</code> uses the Packit team's <a href="https://github.com/packit/specfile" target="_blank" rel="noopener noreferrer">specfile package</a> to
edit the stratisd specfile. We needed just two modifications: 1. To overwrite the Version field with our preferred version string. 2. To overwrite the Source entries with the names and paths of the
source artifacts.
This requires just one <a href="https://github.com/stratis-storage/ci/blob/master/release_management/_utils.py#L80" target="_blank" rel="noopener noreferrer">very simple function</a> using specfile.</p></li><li><p>In the Packit configuration, the <code>update_release</code> field is set to
false. We prefer to update the Version field in the spec file using
our <code>create_archive.py</code> script, so that the updated version is
recognized as a pre-release version of our current version by
<code>rpmdev-vercmp</code>.</p></li><li><p>We modified our <a href="https://github.com/stratis-storage/stratis-cli/blob/master/.packit.yaml" target="_blank" rel="noopener noreferrer">stratis-cli Packit configuration file</a> to work the
same way as our stratisd one.</p></li></ol><p>In summary, we got the ability to take advantage of the Packit
infrastructure for Copr builds by figuring out how to satisfy its
requirements for the source artifacts and the specfile. Note that our
decisions about how to do this were made based on the scripts we had
already written to generate the SRPMs and the particular requirements
of our project. For example, our release scripts are written in
Python, and we stuck with that choice. That turned out to be handy,
because that allowed us to use the specfile project in our scripts to
edit the spec file. But it would have been possible to write the
artifact creation script in Rust using the cargo xtask pattern just as
well, and to solve the spec file rewriting problem using, e.g., sed.
We overwrote the Version field in the spec file, rather than allowing
Packit to autobump our release number, because our development process
requires us to bump the version in the Cargo.toml (for Rust) and
setup.cfg (for Python) files to the version we will release as soon as
we begin development. These choices and their implementations could be
made differently to support a project with different constraints and
different existing infrastructure.</p>]]></content:encoded>
            <author>amulhern@redhat.com (mulhern)</author>
        </item>
        <item>
            <title><![CDATA[Call for volunteers: help to test us the release syncing using staging instance]]></title>
            <link>https://packit.dev/posts/verify-sync-release-volunteers</link>
            <guid>https://packit.dev/posts/verify-sync-release-volunteers</guid>
            <pubDate>Tue, 05 Sep 2023 12:46:18 GMT</pubDate>
            <description><![CDATA[In the upcoming months, we plan to migrate our service to a new cluster. However, this may affect propose_downstream]]></description>
            <content:encoded><![CDATA[<p>In the upcoming months, we plan to migrate our service to a new cluster. However, this may affect <code>propose_downstream</code>
and <code>pull_from_upstream</code> jobs due to the new firewall rules. The problematic aspects could be:</p><ul><li>commands you run in your <code>actions</code> during syncing the release involving interactions with external servers</li><li>downloading your sources from various hosting services (crates.io, npm, gems, etc.)</li></ul><p>To smoothen this transition, we kindly encourage you to enable one of these jobs on our already migrated staging instance.
This recommendation is particularly important if you belong to one of the groups affected by the two previous points.
This proactive step will help us identify and address any issues promptly.</p><p>Both instances can be run at the same time and the behaviour can be configured via the <code>packit_instances</code> configuration key,
which is by default set to <code>["prod"]</code>. Picking just one instance is required only for <code>koji_build</code> and <code>bodhi_update</code> jobs since
both instances work with the production instances of Fedora systems. To avoid too much noise in your dist-git PRs, you
may enable the <code>pull_from_upstream</code>/<code>propose_downstream</code> job for only one target, resulting in only one additional PR created.</p><p>Here's how you can enable one of the jobs on the staging instance:</p><ul><li><code>pull-from-upstream</code>:
The only thing needed is to duplicate the job in your Packit config using <code>packit_instances</code> configuration option. Example:</li></ul><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_from_upstream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packit_instances</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"stg"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">dist_git_branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">rawhide</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>propose-downstream</code>:
For this job, you first need to <a href="/docs/guide#staging-instance">enable our staging Github app</a>
(you should be already automatically approved if you had been previously approved for production instance).
After that, similarly to <code>pull-from-upstream</code>, you only need to duplicate the job in your Packit config using <code>packit_instances</code>. Example:</li></ul><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> propose_downstream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packit_instances</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"stg"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">dist_git_branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">rawhide</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>When merging the PRs created by Packit, please don't forget to merge the PRs created by the production instance
if you have a follow-up <code>koji_build</code> job enabled to ensure your builds will not be skipped
(or you can allow builds for staging instance as well, see <a href="/docs/configuration/downstream/koji_build#optional-parameters">allowed_pr_authors</a>)).</p></div></div><p>We would be happy if you could then report any problems to <a href="#contact">us</a>. We appreciate your collaboration in ensuring a seamless migration. Your Packit team!</p>]]></content:encoded>
            <author>lbarczio@redhat.com (Laura Barcziová)</author>
            <category>downstream</category>
            <category>pull-from-upstream</category>
            <category>propose-downstream</category>
            <category>staging</category>
        </item>
        <item>
            <title><![CDATA[(Tests) job triggering improvements]]></title>
            <link>https://packit.dev/posts/manual-triggering</link>
            <guid>https://packit.dev/posts/manual-triggering</guid>
            <pubDate>Tue, 11 Jul 2023 06:46:18 GMT</pubDate>
            <description><![CDATA[Recently, we received multiple contributions from the Strimzi team, specifically Jakub Stejskal]]></description>
            <content:encoded><![CDATA[<p>Recently, we received multiple contributions from the Strimzi team, specifically <a href="https://github.com/Frawless" target="_blank" rel="noopener noreferrer">Jakub Stejskal</a>
and <a href="https://github.com/kornys" target="_blank" rel="noopener noreferrer">David Kornel</a>,
for the functionality of manual triggering of jobs and other related improvements, mostly focusing on the testing
UX. We are very happy about these and would like to showcase the results of their awesome contributions.</p><p>Strimzi team wanted to onboard Packit to ease their testing in pull requests, but they have had multiple test suites that could run
for a long time, and they did not want to run all of the test suites for each new commit in a pull request.</p><p>Let's now look together at what they implemented to solve their usecase.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="manual-only-triggering-of-jobs">Manual-only triggering of jobs<a href="#manual-only-triggering-of-jobs" class="hash-link" aria-label="Direct link to Manual-only triggering of jobs" title="Direct link to Manual-only triggering of jobs">​</a></h2><p>Firstly, a new configuration option <a href="/docs/configuration/jobs#manual_trigger"><code>manual_trigger</code></a> was introduced.
With this new configuration option, users can enable triggering Packit jobs only manually and avoid specified jobs being
automatically triggered when, e.g., a new commit arrives to a pull request.
The only thing needed to make this work is to add <code>manual_trigger: true</code> to the job's definition:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> centos</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">stream</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">9</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">skip_build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">manual_trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This new configuration option allows saving resources and running builds or tests, e.g. only when the pull request is ready for
testing and can be especially useful for projects having huge test plans.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="triggering-test-jobs-based-on-labels-and-identifiers">Triggering test jobs based on labels and identifiers<a href="#triggering-test-jobs-based-on-labels-and-identifiers" class="hash-link" aria-label="Direct link to Triggering test jobs based on labels and identifiers" title="Direct link to Triggering test jobs based on labels and identifiers">​</a></h2><p>The above solution is very easy to use; however, there might be use cases where the users don’t want to trigger all the jobs.
A particular example could be running a smoke test job before running the sanity one.</p><p>To solve this, for the test jobs, Jakub and David introduced 2 new ways to trigger a specific job.</p><p>The first one is to trigger the job based on the configured <a href="/docs/configuration/upstream/tests#optional-parameters"><code>identifier</code></a>. To trigger a test job with <code>identifier: regression-operators</code> in the
job configuration, the Packit comment command will be:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/packit test --identifier regression-operators</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That command will execute the job with this specific identifier, nothing else.</p><p>And what if someone wants to execute more than one job? Users can easily use multiple identifiers in a comma-separated list:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/packit test --identifier regression-operators,regression-components</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>But specifying a longer list of identifiers every time might get a little bit annoying,
especially when the identifiers are usually used together repeatedly.</p><p>To improve the UX, there was introduced <a href="/docs/configuration/upstream/tests#optional-parameters"><code>labels</code></a> configuration field that can group together multiple jobs.
Each job can contain a list of <code>labels</code> in their definition:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">identifier</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> regression</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">operators</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> centos</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">stream</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">9</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">skip_build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">manual_trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">labels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> regression</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sanity</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">identifier</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> regression</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">components</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> centos</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">stream</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">9</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">skip_build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">manual_trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">labels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> regression</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">identifier</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> acceptance</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">operators</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> centos</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">stream</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">9</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">skip_build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">manual_trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">labels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> acceptance</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sanity</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With this, one can comment</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/packit test --labels regression</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>and the comment will trigger all jobs that contain <code>regression</code> in the list of labels in the job configuration.
It is again also possible to specify a comma-separated list of labels:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/packit test --labels regression,sanity</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><p>As already mentioned, these improvements were made as contributions from outside of the Packit team, and it was such
a nice experience to collaborate with someone new! And this brings us to a reminder:
Anyone can contribute! So if you are missing some features, feel free to open a pull request, and we will gladly help
you so that your feature can land in our production!</p>]]></content:encoded>
            <author>lbarczio@redhat.com (Laura Barcziová)</author>
            <category>configuration</category>
        </item>
        <item>
            <title><![CDATA[Introducing monorepository support]]></title>
            <link>https://packit.dev/posts/monorepos</link>
            <guid>https://packit.dev/posts/monorepos</guid>
            <pubDate>Tue, 04 Jul 2023 07:20:06 GMT</pubDate>
            <description><![CDATA[We are very happy to announce a major enhancement to Packit! We have now added support for]]></description>
            <content:encoded><![CDATA[<p>We are very happy to announce a major enhancement to Packit! We have now added support for
monorepositories, enabling the integration of upstream repositories containing multiple downstream packages.
If you have a repository in the monorepo format, Packit can now help you automate the integration to downstream
distributions both from CLI and as a service.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuration">Configuration<a href="#configuration" class="hash-link" aria-label="Direct link to Configuration" title="Direct link to Configuration">​</a></h2><p>Let's take a look at how a monorepository should be configured so that Packit can automate the process!</p><p>The main addition to the Packit configuration file in the context of monorepositories are the keys
<a href="/docs/configuration#packages"><code>packages</code></a> and <a href="/docs/configuration#paths"><code>paths</code></a>.</p><p><code>packages</code> holds a dictionary of <code>{package_name: package_configuration}</code> where package configuration can contain any keys
that were previously used as top-level keys for the standard (single) package configuration. The <code>paths</code> can be defined
in each <code>package_configuration</code> and should hold a list of paths that should be considered for the particular package.</p><p>The <code>packages</code> section in the configuration can then look like this:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">python-copr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">downstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> python</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">copr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">upstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./python</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">specfile_path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> python</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">copr.spec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">files_to_sync</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> python</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">copr.spec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">copr-cli</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">downstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">cli</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">upstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">cli</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./cli</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">specfile_path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">cli.spec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">files_to_sync</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">cli.spec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">copr-backend</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">downstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">upstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">specfile_path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">backend.spec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">files_to_sync</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">backend.spec</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That was the configuration of the packages and their locations in general, but how should these values then be utilised?</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="packit-service-support">Packit Service support<a href="#packit-service-support" class="hash-link" aria-label="Direct link to Packit Service support" title="Direct link to Packit Service support">​</a></h3><p>For the Packit Service jobs, there is one more addition to the configuration: the <a href="/docs/configuration/jobs#packages"><code>packages</code></a> key again,
that can be used in each job and tells which packages should be considered for that particular job.</p><p>As a result, the repository in monorepo format could have jobs in the Packit configuration configured like this:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> copr</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">cli</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">all</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">preserve_project</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">True</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> copr_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> python</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">copr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">targets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">all</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">x86_64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">all</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">aarch64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">manual_trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">True</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And the commit statuses in GitHub/GitLab will also include the name of the package:
<img loading="lazy" alt="Monorepo statuses" src="/assets/images/statuses-8048b69ec99393dd77aaace7258dffff.png" width="879" height="516" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cli-support">CLI support<a href="#cli-support" class="hash-link" aria-label="Direct link to CLI support" title="Direct link to CLI support">​</a></h3><p>As for the CLI, you can now for each command specify the <code>-p</code> or <code>--packages</code> argument followed by the package name
and the scope of the command will take into consideration only the specified packages:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">packit build in-mock --package my-package-1 --package my-package-2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping up<a href="#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping up" title="Direct link to Wrapping up">​</a></h2><p>If you have a repository in the monorepo format, give it a try now and share your feedback with us!</p><p>Going forward, we are about to implement the <a href="https://github.com/packit/packit-service/issues/2105" target="_blank" rel="noopener noreferrer">possibility of defining dependencies between jobs</a>,
allowing for even greater flexibility and control of monorepository jobs.</p><p>We are also happy to help with any contributions from the community to help us expand and refine the support with additional functionalities,
such as <a href="https://github.com/packit/packit-service/issues/2006" target="_blank" rel="noopener noreferrer">being able to define paths the service should react to</a>
or <a href="https://github.com/packit/packit/issues/1925" target="_blank" rel="noopener noreferrer">templating features</a>.</p>]]></content:encoded>
            <author>lbarczio@redhat.com (Laura Barcziová)</author>
            <category>monorepos</category>
        </item>
        <item>
            <title><![CDATA[Handling of Release field in propose_downstream job]]></title>
            <link>https://packit.dev/posts/release-field-handling</link>
            <guid>https://packit.dev/posts/release-field-handling</guid>
            <pubDate>Tue, 23 May 2023 12:00:00 GMT</pubDate>
            <description><![CDATA[We have recently made some fixes to the process of handling the Release field regarding the %autorelease macro, so let's take that opportunity to explain how it works.]]></description>
            <content:encoded><![CDATA[<p>We have recently made some fixes to the process of handling the <code>Release</code> field regarding the <code>%autorelease</code> macro, so let's take that opportunity to explain how it works.</p><p>You can maintain the <code>Release</code> field manually, you can use a dummy value or you can take advantage of the <code>%autorelease</code> macro.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="maintaining-release-manually">Maintaining <code>Release</code> manually<a href="#maintaining-release-manually" class="hash-link" aria-label="Direct link to maintaining-release-manually" title="Direct link to maintaining-release-manually">​</a></h3><p>You can maintain the <code>Release</code> field manually as you would do downstream, for example you could bump the value every time you make changes to the spec file and reset it to <em>1</em> when you release a new version.</p><p>Packit will not touch the value unless it detects a change in <code>Version</code> and no change in <code>Release</code>. In such case it will reset <code>Release</code> to <em>1</em> in the dist-git spec file, to ensure that the resulting NVR is not higher than any existing NVR in dist-git (that could have been already created by <code>propose_downstream</code> in a different branch for example).</p><p>You most likely want to enable the <code>sync_changelog</code> option so that your upstream <code>%changelog</code> is synchronized to dist-git as well.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-a-dummy-value">Using a dummy value<a href="#using-a-dummy-value" class="hash-link" aria-label="Direct link to Using a dummy value" title="Direct link to Using a dummy value">​</a></h3><p>You can use a value like <em>0</em> or <em>1</em> and never touch it, Packit will make sure it is set to <em>1</em> in the dist-git spec file.
You can do this if you don't care about upstream <code>%changelog</code>, i.e. you have <code>sync_changelog</code> disabled and use <code>copy_upstream_release_description</code> or the <code>changelog-entry</code> action to generate it downstream.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-autorelease">Using <code>%autorelease</code><a href="#using-autorelease" class="hash-link" aria-label="Direct link to using-autorelease" title="Direct link to using-autorelease">​</a></h3><p>You can use the <code>%autorelease</code> macro in the <code>Release</code> field and the <code>%autochangelog</code> macro in <code>%changelog</code>. In this case Packit will not change anything, it will only synchronize changes made to the arguments of the macro (if any).</p><p>If you want to start using <code>%autorelease</code> and <code>%autochangelog</code>, you should <a href="https://docs.pagure.org/fedora-infra.rpmautospec/opting-in.html" target="_blank" rel="noopener noreferrer">do the change</a> in dist-git before releasing a new version upstream and triggering <code>propose_downstream</code> job, otherwise Packit will continue to set <code>Release</code> to <em>1</em> in the dist-git spec file.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="autorelease-in-dist-git"><code>%autorelease</code> in dist-git<a href="#autorelease-in-dist-git" class="hash-link" aria-label="Direct link to autorelease-in-dist-git" title="Direct link to autorelease-in-dist-git">​</a></h2><p>No matter how you maintain the <code>Release</code> field in your upstream spec file, Packit will never overwrite the <code>%autorelease</code> macro if it is used in the dist-git spec file.</p>]]></content:encoded>
            <author>nforro@redhat.com (Nikola Forró)</author>
            <category>specfile</category>
            <category>propose-downstream</category>
        </item>
        <item>
            <title><![CDATA[Packit's pre-commit hooks]]></title>
            <link>https://packit.dev/posts/pre-commit-hooks</link>
            <guid>https://packit.dev/posts/pre-commit-hooks</guid>
            <pubDate>Tue, 16 May 2023 11:00:00 GMT</pubDate>
            <description><![CDATA[pre-commit is a wonderful tool that saves you]]></description>
            <content:encoded><![CDATA[<p><a href="https://pre-commit.com" target="_blank" rel="noopener noreferrer">pre-commit</a> is a wonderful tool that saves you
a lot of time by automatically checking your changes before you
commit and/or push them out.</p><p>For example, in our <a href="https://github.com/packit/packit/blob/main/.pre-commit-config.yaml" target="_blank" rel="noopener noreferrer">packit repo</a>
we run various hooks upon each commit:</p><ul><li><a href="https://github.com/psf/black" target="_blank" rel="noopener noreferrer">Black (Python code formatter)</a>,</li><li><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener noreferrer">Prettier (code formatter)</a>,</li><li><a href="https://pypi.org/project/flake8" target="_blank" rel="noopener noreferrer">Flake8 (Python source code checker)</a>,</li><li><a href="https://github.com/python/mypy" target="_blank" rel="noopener noreferrer">Mypy (static type checker for Python)</a>,</li><li>and <a href="https://github.com/pre-commit/pre-commit-hooks" target="_blank" rel="noopener noreferrer">several other pre-commit hooks</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="our-pre-commit-hooks">Our pre-commit hooks<a href="#our-pre-commit-hooks" class="hash-link" aria-label="Direct link to Our pre-commit hooks" title="Direct link to Our pre-commit hooks">​</a></h2><p><a href="https://github.com/packit/pre-commit-hooks" target="_blank" rel="noopener noreferrer">We also have a few hooks</a>
which we've created and which you might find useful as well.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="check-rebase">check-rebase<a href="#check-rebase" class="hash-link" aria-label="Direct link to check-rebase" title="Direct link to check-rebase">​</a></h3><p>We in Packit love linear git history.
This hook checks whether your branch is up-to-date with the upstream,
and we use it to know when it's time to rebase changes before we push them.</p><p>To try, add this to your <code>.pre-commit-config.yaml</code></p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/packit/pre</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">commit</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">hooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> check</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">rebase</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">args</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">upstream_url</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="validate-config">validate-config<a href="#validate-config" class="hash-link" aria-label="Direct link to validate-config" title="Direct link to validate-config">​</a></h3><p>Packit uses a <a href="https://packit.dev/docs/configuration" target="_blank" rel="noopener noreferrer">YAML configuration file</a>
in an upstream repository.
We have a <a href="https://packit.dev/docs/cli/validate-config" target="_blank" rel="noopener noreferrer">packit validate-config</a> command
to check it, but it's easy to forget (to run it) and notice a typo after you
committed and pushed the changes and waited for some time for Packit to tell you
that in a PR.</p><p>It's much faster to catch the problem before committing and/or pushing the changes.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="validate-config-in-container">validate-config-in-container<a href="#validate-config-in-container" class="hash-link" aria-label="Direct link to validate-config-in-container" title="Direct link to validate-config-in-container">​</a></h4><p>This hook runs (only if there's been a change in the <code>.packit.yaml</code>)
<code>packit</code> in a container (from <a href="https://quay.io/repository/packit/packit" target="_blank" rel="noopener noreferrer">our image</a>),
mounts your sources inside and runs the <code>packit validate-config</code>.</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/packit/pre</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">commit</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">hooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> validate</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">in</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">container</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It requires docker/podman, which can be a problem for example in a
<a href="https://github.com/pre-commit-ci/issues/issues/11" target="_blank" rel="noopener noreferrer">CI</a>.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="validate-config-1">validate-config<a href="#validate-config-1" class="hash-link" aria-label="Direct link to validate-config" title="Direct link to validate-config">​</a></h4><p>Another option is a hook which runs the <code>packit</code> binary directly installed
on the machine. If there's no <code>packit</code>, the hook passes to not break
for example your CI where <code>packit</code> is most likely not installed.</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/packit/pre</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">commit</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">hooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">rev</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">hooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> validate</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">config</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="but-why-the-hook-doesnt-install-packit-itself">But why the hook doesn't install <code>packit</code> itself?<a href="#but-why-the-hook-doesnt-install-packit-itself" class="hash-link" aria-label="Direct link to but-why-the-hook-doesnt-install-packit-itself" title="Direct link to but-why-the-hook-doesnt-install-packit-itself">​</a></h5><p>Right, typically, when you run a pre-commit hook for the first time,
it installs everything it needs.
Like in case of Python, pre-commit <code>pip</code> installs all the dependencies.</p><p>The problem in our case is that <code>packit</code> has a lot of dependencies and
some of them (if missing) are compiled from source when you try to
<a href="https://packit.dev/docs/cli/#from-pypi" target="_blank" rel="noopener noreferrer">pip install packit</a>.
That needs <code>gcc</code> and additional <code>devel</code> packages
to be installed on the machine prior to running the hook for the first time.
That would make the hook usage very user unfriendly, leaving aside that
sometimes (in a CI) you don't have access to the machine to install them
prior to running the hooks.</p>]]></content:encoded>
            <author>jpopelka@redhat.com (Jiří Popelka)</author>
            <category>workflow</category>
        </item>
        <item>
            <title><![CDATA[2022 for Packit]]></title>
            <link>https://packit.dev/posts/2022-features</link>
            <guid>https://packit.dev/posts/2022-features</guid>
            <pubDate>Sat, 28 Jan 2023 10:58:50 GMT</pubDate>
            <description><![CDATA[As you will see in the following paragraphs, the year 2022 was really fruitful for the Packit project. Without further ado, let’s take a look at what the Packit team accomplished last year!]]></description>
            <content:encoded><![CDATA[<p>As you will see in the following paragraphs, the year 2022 was really fruitful for the Packit project. Without further ado, let’s take a look at what the Packit team accomplished last year!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="fedora-automation">Fedora automation<a href="#fedora-automation" class="hash-link" aria-label="Direct link to Fedora automation" title="Direct link to Fedora automation">​</a></h2><p>We have made a huge improvement in downstream automation. At the beginning of the year, we <a href="https://packit.dev/posts/downstream-automation/" target="_blank" rel="noopener noreferrer">finished the workflow</a> and you are now able to use Packit to get your release from upstream via dist-git and Koji to Bodhi. As usual, you can pick just what you need. This workflow consists of three jobs:</p><ul><li><code>propose-downstream</code>: as a reaction to an upstream release, the source archive is saved to a lookaside cache, specfile is updated and sent as a pull request to Fedora dist-git.</li><li><code>koji-build</code>: as a reaction to a new dist-git commit, a new Koji build is triggered (you can specify allowed authors of a commit or merged pull request).</li><li><code>bodhi-update</code>: as a reaction to a successfully finished Koji build, a new Bodhi update is created</li></ul><p><img loading="lazy" alt="Detail of a Bodhi update created by Packit" src="/assets/images/bodhi-update-b24d047f5572831c4ad8de446cf81148.png" width="851" height="477" class="img_ev3q"></p><p>But that wasn’t all. At the very end of the year, the Packit team implemented an alternative to the <code>propose-downstream</code> job that we call <code>pull-from-upstream</code>. The logic of the job is the very same: the source archive is saved to a lookaside cache, specfile is updated and sent as a pull request to Fedora dist-git. The only – and main – difference is that the job is defined downstream (in the default dist-git branch, <code>rawhide</code> or its <code>main</code> alias) so you don’t need to install Packit in the upstream repository. The information about a new release is received from the <a href="https://docs.fedoraproject.org/en-US/package-maintainers/Upstream_Release_Monitoring" target="_blank" rel="noopener noreferrer">Upstream Release Monitoring</a>. The <code>pull-from-upstream</code> job is mainly targeted to the Fedora maintainers without upstream access or with upstream not being supported by Packit. (This job works with any upstream using git.) The setup is nicely described in <a href="https://packit.dev/posts/pull-from-upstream" target="_blank" rel="noopener noreferrer">this blog post</a>. And if you want a dedicated documentation page for the Fedora downstream automation, look at <a href="https://packit.dev/docs/fedora-releases-guide/" target="_blank" rel="noopener noreferrer">https://packit.dev/docs/fedora-releases-guide/</a>.</p><p><img loading="lazy" alt="Pull request created by a pull-from-upstream workflow" src="/assets/images/pull-from-upstream-75eca73c81b62ad029f0c029f0b4e557.png" width="1089" height="886" class="img_ev3q"></p><p>And that’s still not all, we’ve also added <code>propose-downstream</code> to <a href="https://dashboard.packit.dev" target="_blank" rel="noopener noreferrer">our dashboard</a>. You can now the jobs in <a href="https://dashboard.packit.dev/pipelines" target="_blank" rel="noopener noreferrer">the Pipelines view</a>. Also, logs can be checked on a detail page (that can be accessed from a status of a release commit).</p><p><img loading="lazy" alt="Propose downstream result page" src="/assets/images/propose-downstream-result-page-a2d517abb0153c630f4f03b2ad8ccda5.png" width="887" height="617" class="img_ev3q"></p><p>Still not convinced we’ve done a lot? When using various downstream jobs, you can still hit an issue now and then. (Messages from Fedora infrastructure can get lost or some intermittent error can occur.) Packit automatically retries to overcome temporary issues, but sometimes it’s not enough or there is a real problem that needs to be fixed elsewhere. We can’t resolve the real problems for you, but we can help let you retry the job when needed. And you have two places where to do that.</p><p>As you might be used to with the <code>propose-downstream</code> job, you can use comments in an upstream issue to retrigger Bodhi updates and Koji builds as well. Just configure <a href="https://packit.dev/docs/configuration/#issue_repository" target="_blank" rel="noopener noreferrer"><code>issue_repository</code></a> so Packit knows where to create issues in case of problems. (This does not need to be an upstream issue and this repository can be used for multiple projects.) Alternatively, if you use dist-git pull requests (either made by Packit or other maintainers), you can use a pull request comment to retrigger Koji Build or Bodhi update.</p><p><img loading="lazy" alt="Comment to recreate a Bodhi update" src="/assets/images/dist-git-pull-request-comment-61dc300ce80bfec8c7ec5dd2baf20c92.png" width="735" height="510" class="img_ev3q"></p><p>If you are interested in what Packit has done for its users, you can take a look at the activity of the <code>packit</code> (or <code>packit-stg</code>) FAS user in <a href="https://src.fedoraproject.org/user/packit" target="_blank" rel="noopener noreferrer">dist-git</a>, <a href="https://koji.fedoraproject.org/koji/userinfo?userID=4641" target="_blank" rel="noopener noreferrer">Koji</a> or <a href="https://bodhi.fedoraproject.org/users/packit" target="_blank" rel="noopener noreferrer">Bodhi</a>.</p><p><img loading="lazy" alt="Dist-git activity of Packit user" src="/assets/images/packit-dist-git-activity-b6d823fb44b606593470d5657524a98d.png" width="1105" height="389" class="img_ev3q">
<img loading="lazy" alt="Koji builds triggered by Packit user" src="/assets/images/packit-koji-builds-24b249549037f0d79822c9e851211e09.png" width="1087" height="374" class="img_ev3q">
<img loading="lazy" alt="Bodhi updates created by Packit user" src="/assets/images/packit-bodhi-updates-all-5b9ac688507f64dafe5284c5e9c7a4a9.png" width="1126" height="327" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="srpm-in-copr">SRPM in Copr<a href="#srpm-in-copr" class="hash-link" aria-label="Direct link to SRPM in Copr" title="Direct link to SRPM in Copr">​</a></h2><p>Throughout the 2022 we have implemented support for building SRPMs in the Copr and slowly started introducing newly-onboarded projects to use Copr right from the start. The definitive switch to Copr has been done at the beginning of 2023. For more details, take a look at the <a href="https://packit.dev/posts/copr-srpms/" target="_blank" rel="noopener noreferrer">relevant blog post</a>, but let’s shortly describe the benefits:
Most importantly, you can now use <a href="https://packit.dev/docs/configuration/#srpm_build_deps" target="_blank" rel="noopener noreferrer"><code>srpm_build_deps</code></a> config option to specify the dependencies needed for the build. With the <a href="https://github.com/packit/sandcastle" target="_blank" rel="noopener noreferrer">old solution</a>, this process was manual, global and had to be done by Packit maintainers. Another advantage of being able to use Copr for SRPM builds is access to the SRPM artifacts.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="self-mapping-of-fas-account">Self-mapping of FAS account<a href="#self-mapping-of-fas-account" class="hash-link" aria-label="Direct link to Self-mapping of FAS account" title="Direct link to Self-mapping of FAS account">​</a></h2><p>From the beginning of the Packit project, for every Packit GitHub installation, we have required a Fedora account so we can be sure, that we are safe to use Fedora systems (like Copr or dist-git) on behalf of that user. Since we automate various tasks for you, we’ve made it possible for you to perform this yourself. (Thanks to the user config field in the Fedora Account System.)
If you are interested in how this works, take a look at the blog post we’ve prepared for you: <a href="https://packit.dev/posts/fas-verification-automation/" target="_blank" rel="noopener noreferrer">https://packit.dev/posts/fas-verification-automation/</a></p><p>If you wonder why we check permissions for the installation, we have good news for you. This year, we plan to improve the permission schema, do the checks for each job, and require only what is needed. But more about the plans for 2023 later.</p><p><img loading="lazy" alt="Self-mapping process in an issue" src="/assets/images/verify-fas-355a7111420aea52229c20f33a86322c.png" width="932" height="397" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="multiple-project-test-runs">Multiple-project test runs<a href="#multiple-project-test-runs" class="hash-link" aria-label="Direct link to Multiple-project test runs" title="Direct link to Multiple-project test runs">​</a></h2><p>If you have multiple connected projects (as we do) and work on a feature spanning more of them, the following feature might come in handy. You can use a commit command with a reference to the other pull request and Packit will use Copr builds from both pull requests during the tests. Want to know more? Check this blog post: <a href="https://packit.dev/posts/testing-farm-triggering/" target="_blank" rel="noopener noreferrer">https://packit.dev/posts/testing-farm-triggering/</a></p><p><img loading="lazy" alt="Test with external build" src="/assets/images/test-for-external-build-90b12f4f5294499b998234a477d6dbd8.png" width="923" height="884" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="specfile-library">Specfile library<a href="#specfile-library" class="hash-link" aria-label="Direct link to Specfile library" title="Direct link to Specfile library">​</a></h2><p>This one might not be relevant to most of our users, but we would still like to announce, that we’ve created <a href="https://github.com/packit/specfile" target="_blank" rel="noopener noreferrer">a Python library</a> for specfile manipulation. It can not only parse various weird spec files but also can edit them with as little diff as possible. Also, the code is really interesting so check it out. Now, it’s used by Packit and <a href="https://github.com/rebase-helper/rebase-helper" target="_blank" rel="noopener noreferrer">rebase-helper</a> and you can watch <a href="https://www.youtube.com/watch?v=yzMfBPdFXZY&amp;t=17s" target="_blank" rel="noopener noreferrer">this demo</a> if you want to know more.
In case you’ve missed that, this is not the first time we’ve extracted a part of our codebase for wider usage – another nice example is a <a href="https://github.com/packit/ogr/" target="_blank" rel="noopener noreferrer">forge-independent Python library for GitHub/GitLab/Pagure API called OGR</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vm-image-builds">VM Image Builds<a href="#vm-image-builds" class="hash-link" aria-label="Direct link to VM Image Builds" title="Direct link to VM Image Builds">​</a></h2><p>Having Copr builds available for your pull-requests is really nice, but you can now have VM image builds as well. It would be really wasteful to do this for each and every commit so we decided to trigger this by a <code>/packit vm-image-build </code> comment. Similarly to other jobs, Packit uses an external system to do the hard work. This feature is possible thanks to the <a href="https://console.redhat.com/insights/image-builder" target="_blank" rel="noopener noreferrer">Red Hat Image Builder</a>. This feature is a fresh start on this journey and we are investigating the possibilities of Packit in this field. Check <a href="https://packit.dev/docs/configuration/upstream/vm_image_build" target="_blank" rel="noopener noreferrer">our documentation</a> and let us know what you think.</p><p><img loading="lazy" alt="VM image build as a result of the comment" src="/assets/images/vm-image-build-9778abe48e8d422ff8863368f4df2930.png" width="1103" height="820" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="plans-for-the-next-year">Plans for the next year<a href="#plans-for-the-next-year" class="hash-link" aria-label="Direct link to Plans for the next year" title="Direct link to Plans for the next year">​</a></h2><p>Do you wonder what we plan for you for the year 2023? That is not a secret. For some time, we have been opening our planning and since the last year, you can check our <a href="https://github.com/orgs/packit/projects/7/" target="_blank" rel="noopener noreferrer">Kanban board</a> since it has become the primary place we use on daily bases. (It used to be half-manually and half-automatically synced.)
Every quarter, our team sits down and discusses our plans for the next three months. We use MOSCOW (=MUST x SHOULD x COULD x WON’T) prioritisation method to group and compare all of our epics. The result of this time’s planning can be seen <a href="https://github.com/orgs/packit/projects/7/views/25" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Do you want to know how we decide and how you can influence us? It’s pretty easy. Firstly, we need to know about a bug or feature request. Secondly, the task needs to be worth the work. (And should be related to our mission.) We can’t work on everything so we need to pick the work with a bigger impact (a lot of projects will benefit from that or a significant benefit for a smaller group). So shortly, if you want something to be done: create an issue, provide a clear reasoning why we should do that and find other projects that can benefit from that.</p><p>And also, our project is open source. We are more than happy to help anyone contribute to our code base!</p><hr><p>With that, I, personally, would like to thank all of the Packit team members for their outstanding work during the year. And I also would like to thank you, our users, for using our project, being kind, helpful and patient! I wish you all a happy new year and less mundane work as possible!</p><p>On behalf of the Packit team,
František</p>]]></content:encoded>
            <author>flachman@redhat.com (František Lachman)</author>
            <category>2022</category>
            <category>yearly-features</category>
            <category>summary</category>
        </item>
        <item>
            <title><![CDATA[Automatic pulling of upstream releases to Fedora]]></title>
            <link>https://packit.dev/posts/pull-from-upstream</link>
            <guid>https://packit.dev/posts/pull-from-upstream</guid>
            <pubDate>Mon, 23 Jan 2023 08:23:44 GMT</pubDate>
            <description><![CDATA[In the previous year, we automated the Fedora downstream release process in Packit.]]></description>
            <content:encoded><![CDATA[<p>In the previous year, we <a href="/posts/downstream-automation">automated</a> the Fedora downstream release process in Packit.
The first step of the release process, propagating the upstream release to Fedora,
is covered by the <a href="/docs/configuration/upstream/propose_downstream"><code>propose_downstream</code></a> job.
This job updates the sources in Fedora, the spec file, and other needed files and creates pull requests with the changes
in the dist-git repository.</p><p>The downside of this job is that for its execution, users need to install Packit Service GitHub/GitLab
app since this job reacts only to GitHub/GitLab release webhooks.
However, the person who maintains the package in Fedora may not be the upstream maintainer and may not have admin access
to the upstream GitHub/GitLab repository.</p><p>To cover this case, we came up with a new job called <code>pull_from_upstream</code>, which aims to update Fedora dist-git similarly
to <code>propose_downstream</code>, but is configured directly in the dist-git repository.
Let's now look at how to set it up and how it works.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a href="#setup" class="hash-link" aria-label="Direct link to Setup" title="Direct link to Setup">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="upstream-release-monitoring">Upstream release monitoring<a href="#upstream-release-monitoring" class="hash-link" aria-label="Direct link to Upstream release monitoring" title="Direct link to Upstream release monitoring">​</a></h3><p><code>pull_from_upstream</code> job reacts to a new bug in <a href="https://bugzilla.redhat.com/" target="_blank" rel="noopener noreferrer">Bugzilla</a> about a new upstream version
of a project. The bug is automatically created by
<a href="https://docs.fedoraproject.org/en-US/package-maintainers/Upstream_Release_Monitoring/" target="_blank" rel="noopener noreferrer">Upstream Release Monitoring</a>.
To enable the Upstream Release Monitoring:</p><ol><li><p>Add the upstream project (if it is not there yet)
to <a href="https://release-monitoring.org/" target="_blank" rel="noopener noreferrer">Anitya</a> and configure the mapping to a Fedora package:
<img loading="lazy" alt="Project in Anitya" src="/assets/images/anitya-project-895fdf4a3840fb0f008e6e004219b65e.png" width="598" height="705" class="img_ev3q"></p></li><li><p>Enable the monitoring in the dist-git repository (<a href="https://src.fedoraproject.org" target="_blank" rel="noopener noreferrer">Fedora Package Sources</a>):</p></li></ol><p><img loading="lazy" alt="Monitoring in dist-git" src="/assets/images/dist-git-monitoring-072d1b24827060d7f1818cc11c3e47df.png" width="539" height="521" class="img_ev3q"></p><div class="theme-admonition theme-admonition-info alert alert--info admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_S0QG"><p>In Anitya, there are multiple backends you can configure the mapping for.
Besides GitHub or GitLab, you can use e.g. PyPI, pagure, or
<a href="https://release-monitoring.org/static/docs/user-guide.html#backends" target="_blank" rel="noopener noreferrer">many others</a>.
Also, be aware that there can be a delay in retrieving the new version,
so the update to Fedora is usually not created instantly (e.g. for Python projects,
it is better to configure PyPI backend rather than GitHub since the monitoring
there is much less delayed).</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="packit-configuration">Packit configuration<a href="#packit-configuration" class="hash-link" aria-label="Direct link to Packit configuration" title="Direct link to Packit configuration">​</a></h3><p>To automatically pull the upstream release as a reaction to the bug in Bugzilla, <code>pull_from_upstream</code> job
together with the <code>upstream_project_url</code> configuration option, needs to be defined in the default branch
(<code>rawhide</code>) of the dist-git repository in the Packit configuration file (see
<a href="/docs/configuration/downstream/pull_from_upstream">our documentation</a>). The <a href="/docs/configuration#upstream_project_url"><code>upstream_project_url</code></a> needs to be a URL
pointing to a Git repository so that we can do <code>git</code> commands on it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pull_from_upstream-in-action"><code>pull_from_upstream</code> in action<a href="#pull_from_upstream-in-action" class="hash-link" aria-label="Direct link to pull_from_upstream-in-action" title="Direct link to pull_from_upstream-in-action">​</a></h2><p>Let's showcase the new job in action for the latest release of
<a href="https://pypi.org/project/packitos/" target="_blank" rel="noopener noreferrer">Packit itself</a>.</p><p>As you can see in the <code>Setup</code> section above, the Upstream Release Monitoring is configured:
there is a PyPI project <code>packitos</code> in Anitya
with configured mapping to the Fedora package <code>packit</code> and the monitoring in the
<a href="https://src.fedoraproject.org/rpms/packit" target="_blank" rel="noopener noreferrer"><code>packit</code> dist-git repository</a> is enabled.
We could configure the mapping in Anitya from the GitHub project directly instead, and it would work as well. Just be aware that
for each Fedora package, there can be a mapping only from one project.</p><p>In Packit configuration file, we have configured the job and related options:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">upstream_project_url</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/packit/packit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">issue_repository</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/packit/packit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">copy_upstream_release_description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_from_upstream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">dist_git_branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> epel</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can see that version <code>0.66.0</code> of Packit (<code>packitos</code> in PyPI) was released:</p><p><img loading="lazy" alt="Packit release PyPI" src="/assets/images/packit-release-pypi-d9a9d2675c7d4349e41b296190e10665.png" width="1128" height="456" class="img_ev3q"></p><p>When Upstream Release Monitoring retrieved this new version, it created a new bug:</p><p><img loading="lazy" alt="Bugzilla" src="/assets/images/packit-release-bugzilla-2b6ecea0deabb2e89a2c4e57838bfca8.png" width="448" height="179" class="img_ev3q"></p><p>This triggered Packit, and after checking the Packit configuration in dist-git
and finding the <code>pull_from_upstream</code> job, this job was run.</p><p>Using the <code>upstream_project_url</code> from the configuration, Packit was able to get the needed information
from the corresponding GitHub release:
<img loading="lazy" alt="Packit release GitHub" src="/assets/images/packit-gh-release-8041fa5c1f87fee966813e716db076f1.png" width="1142" height="645" class="img_ev3q"></p><p>As a result, pull requests for configured branches were created.
Here is an example of one of the created pull requests and part of its content:
<img loading="lazy" alt="Dist-git PR" src="/assets/images/pull-from-upstream-pr-084101cf1b0cbbefbf0797ef6638c0d8.png" width="743" height="323" class="img_ev3q">
<img loading="lazy" alt="Pull request content" src="/assets/images/pull-from-upstream-content-1465ffb64bb623bf4bda8d5accef38d0.png" width="1110" height="950" class="img_ev3q"></p><p>Since we have configured the <a href="/docs/configuration#issue_repository"><code>issue_repository</code></a>, we could be
also notified about errors:
<img loading="lazy" alt="Pull from upstream issue" src="/assets/images/pull-from-upstream-issue-0699d8c149066d81d53dd2318043eabc.png" width="930" height="474" class="img_ev3q"></p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Update July 2023</div><div class="admonitionContent_S0QG"><p>It is now also possible to retrigger the job, see
<a href="/docs/configuration/downstream/pull_from_upstream#retriggering">the details</a>.</p></div></div><p>Also, if you need to do any change in the pull request, you need to locally fetch the source branch
of the Packit's pull request and push it (with a fix) to your fork (as it is not possible to push to the branch
created in the Packit's fork):</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git fetch ssh://$USER.fedoraproject.org/forks/packit/rpms/$YOUR_PACKAGE.git refs/heads/*:refs/remotes/packit/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git cherry-pick packit/$VERSION-$BRANCH-update-pull_from_upstream</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="few-words-in-the-end">Few words in the end<a href="#few-words-in-the-end" class="hash-link" aria-label="Direct link to Few words in the end" title="Direct link to Few words in the end">​</a></h2><p><code>pull_from_upstream</code> has just been implemented; therefore, we encourage you to help
test it out and make it perfect! There are still some limitations (e.g. regarding upstreams,
see <a href="/docs/configuration/downstream/pull_from_upstream">documentation</a>), which we are trying to resolve as soon as possible.
We believe this functionality
could be beneficial for maintainers of Fedora packages and could even be integrated further.
Any <a href="https://github.com/packit/packit-service/issues/new" target="_blank" rel="noopener noreferrer">suggestions</a> and feedback are welcomed
(see <a href="/#contact">contacts</a>).</p><p>If you are interested in details of customization of
the <code>pull_from_upstream</code> job and in the whole downstream automation, make sure to check out
<a href="/docs/fedora-releases-guide">our Fedora release guide</a> as well!</p>]]></content:encoded>
            <author>lbarczio@redhat.com (Laura Barcziová)</author>
            <category>downstream</category>
        </item>
        <item>
            <title><![CDATA[Running tests with builds from another PR]]></title>
            <link>https://packit.dev/posts/testing-farm-triggering</link>
            <guid>https://packit.dev/posts/testing-farm-triggering</guid>
            <pubDate>Wed, 21 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Do you contribute to projects which depend on each other?]]></description>
            <content:encoded><![CDATA[<p>Do you contribute to projects which depend on each other?
Would you like to test changes spanning multiple repositories together before merging them to the main branch?
Then look no further, Packit's new feature of the Testing Farm integration is what you are looking for!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-works">How it works<a href="#how-it-works" class="hash-link" aria-label="Direct link to How it works" title="Direct link to How it works">​</a></h3><p>To enable such testing, there is no additional configuration required in your <code>packit.yaml</code>, the typical <a href="/docs/testing-farm">Testing Farm configuration</a> is sufficient.
Once you open a pull request with some changes, tests are going to run as usual with all dependencies being installed based on the test definition, e.g. from Fedora repositories.
To trigger tests with builds from a pull request in another repository, add a comment to the pull request of the form:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/packit test &lt;namespace&gt;/&lt;repo&gt;#&lt;pr-id&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Based on this comment, Testing Farm will first install the recent successful builds created by Packit in the given pull request and then run the tests.
In order for this to work, there must be successful builds for the targets that you are running tests for.
For example, if you are testing against Fedora 36, the pull request that you want to install builds from must contain a successful Fedora 36 build by Packit.</p><p>Let's look at a simple example to demonstrate this feature better.
The Packit CLI uses a library called <code>specfile</code> to modify RPM spec files.
Recently, <code>specfile</code> has added a new feature which makes accessing the <code>Epoch</code> field in the spec file more convenient and we would like to make use of this feature.
However, the changes have not made it to a Fedora release yet, trying to use this feature will result in an error:</p><p><img loading="lazy" alt="Tests in Testing Farm fail" src="/assets/images/testing_farm_failed-f53ec0611bf89aee0e9eedd30a992814.png" width="1091" height="786" class="img_ev3q"></p><p><img loading="lazy" alt="Test log in Testing Farm" src="/assets/images/testing_farm_failed_log-b4f3f67d4ae5d36021eda7ef2f9d0030.png" width="978" height="353" class="img_ev3q"></p><p>As we can see in the screenshots, during artifact installation, the latest <code>specfile</code> release from Fedora was installed, however it lacks the feature that we are looking to test.
Let's now retrigger the tests, but specify that we want to install builds from the pull request in <code>specfile</code> which introduced the changes:</p><p><img loading="lazy" alt="Retriggering tests with builds from another PR" src="/assets/images/testing_farm_retrigger-b67508e5263e2ee7f49b367670fcdd80.png" width="1095" height="727" class="img_ev3q"></p><p>Hooray! The copr builds from PR 165 were installed before the tests were run in Testing Farm which enabled us to test the feature inside Packit CLI.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="wrapping-up">Wrapping up<a href="#wrapping-up" class="hash-link" aria-label="Direct link to Wrapping up" title="Direct link to Wrapping up">​</a></h3><p>We hope that this new feature makes upstream testing even more convenient than it previously was.
The feature is still quite new, and we would love to hear what you think about it.
As always, if you run into any trouble or have any ideas how to improve this functionality,
do not hesitate to <a href="/#contact">reach out to us</a>.
We will be happy to help.</p>]]></content:encoded>
            <category>testing-farm</category>
        </item>
        <item>
            <title><![CDATA[Automation of FAS verification in Packit Service]]></title>
            <link>https://packit.dev/posts/fas-verification-automation</link>
            <guid>https://packit.dev/posts/fas-verification-automation</guid>
            <pubDate>Tue, 24 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[As you may already know, for using Packit Service]]></description>
            <content:encoded><![CDATA[<p>As you may already know, for using Packit Service
GitHub App we <a href="/docs/guide#2-approval">require our users to have a valid Fedora Account System account</a>.
We were verifying the newcomers until now manually, but in recent weeks, we have implemented an automated solution
for it. Let's take a closer look at how it is done currently and what have we improved!</p><p>Formerly, the process of verification by us started by waiting for the users to provide
us their FAS username, then checking whether the provided FAS account
exists and matches, and finally, manually adding the account to our allowlist in the database. For the communication with
new users, we have used our <a href="https://github.com/packit/notifications/issues" target="_blank" rel="noopener noreferrer"><code>packit/notifications</code></a>
repository on GitHub where we created an issue for each new installation.</p><p>Although in general, this worked, it required human interaction and since we are not available 24/7, the verification wasn't immediate.
We wanted to simplify the process for both users and us.
Since in FAS, everyone can set their GitHub login that is then publicly available, we decided to utilize this setting.</p><p>So how does the verification work now?</p><p>For each new GitHub installation, we first check whether there isn't a FAS account with the same login as the one
that triggered the installation. If we find such an account, we check whether the <code>GitHub Username</code> in this FAS account matches
the GitHub login of the one that triggered the installation. To get the information about the FAS accounts, we
use the <a href="https://github.com/fedora-infra/fasjson-client" target="_blank" rel="noopener noreferrer"><code>fasjson-client</code> library</a>.
If this check doesn't prove any match, we create an issue in the
<code>packit/notifications</code> repository as previously. This is what it looks like:</p><p><img loading="lazy" alt="Issue in packit/notifications" src="/assets/images/notifications-repo-issue-aca66e4b420cfe5d05c205fcf0020f92.png" width="926" height="467" class="img_ev3q"></p><p>As you can see, it contains instructions on how to trigger the verification automatically. So, everything the person who installed the app needs to do is set the <code>GitHub Username</code> field in their FAS account (if they don't have it set
already) and then provide the FAS login via Packit comment command <code>/packit verify-fas the-fas-account</code>.</p><p>Once the user does this, our service runs the same verification again (with the FAS username provided in the command) and informs users about the status
via a comment in the same issue. The successful verification looks like this:</p><p><img loading="lazy" alt="Successful verification" src="/assets/images/verify-fas-355a7111420aea52229c20f33a86322c.png" width="932" height="397" class="img_ev3q"></p><p>This should save both users and our time and hopefully make the onboarding process smoother for the newcomers.
Since this is a pretty new feature,
let us know whether there is something that is not clear so that we can improve it.</p>]]></content:encoded>
            <author>lbarczio@redhat.com (Laura Barcziová)</author>
            <category>fas</category>
        </item>
        <item>
            <title><![CDATA[Downstream automation is here]]></title>
            <link>https://packit.dev/posts/downstream-automation</link>
            <guid>https://packit.dev/posts/downstream-automation</guid>
            <pubDate>Fri, 06 May 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Finally, it's here. Now, you can do the whole Fedora release with the help of Packit.]]></description>
            <content:encoded><![CDATA[<p>Finally, it's here. Now, you can do the whole Fedora release with the help of Packit.
Let's take a look at how it works on an example of <a href="https://github.com/packit/ogr" target="_blank" rel="noopener noreferrer">OGR</a>, the Python library we develop.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="upstream">Upstream<a href="#upstream" class="hash-link" aria-label="Direct link to Upstream" title="Direct link to Upstream">​</a></h2><p>The process of releasing a new version starts in the upstream repository.
Here, we can see an upstream release:</p><p><img loading="lazy" alt="Upstream release" src="/assets/images/upstream_release-529c0916055286b228c4e1b631529fa4.png" width="1108" height="588" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="propose-downstream">Propose downstream<a href="#propose-downstream" class="hash-link" aria-label="Direct link to Propose downstream" title="Direct link to Propose downstream">​</a></h2><p>As the first step on our way to Fedora users, we need to get the new upstream release to the Fedora dist-git.
This is what we call <code>propose-downstream</code> job.
Here is a snippet from the config file of OGR:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">downstream_package_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> python</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ogr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">copy_upstream_release_description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> propose_downstream</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">dist_git_branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> epel</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>How does the <code>propose-downstream</code> work?
As a first step, the archive is saved to lookaside cache
and after that, Packit updates the dist-git content (mainly <code>sources</code> file and spec-file)
via pull-requests for the specified branches. (Direct push is possible only for CLI by setting a
<a href="https://packit.dev/docs/configuration/#create_pr" target="_blank" rel="noopener noreferrer"><code>create_pr</code> option</a> to <code>false</code>.)</p><p>If you use <a href="https://packit.dev/docs/configuration/#copy_upstream_release_description" target="_blank" rel="noopener noreferrer"><code>copy_upstream_release_description: true</code></a>,
as in the config above,
the changelog entry will use the GitHub/GitLab release description field.
(Just make sure the formatting is compatible with spec-file.
E.g. use <code>-</code> instead of <code>*</code> for lists to not create multiple changelog entries.)</p><p>And how is it triggered?
Packit gets the information about the newly created release from GitHub/GitLab (via webhook),
loads the config from the release commit and if there is a <code>propose-downstream</code> job
defined, the workflow begins.</p><p>Here are the pull-requests created by Packit:</p><p><img loading="lazy" alt="List of downstream pull-requests created by Packit" src="/assets/images/distgit_prs-cf5788b3b23d52d771960621f308eab8.png" width="1089" height="420" class="img_ev3q"></p><p>And here are the details of the one created for <code>f35</code> branch:</p><p><img loading="lazy" alt="Downstream pull-request created by Packit" src="/assets/images/distgit_pr_detail-e34816e0dd354d7b35afc8131f517551.png" width="736" height="409" class="img_ev3q">
<img loading="lazy" alt="Downstream pull-request created by Packit: changes in specfile" src="/assets/images/distgit_pr_specfile-134e1c00d39c6afb809ae31a5af19d66.png" width="1094" height="734" class="img_ev3q"></p><p>Now, it's on downstream CI systems and maintainer to check the changes and merge
the pull-request.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="koji">Koji<a href="#koji" class="hash-link" aria-label="Direct link to Koji" title="Direct link to Koji">​</a></h2><p>If Packit sees a new commit in the configured dist-git branch, it submits a new build in Koji
like maintainers usually do. (The commits without any spec-file change are skipped.)</p><p><img loading="lazy" alt="List of Koji builds triggered by Packit" src="/assets/images/koji_builds-2f1af2ff0b81650da2cef9d25fcdaae4.png" width="965" height="141" class="img_ev3q"></p><p>Here is a job definition for the package we use as an example:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> koji_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> commit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">dist_git_branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> epel</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>There is no UI provided by Packit for the job,
but it is visible across Fedora systems (like you can see in the following image)
like a manually created Koji build and you can utilise
<a href="https://apps.fedoraproject.org/notifications/about" target="_blank" rel="noopener noreferrer">Fedora Notifications</a>
to get informed about the builds.</p><p><img loading="lazy" alt="Build status in merged downstream pull-request" src="/assets/images/distgit_pr_build_status-3f4561f6c2fbdaaf76616bd060e80b23.png" width="725" height="499" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bodhi">Bodhi<a href="#bodhi" class="hash-link" aria-label="Direct link to Bodhi" title="Direct link to Bodhi">​</a></h2><p>Once Packit is informed (via fedora-messaging bus) about the successful Koji build,
it creates a new update in Bodhi for you.</p><p><img loading="lazy" alt="List of Bodhi updates created by Packit" src="/assets/images/bodhi_updates-bb4320cda3965b1d3feff7b14e561373.png" width="992" height="222" class="img_ev3q"></p><p>Here is a job definition:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">job</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bodhi_update</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">trigger</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> commit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">dist_git_branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> fedora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">branched </span><span class="token comment" style="color:#999988;font-style:italic"># rawhide updates are created automatically</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> epel</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The packit config is loaded from the commit the build is triggered from.</p><p>Here is an example of the resulting Bodhi update:</p><p><img loading="lazy" alt="Bodhi update created by Packit" src="/assets/images/bodhi_update_detail-c18320c042648314d31a9b4609aec94b.png" width="743" height="266" class="img_ev3q"></p><p>And that's all. The rest is on the users and maintainers to give the update enough Karma
so the update gets to the users.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2><p>Does it look simple? Yes, it is. We try to automate
as much as possible but still leave the space for human intervention where it is needed --
pull-request review and verification of the Bodhi update.
Of course, in case of some errors, a human can (and should)
replace the work of a bot.
Other manual, mundane and waiting tasks are replaced by Packit.</p><p>Please, try it yourself and let us know what do you think.
Those jobs are really new and some issues might occur.
But we will try to fix those and if you have any suggestions
for improvement, please, <a href="https://github.com/packit/packit-service/issues/new/choose" target="_blank" rel="noopener noreferrer">create an issue</a> so we can
see if the request is doable and we can try to implement it.
And of course, code contribution is more than welcome as well.</p>]]></content:encoded>
            <author>flachman@redhat.com (František Lachman)</author>
            <category>propose-downstream</category>
        </item>
        <item>
            <title><![CDATA[Building SRPMs in Copr]]></title>
            <link>https://packit.dev/posts/copr-srpms</link>
            <guid>https://packit.dev/posts/copr-srpms</guid>
            <pubDate>Mon, 07 Mar 2022 11:57:40 GMT</pubDate>
            <description><![CDATA[Let's find out how Packit builds your SRPMs in the Copr.]]></description>
            <content:encoded><![CDATA[<p>Let's find out how Packit builds your SRPMs in the Copr.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h3><p>If you use Packit to build RPMs for your upstream code changes, likely,
you have already read about how does Packit build your <a href="http://ftp.rpm.org/max-rpm/s1-rpm-miscellania-srpms.html" target="_blank" rel="noopener noreferrer">SRPMs</a>.
If not, then just a short recap:
Each time an RPM build is triggered, Packit builds an SRPM and then submits
the created SRPM file to Copr where Copr takes care of building the actual RPMs.
Since you can modify the behaviour of building SRPMs by defining <a href="/docs/configuration/actions">actions</a>,
this process needs to be run in an isolated environment. For this, we implemented our
<a href="https://github.com/packit/sandcastle" target="_blank" rel="noopener noreferrer">sandboxing mechanism</a>,
which simply runs the provided commands in an Openshift pod freshly created for each build.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="problems-of-the-previous-workflow-for-srpm-builds">Problems of the previous workflow for SRPM builds<a href="#problems-of-the-previous-workflow-for-srpm-builds" class="hash-link" aria-label="Direct link to Problems of the previous workflow for SRPM builds" title="Direct link to Problems of the previous workflow for SRPM builds">​</a></h4><p>This is a pretty good-functioning workflow, but it has some downsides which have become more and more annoying
with the growing user base. Because of the resources, we have set limits for Openshift pods running at one time.
This directly affects how many SRPM builds can run in parallel. As a result, when there are too many requests for (S)RPM builds,
some can get stuck in the queue while waiting for other builds to finish. Another inconvenience coming with pods being
always freshly created is copying the needed data into
and from the pod. This has also cost us some months of desperate debugging of weird errors.
Another disadvantage is that users cannot easily configure dependencies for their actions run during building SRPMs.
We have to install the dependencies manually on-demand, but of course, which is not flexible.</p><p>We were thinking about improving the process for a long time but never reached any clear conclusion.
Then in one of our architecture meetings, when we tried to solve another
issue related to our sandboxing solution, Pavel Raiskup from Copr team asked us why didn't
we build the SRPMs directly in Copr. We knew that there is a way of building SRPMs in Copr,
but weren't aware of the details and how would this fit our use case.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-of-the-copr-srpms">Implementation of the Copr SRPMs<a href="#implementation-of-the-copr-srpms" class="hash-link" aria-label="Direct link to Implementation of the Copr SRPMs" title="Direct link to Implementation of the Copr SRPMs">​</a></h3><p>After some research of the <a href="https://docs.pagure.org/copr.copr/custom_source_method.html" target="_blank" rel="noopener noreferrer">Copr custom source method</a>, we
decided to give it a try. To make Copr build the SRPMs, Copr needs to be provided
with a script that will prepare the sources used to build an SRPM.
Therefore, we created the <code>packit prepare-sources</code> command, which mostly reuses existing code that is run also in the sandbox
workflow. It prepares the specfile, archive and other sources and then moves
them to a separate directory. So with the new implementation,
with each request to run (S)RPM build, Packit sends a dynamically created "script" to Copr that invokes our new command.
Here is what the script can look like:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git config --global user.email "hello@packit.dev"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git config --global user.name "Packit"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resultdir=$PWD</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">packit -d prepare-sources --result-dir "$resultdir" --pr-id 676 --job-config-index 2 https://github.com/packit/ogr</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You can see that a pull request should be checked out or which job defined
in your Packit job config is the trigger of this action. And that's it! Copr finds the sources and builds SRPM from them.
Packit listens to the messages about the start and end of the build and similarily as for RPM builds, reports the
state via commit statuses/checks and provides the URL with the logs.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deployment-phases">Deployment phases<a href="#deployment-phases" class="hash-link" aria-label="Direct link to Deployment phases" title="Direct link to Deployment phases">​</a></h3><p>Since this change is pretty significant, we wanted to start using this workflow gradually and catch all the problems
before we get rid of the previous workflow for SRPMs.
At first, we tested how does the new solution work in our projects. The only disadvantage
was that the actual build process
takes a little longer than in sandcastle as we get an isolated environment where all the packages are installed for each new build.
On the other hand, Copr usually starts the build very soon after it is submitted, so no long wait time until some other build is finished.
In the initial implementation, we installed a list of dependencies
<a href="https://github.com/packit/sandcastle/blob/ece539650770fea057877f0c97074acf506fada4/files/install-rpm-packages.yaml#L5" target="_blank" rel="noopener noreferrer">which are present</a> in our
sandbox which also increased the build time a bit.</p><p>So as the following step we added the functionality to define dependencies for actions in the
Packit config file with <a href="/docs/configuration#srpm_build_deps"><code>srpm_build_deps</code> key</a>.</p><p>Example of how the configuration of <code>srpm_build_deps</code> can look like:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">actions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">create-archive</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"python3 setup.py sdist --dist-dir ."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"sh -c 'echo packitos-$(python3 setup.py --version).tar.gz'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">get-current-version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"python3 setup.py --version"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">srpm_build_deps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> python3</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">pip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> python3</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">setuptools_scm</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We also decided that presence of this key in the config will be for some period an indicator to build the SRPMs in Copr. With this approach, anyone can configure
their dependencies and play with adding and adjusting them as needed without directly breaking
the builds in their repository. When the builds in the PR pass, the configuration change can be merged and the new approach
will be used for the whole repository. We wanted
to kick off this process and therefore started opening PRs with dependencies configuration for projects that use
the RPM builds functionality the most. During this phase, you can reach out to us with your feedback, so we can
improve it even more!</p><p>As a next step, we use the new approach for GitHub app installations made since September 6, 2022.</p><p>And as of January 10th 2023, we switched to building all SRPMs in Copr
and thus got rid of using our sandbox for building SRPMs entirely.</p><p>Since we don't want to break your CI results because of missing dependencies, we will use the previously linked list of deps.
As the list is pretty long, we encourage you to define your dependencies on your own. If you
bump into any troubles with setting up SRPM builds in Copr, please,
<a href="/#contact">reach out to us</a>, we will be glad to help!</p>]]></content:encoded>
            <author>lbarczio@redhat.com (Laura Barcziová)</author>
            <category>srpm</category>
            <category>copr</category>
        </item>
        <item>
            <title><![CDATA[2021 for Packit]]></title>
            <link>https://packit.dev/posts/2021-features</link>
            <guid>https://packit.dev/posts/2021-features</guid>
            <pubDate>Wed, 12 Jan 2022 08:23:38 GMT</pubDate>
            <description><![CDATA[The previous year 2021 wasn't interesting only because of the increased usage of Packit]]></description>
            <content:encoded><![CDATA[<p>The previous year 2021 wasn't interesting only because of the increased usage of Packit
(you can see more in <a href="/posts/2021-in-numbers">the previous post</a>).
The whole Packit team made a lot of improvements during the year.
Some small, some really big. So, let's take a look at the most important ones!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dashboard">Dashboard<a href="#dashboard" class="hash-link" aria-label="Direct link to Dashboard" title="Direct link to Dashboard">​</a></h2><p>The idea of having a dashboard for Packit service started as a
<a href="https://communityblog.fedoraproject.org/gsoc-progress-report-dashboard-for-packit-july-1-aug-16-2020/" target="_blank" rel="noopener noreferrer">Google Summer of Code 2020 project</a>
to provide a basic view of our service.
Thanks <a href="https://github.com/IceWreck" target="_blank" rel="noopener noreferrer">Anchit</a> for starting this!
Nowadays, it's a core part of the project and it has replaced the result pages in plain HTML. Do you remember them?</p><p>The dashboard can be found at <a href="https://dashboard.packit.dev" target="_blank" rel="noopener noreferrer">dashboard.packit.dev</a>.</p><p>Following picture shows a more convenient and visually-appealing view of builds and test runs.
For better context, the relevant pages are a connected to each other.</p><p><img loading="lazy" alt="Dashboard: Copr Build result" src="/assets/images/dashboard-copr-1a172fb72c00bb1b71af74610fc8ce7d.png" width="1085" height="776" class="img_ev3q"></p><p>If you want to see the overall picture, use our <a href="https://dashboard.packit.dev/pipelines" target="_blank" rel="noopener noreferrer">pipelines view</a> that was created exactly for that:</p><p><img loading="lazy" alt="Dashboard: Pipelines view" src="/assets/images/dashboard-pipelines-03077187af2a61a8ab3a3fb1ed508d84.png" width="1304" height="721" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="future-of-the-dashboard">Future of the dashboard<a href="#future-of-the-dashboard" class="hash-link" aria-label="Direct link to Future of the dashboard" title="Direct link to Future of the dashboard">​</a></h3><p>We consider our dashboard an important part of our service and are working on or planning more improvements:</p><ul><li>We are working on personalised pages for a user or git-forge namespace.</li><li>We are planning to show info about other job types we support by the service as well;
especially the <code>propose-downstream</code> one.</li><li>We are doing some database schema updates to be able to better interconnect various pages.</li><li>Do you have an idea for an improvement?
Let us know by creating an issue <a href="https://github.com/packit/dashboard/issues/new" target="_blank" rel="noopener noreferrer">here</a>.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="development">Development<a href="#development" class="hash-link" aria-label="Direct link to Development" title="Direct link to Development">​</a></h2><p>From the very start, Packit is developed publicly in an open-source way.
We participate in various projects like Google Summer of Code, Red Hat Open Source Contest and Hacktoberfest.
But we are also very glad if anyone from our users contributes and fixes some pain point.
To help with that, we've renamed all our branches to <code>main</code> and rapidly enhanced our contribution guide(s).
We would like to encourage you not to be afraid of contributing to any of <a href="https://github.com/packit/" target="_blank" rel="noopener noreferrer">our projects</a>.
We are prepared to help you with that.</p><p>If you want to keep an eye on what we are currently working on, check our <a href="https://github.com/orgs/packit/projects/4" target="_blank" rel="noopener noreferrer"><em>Packit upstream work</em> board on GitHub</a>.</p><p><img loading="lazy" alt="GitHub: Packit upstream work" src="/assets/images/github-project-3606aa0b741a1835854a5cbfe59bcb15.png" width="1298" height="276" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="testing-farm">Testing Farm<a href="#testing-farm" class="hash-link" aria-label="Direct link to Testing Farm" title="Direct link to Testing Farm">​</a></h2><p>The year 2021 was a tough one for our test workflow. For those who don't know, we use Testing Farm as our test runner.
At the beginning of the year, we switched to the new Testing Farm API version
(because the old one had died with the infrastructure it had been running on).
Unlike the old version, the new one fully supports <code>tmt</code> as a test definition.</p><p><img loading="lazy" alt="Testing Farm: results" src="/assets/images/testing-farm-results-976b2fa2b8055708c9bca93336fdad33.png" width="1369" height="436" class="img_ev3q"></p><p>During the year, a set of supported environments was enhanced by <code>centos-6</code>, <code>oraclelinux</code> and <code>aarch64</code>.
For Red Hat teams, we added support for using the internal instance of the Testing Farm.
Let us know if you are interested in this.
But no worries, you can use <code>centos-stream</code> and other publicly available environments.</p><p>Originally, the tests were run after the installation of the packages built using Copr from the source repository.
Newly, you can skip this step and run the tests without any build. This allows you to use Packit&amp;TestingFarm
for repositories containing only test definitions (e.g. QE teams).</p><p><img loading="lazy" alt="Testing Farm: no build" src="/assets/images/tf-no-build-9f7ecf53b820e6bfee6480256b97e69d.png" width="1309" height="194" class="img_ev3q"></p><p>Lastly, we send some environment variables to the test environment and you can define your own if you want.</p><p>As we see, testing is a key feature for some teams and we still want to improve test use-cases
-- let us know if you are missing anything (<a href="https://github.com/packit/packit-service/issues/new" target="_blank" rel="noopener noreferrer">here</a> or
<a href="https://gitlab.com/groups/testing-farm/-/issues" target="_blank" rel="noopener noreferrer">in the Testing Farm issue tracker</a>).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="service">Service<a href="#service" class="hash-link" aria-label="Direct link to Service" title="Direct link to Service">​</a></h2><p>To get users quickly know that we accepted the task and started working on it, we added two nice features
-- <code>:1</code> reaction for the comment that we are reacting on and <code>task accepted</code> commit status.</p><p><img loading="lazy" alt="Packit Service: reactions" src="/assets/images/thumbs-up-5f8d2df5d24049a4154408995c65dad3.png" width="950" height="176" class="img_ev3q"></p><p>Speaking of statuses, we switched to a more feature-rich API called GitHub Check Runs.
It allows us to create a separate result page where we can show more information
-- e.g. more links when needed and more space for hints when there is a problem.
You can also find the run results on a separate <code>Checks</code> tab of the pull-requests page.
The check run page contains only the basic info and we don't want to replace a dashboard with this.
(Because of the consistency between git-forges and to be able to link the related dashboard pages.)
Another feature of check runs you might find useful is being able to re-run the failed test with just one click
(see the <code>Re-run</code> button in the following screenshot).</p><p><img loading="lazy" alt="Check runs" src="/assets/images/check-runs-a38bf2a5d1febf4d3933a066dec2696c.png" width="977" height="384" class="img_ev3q"></p><p>Inspired by other systems (like Zuul), for pull-requests we started using merge state
so you can be sure the state we use is the same as the one with the pull-request being merged.
We are working with the Testing Farm team to add the support there as well so the test definition is consistent with the build.
But no worries, you can disable this if you don't want this behaviour.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="downstream">Downstream<a href="#downstream" class="hash-link" aria-label="Direct link to Downstream" title="Direct link to Downstream">​</a></h2><p>One of our current initiatives is to help maintainers in the downstream part of the workflow as well.
We had the first part of that for some time in a form of <code>propose-downstream</code> job (you can expect more enhancements on this front),
but we newly support triggering Koji builds for new commits in dist-git.</p><p>When there is a new dist-git commit that contains Packit config with the defined <code>koji_build</code> job,
Packit will trigger the Koji build for you.
It's fresh and basic so far so give us some time to announce this with more details.
The next step will be to create a Bodhi update when the build successfully finishes and that is
what is currently being worked on.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="status-page">Status Page<a href="#status-page" class="hash-link" aria-label="Direct link to Status Page" title="Direct link to Status Page">​</a></h2><p>Yes, we have a status page where you can check if everything is ok with our service.
It can be found at <a href="https://status.packit.dev/" target="_blank" rel="noopener noreferrer">status.packit.dev</a>
On the page, you can find a list of incidents we resolved or are trying to fix.
If you don't see any incident and still think the service isn't working as expected, please,
let us know (see <a href="/#contact">contacts</a>).
Another useful source of information is the <a href="https://dashboard.packit.dev/pipelines" target="_blank" rel="noopener noreferrer">pipelines view</a> on our dashboard.</p><p><img loading="lazy" alt="Packit Status Page: systems" src="/assets/images/status-1-161f9f8eab1e1c68007141a99dfda890.png" width="575" height="652" class="img_ev3q">
<img loading="lazy" alt="Packit Status Page: incidents" src="/assets/images/status-2-870fd2bf13f962a7dc8e9ce1198436b5.png" width="616" height="697" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="future">Future<a href="#future" class="hash-link" aria-label="Direct link to Future" title="Direct link to Future">​</a></h2><p>As you see, we managed to accomplish a lot last year. And what you can expect this year?
<!-- -->[Let us know]<!-- -->({{&lt; ref "faq#how-can-i-contact-you" &gt;}}) if you have some ideas and want to influence that!</p>]]></content:encoded>
            <author>flachman@redhat.com (František Lachman)</author>
            <category>2021</category>
            <category>yearly-features</category>
            <category>summary</category>
        </item>
        <item>
            <title><![CDATA[2021 in Numbers]]></title>
            <link>https://packit.dev/posts/2021-in-numbers</link>
            <guid>https://packit.dev/posts/2021-in-numbers</guid>
            <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Let's take a look on the year 2021 through some numbers.]]></description>
            <content:encoded><![CDATA[<p>Let's take a look on the year 2021 through some numbers.
We would like to show you some interesting statistics and charts
that can describe the work of Packit during the year 2021.
If you are more interested in new features,
let's take a look on our <a href="/posts/2021-features">second post</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="github-application">GitHub Application<a href="#github-application" class="hash-link" aria-label="Direct link to GitHub Application" title="Direct link to GitHub Application">​</a></h2><p>As of now, we have <code>169</code> installations of our GitHub application and <code>41</code> of them is from the year 2021.
Looking at the monthly numbers below, it looks like we are getting back to shape.</p><p><img loading="lazy" alt="GitHub installations in 2021" src="/assets/images/github-installations-9dab680b453ba424a9fffa744270e432.png" width="350" height="210" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="builds">Builds<a href="#builds" class="hash-link" aria-label="Direct link to Builds" title="Direct link to Builds">​</a></h2><p>Compared to the year 2020 when we made <code>28 430</code> Copr builds for our users,
we made <code>4.6</code> times more in the year 2021: <code>133 222</code> Copr builds.
For those who remember the start of our project,
we had a goal of <code>5</code> thousand for the <a href="https://flocktofedora.org/" target="_blank" rel="noopener noreferrer">FLOCK</a> 2019.
We are now two digits ahead!
And if you are wondering how active is our user on Copr,
we've created <code>2/3</code> of all the new Copr projects during the year.</p><p>To made this happen, we've created <code>36 133</code> source RPM files in the year 2021.</p><p><img loading="lazy" alt="Copr builds in 2021" src="/assets/images/copr-builds-dd34dfb527eb67affe3ddfad09436f25.png" width="362" height="211" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="test-runs">Test runs<a href="#test-runs" class="hash-link" aria-label="Direct link to Test runs" title="Direct link to Test runs">​</a></h2><p>Sadly, we started saving the submit time of the test runs in June
so we have numbers only for the second half of the year.
The numbers are not so high as for the builds but still <code>18 498</code> test runs.</p><p><img loading="lazy" alt="Test runs in 2021" src="/assets/images/test-runs-e97a55c365a585076c678f29f29b3fd4.png" width="364" height="211" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="top-20-projects-in-the-number-of-pr-copr-builds">Top 20 projects in the number of PR Copr Builds<a href="#top-20-projects-in-the-number-of-pr-copr-builds" class="hash-link" aria-label="Direct link to Top 20 projects in the number of PR Copr Builds" title="Direct link to Top 20 projects in the number of PR Copr Builds">​</a></h2><p><img loading="lazy" alt="Top20 projects in the number of PR Copr Builds" src="/assets/images/top20-copr-builds-02b2a99641f6d7005a189512c9b1f7a0.png" width="639" height="377" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="top-20-projects-in-the-number-of-pr-test-runs">Top 20 projects in the number of PR test runs<a href="#top-20-projects-in-the-number-of-pr-test-runs" class="hash-link" aria-label="Direct link to Top 20 projects in the number of PR test runs" title="Direct link to Top 20 projects in the number of PR test runs">​</a></h2><p><img loading="lazy" alt="Top20 projects in the number of PR Test runs" src="/assets/images/top20-test-runs-a6d4a360be98fb3f66fb65f0d5a46be0.png" width="640" height="377" class="img_ev3q"></p>]]></content:encoded>
            <author>flachman@redhat.com (František Lachman)</author>
            <category>2021</category>
            <category>yearly-numbers</category>
            <category>summary</category>
        </item>
        <item>
            <title><![CDATA[Working on the next major RHEL release, in your upstream repo]]></title>
            <link>https://packit.dev/posts/fedora-eln</link>
            <guid>https://packit.dev/posts/fedora-eln</guid>
            <pubDate>Sun, 04 Oct 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Fedora EL Niño (ELN) is such an]]></description>
            <content:encoded><![CDATA[<p><a href="https://docs.fedoraproject.org/en-US/eln/" target="_blank" rel="noopener noreferrer">Fedora EL Niño</a> (ELN) is such an
awesome idea. It enables building rawhide packages in two distinct buildroots:</p><ol><li>the standard Fedora Rawhide buildroot and</li><li>a second one, which mimics Red Hat Enterprise Linux</li></ol><p>This way you can make sure that your new upstream release builds fine in the
next RHEL.</p><p>But this feedback might be a little bit too late: the upstream
release already happened and the code was imported in Fedora dist-git, so
fixing an issue will require repeating the whole process. Wouldn't it be better
to know if the upstream change builds fine in ELN <strong>while</strong> working on the
code?</p><p>Oh, wait!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="you-can-do-this-easily-with-packit">You can do this easily with Packit<a href="#you-can-do-this-easily-with-packit" class="hash-link" aria-label="Direct link to You can do this easily with Packit" title="Direct link to You can do this easily with Packit">​</a></h3><p>If your GitHub project is not using Packit yet, <a href="https://packit.dev/docs/guide" target="_blank" rel="noopener noreferrer">here's a
guide</a> how to start.</p><p>Once it's set up, you need to make sure that your pull requests are also being
built in the <code>fedora-eln</code> target:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jobs:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - job: copr_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    trigger: pull_request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metadata:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      targets:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - fedora-development</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - fedora-eln</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With this config, changes from every pull request will be built in all
development versions of Fedora (at the time of writing this, it's Rawhide and
Fedora 33) and in Fedora ELN.</p><p>Easy, right?</p><p>Packit can also trigger builds when you push to a branch. If you want to have
up to date builds of your main branch for ELN and development versions of
Fedora, here's how to set it up:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jobs:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - job: copr_build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    trigger: commit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    metadata:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      targets:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - fedora-development</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - fedora-eln</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      branch: main</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="a-real-life-example">A real-life example<a href="#a-real-life-example" class="hash-link" aria-label="Direct link to A real-life example" title="Direct link to A real-life example">​</a></h3><p>If you got here and you're still not sure why you'd need this, I can give
you a real-life example.</p><p>Recently, <a href="https://github.com/jkonecny12" target="_blank" rel="noopener noreferrer">Jirka Konecny</a> from the RHEL
Installer team reached out to us that they would love to use Packit as a CI
system. He set it up and now all the anaconda PRs are being built and tested on
<code>Fedora Rawhide x86_64</code>.</p><p><img loading="lazy" alt="Anaconda PR passing tests" src="/assets/images/anaconda-rawhide-tests-passing-4fd8c7a3455a72981b0fe9509fdd48fb.png" width="1205" height="725" class="img_ev3q"></p><p>Jirka continued and added Fedora ELN as an additional target. The build failed
because one of build requirements was not available in ELN:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Fedora ELN - Developmental modular packages for the next Enterprise Linux release               2.7 kB/s | 2.3 kB     00:0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No matching package to install: 'metacity'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Not all dependencies satisfied</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Some packages could not be found.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Since the team discovered this during their upstream development process, they
can react to the issue right away. It would have been pretty late if they found this
while the next major RHEL is reaching alpha - at this moment they should
have enough time to fix the problem and make sure anaconda builds fine in ELN.</p><p>So, are you convinced? Let us know if you need help setting up Packit in your
upstream repositories :)</p>]]></content:encoded>
            <author>ttomecek@redhat.com (Tomáš Tomeček)</author>
            <category>downstream</category>
        </item>
    </channel>
</rss>